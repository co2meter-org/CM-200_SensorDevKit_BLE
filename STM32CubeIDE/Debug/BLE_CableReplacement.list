
BLE_CableReplacement.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010874  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ad4  080109b8  080109b8  000209b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801248c  0801248c  0002248c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08012494  08012494  00022494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08012498  08012498  00022498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000204  20000008  0801249c  00030008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000041  2000020c  080126a0  0003020c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000250  080126e1  00030250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001904  20000264  080126f2  00030264  2**2
                  ALLOC
 10 ._user_heap_stack 00001400  20001b68  080126f2  00031b68  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030261  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00040000  2**2
                  ALLOC
 13 MB_MEM1       000001bc  20030028  20030028  00040000  2**2
                  ALLOC
 14 MB_MEM2       00000883  200301e4  200301e4  00040000  2**2
                  ALLOC
 15 .comment      00000043  00000000  00000000  00030291  2**0
                  CONTENTS, READONLY
 16 .debug_info   00032a10  00000000  00000000  000302d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 000073aa  00000000  00000000  00062ce4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00002cf0  00000000  00000000  0006a090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00002262  00000000  00000000  0006cd80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  000379d7  00000000  00000000  0006efe2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0003f06d  00000000  00000000  000a69b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    0013472a  00000000  00000000  000e5a26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  0000cc3c  00000000  00000000  0021a150  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000008c  00000000  00000000  00226d8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000264 	.word	0x20000264
 800015c:	00000000 	.word	0x00000000
 8000160:	0801099c 	.word	0x0801099c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000268 	.word	0x20000268
 800017c:	0801099c 	.word	0x0801099c

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr
	...

080001a0 <memchr>:
 80001a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001a4:	2a10      	cmp	r2, #16
 80001a6:	db2b      	blt.n	8000200 <memchr+0x60>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	d008      	beq.n	80001c0 <memchr+0x20>
 80001ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001b2:	3a01      	subs	r2, #1
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d02d      	beq.n	8000214 <memchr+0x74>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	b342      	cbz	r2, 8000210 <memchr+0x70>
 80001be:	d1f6      	bne.n	80001ae <memchr+0xe>
 80001c0:	b4f0      	push	{r4, r5, r6, r7}
 80001c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ca:	f022 0407 	bic.w	r4, r2, #7
 80001ce:	f07f 0700 	mvns.w	r7, #0
 80001d2:	2300      	movs	r3, #0
 80001d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001d8:	3c08      	subs	r4, #8
 80001da:	ea85 0501 	eor.w	r5, r5, r1
 80001de:	ea86 0601 	eor.w	r6, r6, r1
 80001e2:	fa85 f547 	uadd8	r5, r5, r7
 80001e6:	faa3 f587 	sel	r5, r3, r7
 80001ea:	fa86 f647 	uadd8	r6, r6, r7
 80001ee:	faa5 f687 	sel	r6, r5, r7
 80001f2:	b98e      	cbnz	r6, 8000218 <memchr+0x78>
 80001f4:	d1ee      	bne.n	80001d4 <memchr+0x34>
 80001f6:	bcf0      	pop	{r4, r5, r6, r7}
 80001f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001fc:	f002 0207 	and.w	r2, r2, #7
 8000200:	b132      	cbz	r2, 8000210 <memchr+0x70>
 8000202:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000206:	3a01      	subs	r2, #1
 8000208:	ea83 0301 	eor.w	r3, r3, r1
 800020c:	b113      	cbz	r3, 8000214 <memchr+0x74>
 800020e:	d1f8      	bne.n	8000202 <memchr+0x62>
 8000210:	2000      	movs	r0, #0
 8000212:	4770      	bx	lr
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr
 8000218:	2d00      	cmp	r5, #0
 800021a:	bf06      	itte	eq
 800021c:	4635      	moveq	r5, r6
 800021e:	3803      	subeq	r0, #3
 8000220:	3807      	subne	r0, #7
 8000222:	f015 0f01 	tst.w	r5, #1
 8000226:	d107      	bne.n	8000238 <memchr+0x98>
 8000228:	3001      	adds	r0, #1
 800022a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800022e:	bf02      	ittt	eq
 8000230:	3001      	addeq	r0, #1
 8000232:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000236:	3001      	addeq	r0, #1
 8000238:	bcf0      	pop	{r4, r5, r6, r7}
 800023a:	3801      	subs	r0, #1
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <__aeabi_drsub>:
 8000250:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000254:	e002      	b.n	800025c <__adddf3>
 8000256:	bf00      	nop

08000258 <__aeabi_dsub>:
 8000258:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800025c <__adddf3>:
 800025c:	b530      	push	{r4, r5, lr}
 800025e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000262:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000266:	ea94 0f05 	teq	r4, r5
 800026a:	bf08      	it	eq
 800026c:	ea90 0f02 	teqeq	r0, r2
 8000270:	bf1f      	itttt	ne
 8000272:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000276:	ea55 0c02 	orrsne.w	ip, r5, r2
 800027a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800027e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000282:	f000 80e2 	beq.w	800044a <__adddf3+0x1ee>
 8000286:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800028a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800028e:	bfb8      	it	lt
 8000290:	426d      	neglt	r5, r5
 8000292:	dd0c      	ble.n	80002ae <__adddf3+0x52>
 8000294:	442c      	add	r4, r5
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	ea82 0000 	eor.w	r0, r2, r0
 80002a2:	ea83 0101 	eor.w	r1, r3, r1
 80002a6:	ea80 0202 	eor.w	r2, r0, r2
 80002aa:	ea81 0303 	eor.w	r3, r1, r3
 80002ae:	2d36      	cmp	r5, #54	; 0x36
 80002b0:	bf88      	it	hi
 80002b2:	bd30      	pophi	{r4, r5, pc}
 80002b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c4:	d002      	beq.n	80002cc <__adddf3+0x70>
 80002c6:	4240      	negs	r0, r0
 80002c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x84>
 80002da:	4252      	negs	r2, r2
 80002dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e0:	ea94 0f05 	teq	r4, r5
 80002e4:	f000 80a7 	beq.w	8000436 <__adddf3+0x1da>
 80002e8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80002f0:	db0d      	blt.n	800030e <__adddf3+0xb2>
 80002f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002f6:	fa22 f205 	lsr.w	r2, r2, r5
 80002fa:	1880      	adds	r0, r0, r2
 80002fc:	f141 0100 	adc.w	r1, r1, #0
 8000300:	fa03 f20e 	lsl.w	r2, r3, lr
 8000304:	1880      	adds	r0, r0, r2
 8000306:	fa43 f305 	asr.w	r3, r3, r5
 800030a:	4159      	adcs	r1, r3
 800030c:	e00e      	b.n	800032c <__adddf3+0xd0>
 800030e:	f1a5 0520 	sub.w	r5, r5, #32
 8000312:	f10e 0e20 	add.w	lr, lr, #32
 8000316:	2a01      	cmp	r2, #1
 8000318:	fa03 fc0e 	lsl.w	ip, r3, lr
 800031c:	bf28      	it	cs
 800031e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000322:	fa43 f305 	asr.w	r3, r3, r5
 8000326:	18c0      	adds	r0, r0, r3
 8000328:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800032c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000330:	d507      	bpl.n	8000342 <__adddf3+0xe6>
 8000332:	f04f 0e00 	mov.w	lr, #0
 8000336:	f1dc 0c00 	rsbs	ip, ip, #0
 800033a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800033e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000342:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000346:	d31b      	bcc.n	8000380 <__adddf3+0x124>
 8000348:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800034c:	d30c      	bcc.n	8000368 <__adddf3+0x10c>
 800034e:	0849      	lsrs	r1, r1, #1
 8000350:	ea5f 0030 	movs.w	r0, r0, rrx
 8000354:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000358:	f104 0401 	add.w	r4, r4, #1
 800035c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000360:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000364:	f080 809a 	bcs.w	800049c <__adddf3+0x240>
 8000368:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800036c:	bf08      	it	eq
 800036e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000372:	f150 0000 	adcs.w	r0, r0, #0
 8000376:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800037a:	ea41 0105 	orr.w	r1, r1, r5
 800037e:	bd30      	pop	{r4, r5, pc}
 8000380:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000384:	4140      	adcs	r0, r0
 8000386:	eb41 0101 	adc.w	r1, r1, r1
 800038a:	3c01      	subs	r4, #1
 800038c:	bf28      	it	cs
 800038e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000392:	d2e9      	bcs.n	8000368 <__adddf3+0x10c>
 8000394:	f091 0f00 	teq	r1, #0
 8000398:	bf04      	itt	eq
 800039a:	4601      	moveq	r1, r0
 800039c:	2000      	moveq	r0, #0
 800039e:	fab1 f381 	clz	r3, r1
 80003a2:	bf08      	it	eq
 80003a4:	3320      	addeq	r3, #32
 80003a6:	f1a3 030b 	sub.w	r3, r3, #11
 80003aa:	f1b3 0220 	subs.w	r2, r3, #32
 80003ae:	da0c      	bge.n	80003ca <__adddf3+0x16e>
 80003b0:	320c      	adds	r2, #12
 80003b2:	dd08      	ble.n	80003c6 <__adddf3+0x16a>
 80003b4:	f102 0c14 	add.w	ip, r2, #20
 80003b8:	f1c2 020c 	rsb	r2, r2, #12
 80003bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003c0:	fa21 f102 	lsr.w	r1, r1, r2
 80003c4:	e00c      	b.n	80003e0 <__adddf3+0x184>
 80003c6:	f102 0214 	add.w	r2, r2, #20
 80003ca:	bfd8      	it	le
 80003cc:	f1c2 0c20 	rsble	ip, r2, #32
 80003d0:	fa01 f102 	lsl.w	r1, r1, r2
 80003d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d8:	bfdc      	itt	le
 80003da:	ea41 010c 	orrle.w	r1, r1, ip
 80003de:	4090      	lslle	r0, r2
 80003e0:	1ae4      	subs	r4, r4, r3
 80003e2:	bfa2      	ittt	ge
 80003e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e8:	4329      	orrge	r1, r5
 80003ea:	bd30      	popge	{r4, r5, pc}
 80003ec:	ea6f 0404 	mvn.w	r4, r4
 80003f0:	3c1f      	subs	r4, #31
 80003f2:	da1c      	bge.n	800042e <__adddf3+0x1d2>
 80003f4:	340c      	adds	r4, #12
 80003f6:	dc0e      	bgt.n	8000416 <__adddf3+0x1ba>
 80003f8:	f104 0414 	add.w	r4, r4, #20
 80003fc:	f1c4 0220 	rsb	r2, r4, #32
 8000400:	fa20 f004 	lsr.w	r0, r0, r4
 8000404:	fa01 f302 	lsl.w	r3, r1, r2
 8000408:	ea40 0003 	orr.w	r0, r0, r3
 800040c:	fa21 f304 	lsr.w	r3, r1, r4
 8000410:	ea45 0103 	orr.w	r1, r5, r3
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f1c4 040c 	rsb	r4, r4, #12
 800041a:	f1c4 0220 	rsb	r2, r4, #32
 800041e:	fa20 f002 	lsr.w	r0, r0, r2
 8000422:	fa01 f304 	lsl.w	r3, r1, r4
 8000426:	ea40 0003 	orr.w	r0, r0, r3
 800042a:	4629      	mov	r1, r5
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	fa21 f004 	lsr.w	r0, r1, r4
 8000432:	4629      	mov	r1, r5
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f094 0f00 	teq	r4, #0
 800043a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800043e:	bf06      	itte	eq
 8000440:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000444:	3401      	addeq	r4, #1
 8000446:	3d01      	subne	r5, #1
 8000448:	e74e      	b.n	80002e8 <__adddf3+0x8c>
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf18      	it	ne
 8000450:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000454:	d029      	beq.n	80004aa <__adddf3+0x24e>
 8000456:	ea94 0f05 	teq	r4, r5
 800045a:	bf08      	it	eq
 800045c:	ea90 0f02 	teqeq	r0, r2
 8000460:	d005      	beq.n	800046e <__adddf3+0x212>
 8000462:	ea54 0c00 	orrs.w	ip, r4, r0
 8000466:	bf04      	itt	eq
 8000468:	4619      	moveq	r1, r3
 800046a:	4610      	moveq	r0, r2
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	ea91 0f03 	teq	r1, r3
 8000472:	bf1e      	ittt	ne
 8000474:	2100      	movne	r1, #0
 8000476:	2000      	movne	r0, #0
 8000478:	bd30      	popne	{r4, r5, pc}
 800047a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800047e:	d105      	bne.n	800048c <__adddf3+0x230>
 8000480:	0040      	lsls	r0, r0, #1
 8000482:	4149      	adcs	r1, r1
 8000484:	bf28      	it	cs
 8000486:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800048a:	bd30      	pop	{r4, r5, pc}
 800048c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000490:	bf3c      	itt	cc
 8000492:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000496:	bd30      	popcc	{r4, r5, pc}
 8000498:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800049c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004a4:	f04f 0000 	mov.w	r0, #0
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf1a      	itte	ne
 80004b0:	4619      	movne	r1, r3
 80004b2:	4610      	movne	r0, r2
 80004b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b8:	bf1c      	itt	ne
 80004ba:	460b      	movne	r3, r1
 80004bc:	4602      	movne	r2, r0
 80004be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004c2:	bf06      	itte	eq
 80004c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c8:	ea91 0f03 	teqeq	r1, r3
 80004cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	bf00      	nop

080004d4 <__aeabi_ui2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f04f 0500 	mov.w	r5, #0
 80004ec:	f04f 0100 	mov.w	r1, #0
 80004f0:	e750      	b.n	8000394 <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_i2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800050c:	bf48      	it	mi
 800050e:	4240      	negmi	r0, r0
 8000510:	f04f 0100 	mov.w	r1, #0
 8000514:	e73e      	b.n	8000394 <__adddf3+0x138>
 8000516:	bf00      	nop

08000518 <__aeabi_f2d>:
 8000518:	0042      	lsls	r2, r0, #1
 800051a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800051e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000522:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000526:	bf1f      	itttt	ne
 8000528:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800052c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000530:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000534:	4770      	bxne	lr
 8000536:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800053a:	bf08      	it	eq
 800053c:	4770      	bxeq	lr
 800053e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000542:	bf04      	itt	eq
 8000544:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000548:	4770      	bxeq	lr
 800054a:	b530      	push	{r4, r5, lr}
 800054c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000550:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000554:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000558:	e71c      	b.n	8000394 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_ul2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f04f 0500 	mov.w	r5, #0
 800056a:	e00a      	b.n	8000582 <__aeabi_l2d+0x16>

0800056c <__aeabi_l2d>:
 800056c:	ea50 0201 	orrs.w	r2, r0, r1
 8000570:	bf08      	it	eq
 8000572:	4770      	bxeq	lr
 8000574:	b530      	push	{r4, r5, lr}
 8000576:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800057a:	d502      	bpl.n	8000582 <__aeabi_l2d+0x16>
 800057c:	4240      	negs	r0, r0
 800057e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000582:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000586:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800058a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800058e:	f43f aed8 	beq.w	8000342 <__adddf3+0xe6>
 8000592:	f04f 0203 	mov.w	r2, #3
 8000596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059a:	bf18      	it	ne
 800059c:	3203      	addne	r2, #3
 800059e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a2:	bf18      	it	ne
 80005a4:	3203      	addne	r2, #3
 80005a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005aa:	f1c2 0320 	rsb	r3, r2, #32
 80005ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80005b2:	fa20 f002 	lsr.w	r0, r0, r2
 80005b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ba:	ea40 000e 	orr.w	r0, r0, lr
 80005be:	fa21 f102 	lsr.w	r1, r1, r2
 80005c2:	4414      	add	r4, r2
 80005c4:	e6bd      	b.n	8000342 <__adddf3+0xe6>
 80005c6:	bf00      	nop

080005c8 <__aeabi_dmul>:
 80005c8:	b570      	push	{r4, r5, r6, lr}
 80005ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005d6:	bf1d      	ittte	ne
 80005d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005dc:	ea94 0f0c 	teqne	r4, ip
 80005e0:	ea95 0f0c 	teqne	r5, ip
 80005e4:	f000 f8de 	bleq	80007a4 <__aeabi_dmul+0x1dc>
 80005e8:	442c      	add	r4, r5
 80005ea:	ea81 0603 	eor.w	r6, r1, r3
 80005ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005fa:	bf18      	it	ne
 80005fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000600:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000604:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000608:	d038      	beq.n	800067c <__aeabi_dmul+0xb4>
 800060a:	fba0 ce02 	umull	ip, lr, r0, r2
 800060e:	f04f 0500 	mov.w	r5, #0
 8000612:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000616:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800061a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800061e:	f04f 0600 	mov.w	r6, #0
 8000622:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000626:	f09c 0f00 	teq	ip, #0
 800062a:	bf18      	it	ne
 800062c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000630:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000634:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000638:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800063c:	d204      	bcs.n	8000648 <__aeabi_dmul+0x80>
 800063e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000642:	416d      	adcs	r5, r5
 8000644:	eb46 0606 	adc.w	r6, r6, r6
 8000648:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800064c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000650:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000654:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000658:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800065c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000660:	bf88      	it	hi
 8000662:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000666:	d81e      	bhi.n	80006a6 <__aeabi_dmul+0xde>
 8000668:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800066c:	bf08      	it	eq
 800066e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000672:	f150 0000 	adcs.w	r0, r0, #0
 8000676:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000680:	ea46 0101 	orr.w	r1, r6, r1
 8000684:	ea40 0002 	orr.w	r0, r0, r2
 8000688:	ea81 0103 	eor.w	r1, r1, r3
 800068c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000690:	bfc2      	ittt	gt
 8000692:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000696:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800069a:	bd70      	popgt	{r4, r5, r6, pc}
 800069c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a0:	f04f 0e00 	mov.w	lr, #0
 80006a4:	3c01      	subs	r4, #1
 80006a6:	f300 80ab 	bgt.w	8000800 <__aeabi_dmul+0x238>
 80006aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ae:	bfde      	ittt	le
 80006b0:	2000      	movle	r0, #0
 80006b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006b6:	bd70      	pople	{r4, r5, r6, pc}
 80006b8:	f1c4 0400 	rsb	r4, r4, #0
 80006bc:	3c20      	subs	r4, #32
 80006be:	da35      	bge.n	800072c <__aeabi_dmul+0x164>
 80006c0:	340c      	adds	r4, #12
 80006c2:	dc1b      	bgt.n	80006fc <__aeabi_dmul+0x134>
 80006c4:	f104 0414 	add.w	r4, r4, #20
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f305 	lsl.w	r3, r0, r5
 80006d0:	fa20 f004 	lsr.w	r0, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ec:	eb42 0106 	adc.w	r1, r2, r6
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 040c 	rsb	r4, r4, #12
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f304 	lsl.w	r3, r0, r4
 8000708:	fa20 f005 	lsr.w	r0, r0, r5
 800070c:	fa01 f204 	lsl.w	r2, r1, r4
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000718:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800071c:	f141 0100 	adc.w	r1, r1, #0
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f205 	lsl.w	r2, r0, r5
 8000734:	ea4e 0e02 	orr.w	lr, lr, r2
 8000738:	fa20 f304 	lsr.w	r3, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea43 0302 	orr.w	r3, r3, r2
 8000744:	fa21 f004 	lsr.w	r0, r1, r4
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800074c:	fa21 f204 	lsr.w	r2, r1, r4
 8000750:	ea20 0002 	bic.w	r0, r0, r2
 8000754:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f094 0f00 	teq	r4, #0
 8000768:	d10f      	bne.n	800078a <__aeabi_dmul+0x1c2>
 800076a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800076e:	0040      	lsls	r0, r0, #1
 8000770:	eb41 0101 	adc.w	r1, r1, r1
 8000774:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3c01      	subeq	r4, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1a6>
 800077e:	ea41 0106 	orr.w	r1, r1, r6
 8000782:	f095 0f00 	teq	r5, #0
 8000786:	bf18      	it	ne
 8000788:	4770      	bxne	lr
 800078a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800078e:	0052      	lsls	r2, r2, #1
 8000790:	eb43 0303 	adc.w	r3, r3, r3
 8000794:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3d01      	subeq	r5, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1c6>
 800079e:	ea43 0306 	orr.w	r3, r3, r6
 80007a2:	4770      	bx	lr
 80007a4:	ea94 0f0c 	teq	r4, ip
 80007a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ac:	bf18      	it	ne
 80007ae:	ea95 0f0c 	teqne	r5, ip
 80007b2:	d00c      	beq.n	80007ce <__aeabi_dmul+0x206>
 80007b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007be:	d1d1      	bne.n	8000764 <__aeabi_dmul+0x19c>
 80007c0:	ea81 0103 	eor.w	r1, r1, r3
 80007c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c8:	f04f 0000 	mov.w	r0, #0
 80007cc:	bd70      	pop	{r4, r5, r6, pc}
 80007ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d2:	bf06      	itte	eq
 80007d4:	4610      	moveq	r0, r2
 80007d6:	4619      	moveq	r1, r3
 80007d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007dc:	d019      	beq.n	8000812 <__aeabi_dmul+0x24a>
 80007de:	ea94 0f0c 	teq	r4, ip
 80007e2:	d102      	bne.n	80007ea <__aeabi_dmul+0x222>
 80007e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e8:	d113      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007ea:	ea95 0f0c 	teq	r5, ip
 80007ee:	d105      	bne.n	80007fc <__aeabi_dmul+0x234>
 80007f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f4:	bf1c      	itt	ne
 80007f6:	4610      	movne	r0, r2
 80007f8:	4619      	movne	r1, r3
 80007fa:	d10a      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007fc:	ea81 0103 	eor.w	r1, r1, r3
 8000800:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000804:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000808:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000816:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800081a:	bd70      	pop	{r4, r5, r6, pc}

0800081c <__aeabi_ddiv>:
 800081c:	b570      	push	{r4, r5, r6, lr}
 800081e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000822:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000826:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800082a:	bf1d      	ittte	ne
 800082c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000830:	ea94 0f0c 	teqne	r4, ip
 8000834:	ea95 0f0c 	teqne	r5, ip
 8000838:	f000 f8a7 	bleq	800098a <__aeabi_ddiv+0x16e>
 800083c:	eba4 0405 	sub.w	r4, r4, r5
 8000840:	ea81 0e03 	eor.w	lr, r1, r3
 8000844:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000848:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800084c:	f000 8088 	beq.w	8000960 <__aeabi_ddiv+0x144>
 8000850:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000854:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000858:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800085c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000860:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000864:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000868:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800086c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000870:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000874:	429d      	cmp	r5, r3
 8000876:	bf08      	it	eq
 8000878:	4296      	cmpeq	r6, r2
 800087a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800087e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000882:	d202      	bcs.n	800088a <__aeabi_ddiv+0x6e>
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	1ab6      	subs	r6, r6, r2
 800088c:	eb65 0503 	sbc.w	r5, r5, r3
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800089a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008fc:	d018      	beq.n	8000930 <__aeabi_ddiv+0x114>
 80008fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000902:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000906:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800090a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800090e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000912:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000916:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800091a:	d1c0      	bne.n	800089e <__aeabi_ddiv+0x82>
 800091c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000920:	d10b      	bne.n	800093a <__aeabi_ddiv+0x11e>
 8000922:	ea41 0100 	orr.w	r1, r1, r0
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800092e:	e7b6      	b.n	800089e <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000934:	bf04      	itt	eq
 8000936:	4301      	orreq	r1, r0
 8000938:	2000      	moveq	r0, #0
 800093a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800093e:	bf88      	it	hi
 8000940:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000944:	f63f aeaf 	bhi.w	80006a6 <__aeabi_dmul+0xde>
 8000948:	ebb5 0c03 	subs.w	ip, r5, r3
 800094c:	bf04      	itt	eq
 800094e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000952:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000956:	f150 0000 	adcs.w	r0, r0, #0
 800095a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800095e:	bd70      	pop	{r4, r5, r6, pc}
 8000960:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000964:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000968:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800096c:	bfc2      	ittt	gt
 800096e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000972:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000976:	bd70      	popgt	{r4, r5, r6, pc}
 8000978:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800097c:	f04f 0e00 	mov.w	lr, #0
 8000980:	3c01      	subs	r4, #1
 8000982:	e690      	b.n	80006a6 <__aeabi_dmul+0xde>
 8000984:	ea45 0e06 	orr.w	lr, r5, r6
 8000988:	e68d      	b.n	80006a6 <__aeabi_dmul+0xde>
 800098a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800098e:	ea94 0f0c 	teq	r4, ip
 8000992:	bf08      	it	eq
 8000994:	ea95 0f0c 	teqeq	r5, ip
 8000998:	f43f af3b 	beq.w	8000812 <__aeabi_dmul+0x24a>
 800099c:	ea94 0f0c 	teq	r4, ip
 80009a0:	d10a      	bne.n	80009b8 <__aeabi_ddiv+0x19c>
 80009a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009a6:	f47f af34 	bne.w	8000812 <__aeabi_dmul+0x24a>
 80009aa:	ea95 0f0c 	teq	r5, ip
 80009ae:	f47f af25 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009b2:	4610      	mov	r0, r2
 80009b4:	4619      	mov	r1, r3
 80009b6:	e72c      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009b8:	ea95 0f0c 	teq	r5, ip
 80009bc:	d106      	bne.n	80009cc <__aeabi_ddiv+0x1b0>
 80009be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009c2:	f43f aefd 	beq.w	80007c0 <__aeabi_dmul+0x1f8>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e722      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009d6:	f47f aec5 	bne.w	8000764 <__aeabi_dmul+0x19c>
 80009da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009de:	f47f af0d 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009e6:	f47f aeeb 	bne.w	80007c0 <__aeabi_dmul+0x1f8>
 80009ea:	e712      	b.n	8000812 <__aeabi_dmul+0x24a>

080009ec <__gedf2>:
 80009ec:	f04f 3cff 	mov.w	ip, #4294967295
 80009f0:	e006      	b.n	8000a00 <__cmpdf2+0x4>
 80009f2:	bf00      	nop

080009f4 <__ledf2>:
 80009f4:	f04f 0c01 	mov.w	ip, #1
 80009f8:	e002      	b.n	8000a00 <__cmpdf2+0x4>
 80009fa:	bf00      	nop

080009fc <__cmpdf2>:
 80009fc:	f04f 0c01 	mov.w	ip, #1
 8000a00:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a16:	d01b      	beq.n	8000a50 <__cmpdf2+0x54>
 8000a18:	b001      	add	sp, #4
 8000a1a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a1e:	bf0c      	ite	eq
 8000a20:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a24:	ea91 0f03 	teqne	r1, r3
 8000a28:	bf02      	ittt	eq
 8000a2a:	ea90 0f02 	teqeq	r0, r2
 8000a2e:	2000      	moveq	r0, #0
 8000a30:	4770      	bxeq	lr
 8000a32:	f110 0f00 	cmn.w	r0, #0
 8000a36:	ea91 0f03 	teq	r1, r3
 8000a3a:	bf58      	it	pl
 8000a3c:	4299      	cmppl	r1, r3
 8000a3e:	bf08      	it	eq
 8000a40:	4290      	cmpeq	r0, r2
 8000a42:	bf2c      	ite	cs
 8000a44:	17d8      	asrcs	r0, r3, #31
 8000a46:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a4a:	f040 0001 	orr.w	r0, r0, #1
 8000a4e:	4770      	bx	lr
 8000a50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__cmpdf2+0x64>
 8000a5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a5e:	d107      	bne.n	8000a70 <__cmpdf2+0x74>
 8000a60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a68:	d1d6      	bne.n	8000a18 <__cmpdf2+0x1c>
 8000a6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a6e:	d0d3      	beq.n	8000a18 <__cmpdf2+0x1c>
 8000a70:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdrcmple>:
 8000a78:	4684      	mov	ip, r0
 8000a7a:	4610      	mov	r0, r2
 8000a7c:	4662      	mov	r2, ip
 8000a7e:	468c      	mov	ip, r1
 8000a80:	4619      	mov	r1, r3
 8000a82:	4663      	mov	r3, ip
 8000a84:	e000      	b.n	8000a88 <__aeabi_cdcmpeq>
 8000a86:	bf00      	nop

08000a88 <__aeabi_cdcmpeq>:
 8000a88:	b501      	push	{r0, lr}
 8000a8a:	f7ff ffb7 	bl	80009fc <__cmpdf2>
 8000a8e:	2800      	cmp	r0, #0
 8000a90:	bf48      	it	mi
 8000a92:	f110 0f00 	cmnmi.w	r0, #0
 8000a96:	bd01      	pop	{r0, pc}

08000a98 <__aeabi_dcmpeq>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff fff4 	bl	8000a88 <__aeabi_cdcmpeq>
 8000aa0:	bf0c      	ite	eq
 8000aa2:	2001      	moveq	r0, #1
 8000aa4:	2000      	movne	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmplt>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffea 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ab4:	bf34      	ite	cc
 8000ab6:	2001      	movcc	r0, #1
 8000ab8:	2000      	movcs	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmple>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffe0 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ac8:	bf94      	ite	ls
 8000aca:	2001      	movls	r0, #1
 8000acc:	2000      	movhi	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpge>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffce 	bl	8000a78 <__aeabi_cdrcmple>
 8000adc:	bf94      	ite	ls
 8000ade:	2001      	movls	r0, #1
 8000ae0:	2000      	movhi	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmpgt>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffc4 	bl	8000a78 <__aeabi_cdrcmple>
 8000af0:	bf34      	ite	cc
 8000af2:	2001      	movcc	r0, #1
 8000af4:	2000      	movcs	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpun>:
 8000afc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x10>
 8000b06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b0a:	d10a      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b14:	d102      	bne.n	8000b1c <__aeabi_dcmpun+0x20>
 8000b16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b1a:	d102      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	f04f 0001 	mov.w	r0, #1
 8000b26:	4770      	bx	lr

08000b28 <__aeabi_d2iz>:
 8000b28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b30:	d215      	bcs.n	8000b5e <__aeabi_d2iz+0x36>
 8000b32:	d511      	bpl.n	8000b58 <__aeabi_d2iz+0x30>
 8000b34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b3c:	d912      	bls.n	8000b64 <__aeabi_d2iz+0x3c>
 8000b3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b52:	bf18      	it	ne
 8000b54:	4240      	negne	r0, r0
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b62:	d105      	bne.n	8000b70 <__aeabi_d2iz+0x48>
 8000b64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b68:	bf08      	it	eq
 8000b6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <__aeabi_d2f>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b80:	bf24      	itt	cs
 8000b82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b8a:	d90d      	bls.n	8000ba8 <__aeabi_d2f+0x30>
 8000b8c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b98:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba0:	bf08      	it	eq
 8000ba2:	f020 0001 	biceq.w	r0, r0, #1
 8000ba6:	4770      	bx	lr
 8000ba8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bac:	d121      	bne.n	8000bf2 <__aeabi_d2f+0x7a>
 8000bae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bb2:	bfbc      	itt	lt
 8000bb4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	4770      	bxlt	lr
 8000bba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bbe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bc2:	f1c2 0218 	rsb	r2, r2, #24
 8000bc6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bca:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bce:	fa20 f002 	lsr.w	r0, r0, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	f040 0001 	orrne.w	r0, r0, #1
 8000bd8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bdc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000be4:	ea40 000c 	orr.w	r0, r0, ip
 8000be8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf0:	e7cc      	b.n	8000b8c <__aeabi_d2f+0x14>
 8000bf2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bf6:	d107      	bne.n	8000c08 <__aeabi_d2f+0x90>
 8000bf8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bfc:	bf1e      	ittt	ne
 8000bfe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c02:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c06:	4770      	bxne	lr
 8000c08:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_uldivmod>:
 8000c18:	b953      	cbnz	r3, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1a:	b94a      	cbnz	r2, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	bf08      	it	eq
 8000c20:	2800      	cmpeq	r0, #0
 8000c22:	bf1c      	itt	ne
 8000c24:	f04f 31ff 	movne.w	r1, #4294967295
 8000c28:	f04f 30ff 	movne.w	r0, #4294967295
 8000c2c:	f000 b970 	b.w	8000f10 <__aeabi_idiv0>
 8000c30:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c38:	f000 f806 	bl	8000c48 <__udivmoddi4>
 8000c3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c44:	b004      	add	sp, #16
 8000c46:	4770      	bx	lr

08000c48 <__udivmoddi4>:
 8000c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c4c:	9e08      	ldr	r6, [sp, #32]
 8000c4e:	460d      	mov	r5, r1
 8000c50:	4604      	mov	r4, r0
 8000c52:	460f      	mov	r7, r1
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d14a      	bne.n	8000cee <__udivmoddi4+0xa6>
 8000c58:	428a      	cmp	r2, r1
 8000c5a:	4694      	mov	ip, r2
 8000c5c:	d965      	bls.n	8000d2a <__udivmoddi4+0xe2>
 8000c5e:	fab2 f382 	clz	r3, r2
 8000c62:	b143      	cbz	r3, 8000c76 <__udivmoddi4+0x2e>
 8000c64:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c68:	f1c3 0220 	rsb	r2, r3, #32
 8000c6c:	409f      	lsls	r7, r3
 8000c6e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c72:	4317      	orrs	r7, r2
 8000c74:	409c      	lsls	r4, r3
 8000c76:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c7a:	fa1f f58c 	uxth.w	r5, ip
 8000c7e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c82:	0c22      	lsrs	r2, r4, #16
 8000c84:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c88:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c8c:	fb01 f005 	mul.w	r0, r1, r5
 8000c90:	4290      	cmp	r0, r2
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x62>
 8000c94:	eb1c 0202 	adds.w	r2, ip, r2
 8000c98:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c9c:	f080 811c 	bcs.w	8000ed8 <__udivmoddi4+0x290>
 8000ca0:	4290      	cmp	r0, r2
 8000ca2:	f240 8119 	bls.w	8000ed8 <__udivmoddi4+0x290>
 8000ca6:	3902      	subs	r1, #2
 8000ca8:	4462      	add	r2, ip
 8000caa:	1a12      	subs	r2, r2, r0
 8000cac:	b2a4      	uxth	r4, r4
 8000cae:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cb2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cb6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cba:	fb00 f505 	mul.w	r5, r0, r5
 8000cbe:	42a5      	cmp	r5, r4
 8000cc0:	d90a      	bls.n	8000cd8 <__udivmoddi4+0x90>
 8000cc2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cca:	f080 8107 	bcs.w	8000edc <__udivmoddi4+0x294>
 8000cce:	42a5      	cmp	r5, r4
 8000cd0:	f240 8104 	bls.w	8000edc <__udivmoddi4+0x294>
 8000cd4:	4464      	add	r4, ip
 8000cd6:	3802      	subs	r0, #2
 8000cd8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cdc:	1b64      	subs	r4, r4, r5
 8000cde:	2100      	movs	r1, #0
 8000ce0:	b11e      	cbz	r6, 8000cea <__udivmoddi4+0xa2>
 8000ce2:	40dc      	lsrs	r4, r3
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0xbc>
 8000cf2:	2e00      	cmp	r6, #0
 8000cf4:	f000 80ed 	beq.w	8000ed2 <__udivmoddi4+0x28a>
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	e9c6 0500 	strd	r0, r5, [r6]
 8000cfe:	4608      	mov	r0, r1
 8000d00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d04:	fab3 f183 	clz	r1, r3
 8000d08:	2900      	cmp	r1, #0
 8000d0a:	d149      	bne.n	8000da0 <__udivmoddi4+0x158>
 8000d0c:	42ab      	cmp	r3, r5
 8000d0e:	d302      	bcc.n	8000d16 <__udivmoddi4+0xce>
 8000d10:	4282      	cmp	r2, r0
 8000d12:	f200 80f8 	bhi.w	8000f06 <__udivmoddi4+0x2be>
 8000d16:	1a84      	subs	r4, r0, r2
 8000d18:	eb65 0203 	sbc.w	r2, r5, r3
 8000d1c:	2001      	movs	r0, #1
 8000d1e:	4617      	mov	r7, r2
 8000d20:	2e00      	cmp	r6, #0
 8000d22:	d0e2      	beq.n	8000cea <__udivmoddi4+0xa2>
 8000d24:	e9c6 4700 	strd	r4, r7, [r6]
 8000d28:	e7df      	b.n	8000cea <__udivmoddi4+0xa2>
 8000d2a:	b902      	cbnz	r2, 8000d2e <__udivmoddi4+0xe6>
 8000d2c:	deff      	udf	#255	; 0xff
 8000d2e:	fab2 f382 	clz	r3, r2
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	f040 8090 	bne.w	8000e58 <__udivmoddi4+0x210>
 8000d38:	1a8a      	subs	r2, r1, r2
 8000d3a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d3e:	fa1f fe8c 	uxth.w	lr, ip
 8000d42:	2101      	movs	r1, #1
 8000d44:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d48:	fb07 2015 	mls	r0, r7, r5, r2
 8000d4c:	0c22      	lsrs	r2, r4, #16
 8000d4e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d52:	fb0e f005 	mul.w	r0, lr, r5
 8000d56:	4290      	cmp	r0, r2
 8000d58:	d908      	bls.n	8000d6c <__udivmoddi4+0x124>
 8000d5a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d5e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x122>
 8000d64:	4290      	cmp	r0, r2
 8000d66:	f200 80cb 	bhi.w	8000f00 <__udivmoddi4+0x2b8>
 8000d6a:	4645      	mov	r5, r8
 8000d6c:	1a12      	subs	r2, r2, r0
 8000d6e:	b2a4      	uxth	r4, r4
 8000d70:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d74:	fb07 2210 	mls	r2, r7, r0, r2
 8000d78:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d7c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d80:	45a6      	cmp	lr, r4
 8000d82:	d908      	bls.n	8000d96 <__udivmoddi4+0x14e>
 8000d84:	eb1c 0404 	adds.w	r4, ip, r4
 8000d88:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d8c:	d202      	bcs.n	8000d94 <__udivmoddi4+0x14c>
 8000d8e:	45a6      	cmp	lr, r4
 8000d90:	f200 80bb 	bhi.w	8000f0a <__udivmoddi4+0x2c2>
 8000d94:	4610      	mov	r0, r2
 8000d96:	eba4 040e 	sub.w	r4, r4, lr
 8000d9a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d9e:	e79f      	b.n	8000ce0 <__udivmoddi4+0x98>
 8000da0:	f1c1 0720 	rsb	r7, r1, #32
 8000da4:	408b      	lsls	r3, r1
 8000da6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000daa:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dae:	fa05 f401 	lsl.w	r4, r5, r1
 8000db2:	fa20 f307 	lsr.w	r3, r0, r7
 8000db6:	40fd      	lsrs	r5, r7
 8000db8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dbc:	4323      	orrs	r3, r4
 8000dbe:	fbb5 f8f9 	udiv	r8, r5, r9
 8000dc2:	fa1f fe8c 	uxth.w	lr, ip
 8000dc6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dca:	0c1c      	lsrs	r4, r3, #16
 8000dcc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000dd0:	fb08 f50e 	mul.w	r5, r8, lr
 8000dd4:	42a5      	cmp	r5, r4
 8000dd6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dda:	fa00 f001 	lsl.w	r0, r0, r1
 8000dde:	d90b      	bls.n	8000df8 <__udivmoddi4+0x1b0>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000de8:	f080 8088 	bcs.w	8000efc <__udivmoddi4+0x2b4>
 8000dec:	42a5      	cmp	r5, r4
 8000dee:	f240 8085 	bls.w	8000efc <__udivmoddi4+0x2b4>
 8000df2:	f1a8 0802 	sub.w	r8, r8, #2
 8000df6:	4464      	add	r4, ip
 8000df8:	1b64      	subs	r4, r4, r5
 8000dfa:	b29d      	uxth	r5, r3
 8000dfc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e00:	fb09 4413 	mls	r4, r9, r3, r4
 8000e04:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e08:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e0c:	45a6      	cmp	lr, r4
 8000e0e:	d908      	bls.n	8000e22 <__udivmoddi4+0x1da>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e18:	d26c      	bcs.n	8000ef4 <__udivmoddi4+0x2ac>
 8000e1a:	45a6      	cmp	lr, r4
 8000e1c:	d96a      	bls.n	8000ef4 <__udivmoddi4+0x2ac>
 8000e1e:	3b02      	subs	r3, #2
 8000e20:	4464      	add	r4, ip
 8000e22:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e26:	fba3 9502 	umull	r9, r5, r3, r2
 8000e2a:	eba4 040e 	sub.w	r4, r4, lr
 8000e2e:	42ac      	cmp	r4, r5
 8000e30:	46c8      	mov	r8, r9
 8000e32:	46ae      	mov	lr, r5
 8000e34:	d356      	bcc.n	8000ee4 <__udivmoddi4+0x29c>
 8000e36:	d053      	beq.n	8000ee0 <__udivmoddi4+0x298>
 8000e38:	b156      	cbz	r6, 8000e50 <__udivmoddi4+0x208>
 8000e3a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e3e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e42:	fa04 f707 	lsl.w	r7, r4, r7
 8000e46:	40ca      	lsrs	r2, r1
 8000e48:	40cc      	lsrs	r4, r1
 8000e4a:	4317      	orrs	r7, r2
 8000e4c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e50:	4618      	mov	r0, r3
 8000e52:	2100      	movs	r1, #0
 8000e54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e58:	f1c3 0120 	rsb	r1, r3, #32
 8000e5c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e60:	fa20 f201 	lsr.w	r2, r0, r1
 8000e64:	fa25 f101 	lsr.w	r1, r5, r1
 8000e68:	409d      	lsls	r5, r3
 8000e6a:	432a      	orrs	r2, r5
 8000e6c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e70:	fa1f fe8c 	uxth.w	lr, ip
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1510 	mls	r5, r7, r0, r1
 8000e7c:	0c11      	lsrs	r1, r2, #16
 8000e7e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e82:	fb00 f50e 	mul.w	r5, r0, lr
 8000e86:	428d      	cmp	r5, r1
 8000e88:	fa04 f403 	lsl.w	r4, r4, r3
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0x258>
 8000e8e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e92:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e96:	d22f      	bcs.n	8000ef8 <__udivmoddi4+0x2b0>
 8000e98:	428d      	cmp	r5, r1
 8000e9a:	d92d      	bls.n	8000ef8 <__udivmoddi4+0x2b0>
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	4461      	add	r1, ip
 8000ea0:	1b49      	subs	r1, r1, r5
 8000ea2:	b292      	uxth	r2, r2
 8000ea4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ea8:	fb07 1115 	mls	r1, r7, r5, r1
 8000eac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb0:	fb05 f10e 	mul.w	r1, r5, lr
 8000eb4:	4291      	cmp	r1, r2
 8000eb6:	d908      	bls.n	8000eca <__udivmoddi4+0x282>
 8000eb8:	eb1c 0202 	adds.w	r2, ip, r2
 8000ebc:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ec0:	d216      	bcs.n	8000ef0 <__udivmoddi4+0x2a8>
 8000ec2:	4291      	cmp	r1, r2
 8000ec4:	d914      	bls.n	8000ef0 <__udivmoddi4+0x2a8>
 8000ec6:	3d02      	subs	r5, #2
 8000ec8:	4462      	add	r2, ip
 8000eca:	1a52      	subs	r2, r2, r1
 8000ecc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ed0:	e738      	b.n	8000d44 <__udivmoddi4+0xfc>
 8000ed2:	4631      	mov	r1, r6
 8000ed4:	4630      	mov	r0, r6
 8000ed6:	e708      	b.n	8000cea <__udivmoddi4+0xa2>
 8000ed8:	4639      	mov	r1, r7
 8000eda:	e6e6      	b.n	8000caa <__udivmoddi4+0x62>
 8000edc:	4610      	mov	r0, r2
 8000ede:	e6fb      	b.n	8000cd8 <__udivmoddi4+0x90>
 8000ee0:	4548      	cmp	r0, r9
 8000ee2:	d2a9      	bcs.n	8000e38 <__udivmoddi4+0x1f0>
 8000ee4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ee8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000eec:	3b01      	subs	r3, #1
 8000eee:	e7a3      	b.n	8000e38 <__udivmoddi4+0x1f0>
 8000ef0:	4645      	mov	r5, r8
 8000ef2:	e7ea      	b.n	8000eca <__udivmoddi4+0x282>
 8000ef4:	462b      	mov	r3, r5
 8000ef6:	e794      	b.n	8000e22 <__udivmoddi4+0x1da>
 8000ef8:	4640      	mov	r0, r8
 8000efa:	e7d1      	b.n	8000ea0 <__udivmoddi4+0x258>
 8000efc:	46d0      	mov	r8, sl
 8000efe:	e77b      	b.n	8000df8 <__udivmoddi4+0x1b0>
 8000f00:	3d02      	subs	r5, #2
 8000f02:	4462      	add	r2, ip
 8000f04:	e732      	b.n	8000d6c <__udivmoddi4+0x124>
 8000f06:	4608      	mov	r0, r1
 8000f08:	e70a      	b.n	8000d20 <__udivmoddi4+0xd8>
 8000f0a:	4464      	add	r4, ip
 8000f0c:	3802      	subs	r0, #2
 8000f0e:	e742      	b.n	8000d96 <__udivmoddi4+0x14e>

08000f10 <__aeabi_idiv0>:
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000f1c:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <LL_EXTI_EnableIT_32_63+0x24>)
 8000f1e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000f22:	4905      	ldr	r1, [pc, #20]	; (8000f38 <LL_EXTI_EnableIT_32_63+0x24>)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000f2c:	bf00      	nop
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	58000800 	.word	0x58000800

08000f3c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b085      	sub	sp, #20
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000f44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f48:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000f54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f58:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f60:	68fb      	ldr	r3, [r7, #12]
}
 8000f62:	bf00      	nop
 8000f64:	3714      	adds	r7, #20
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr

08000f6e <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	b085      	sub	sp, #20
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 8000f76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f7a:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8000f7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8000f8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f8e:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4013      	ands	r3, r2
 8000f96:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f98:	68fb      	ldr	r3, [r7, #12]
}
 8000f9a:	bf00      	nop
 8000f9c:	3714      	adds	r7, #20
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr

08000fa6 <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8000faa:	f004 f8b3 	bl	8005114 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8000fae:	f004 f8b7 	bl	8005120 <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8000fb2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000fb6:	f7ff ffad 	bl	8000f14 <LL_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 8000fba:	f00b fe17 	bl	800cbec <DbgTraceInit>
#endif

  APPD_SetCPU2GpioConfig( );
 8000fbe:	f000 f821 	bl	8001004 <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 8000fc2:	f000 f8c1 	bl	8001148 <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 8000fc6:	bf00      	nop
}
 8000fc8:	bd80      	pop	{r7, pc}
	...

08000fcc <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 8000fcc:	b5b0      	push	{r4, r5, r7, lr}
 8000fce:	b088      	sub	sp, #32
 8000fd0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000fd2:	4b0b      	ldr	r3, [pc, #44]	; (8001000 <APPD_EnableCPU2+0x34>)
 8000fd4:	1d3c      	adds	r4, r7, #4
 8000fd6:	461d      	mov	r5, r3
 8000fd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fdc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fe0:	c403      	stmia	r4!, {r0, r1}
 8000fe2:	8022      	strh	r2, [r4, #0]
 8000fe4:	3402      	adds	r4, #2
 8000fe6:	0c13      	lsrs	r3, r2, #16
 8000fe8:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000fea:	f00b fd3b 	bl	800ca64 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000fee:	1d3b      	adds	r3, r7, #4
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f00a ffcc 	bl	800bf8e <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000ff6:	bf00      	nop
}
 8000ff8:	3720      	adds	r7, #32
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bdb0      	pop	{r4, r5, r7, pc}
 8000ffe:	bf00      	nop
 8001000:	080109b8 	.word	0x080109b8

08001004 <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b088      	sub	sp, #32
 8001008:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 800100a:	1d3b      	adds	r3, r7, #4
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;

  gpioa_pin_list = 0;
 8001018:	2300      	movs	r3, #0
 800101a:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 800101c:	2300      	movs	r3, #0
 800101e:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 8001020:	2300      	movs	r3, #0
 8001022:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8001024:	2300      	movs	r3, #0
 8001026:	77fb      	strb	r3, [r7, #31]
 8001028:	e036      	b.n	8001098 <APPD_SetCPU2GpioConfig+0x94>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 800102a:	7ffb      	ldrb	r3, [r7, #31]
 800102c:	4a43      	ldr	r2, [pc, #268]	; (800113c <APPD_SetCPU2GpioConfig+0x138>)
 800102e:	00db      	lsls	r3, r3, #3
 8001030:	4413      	add	r3, r2
 8001032:	799b      	ldrb	r3, [r3, #6]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d02c      	beq.n	8001092 <APPD_SetCPU2GpioConfig+0x8e>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 8001038:	7ffb      	ldrb	r3, [r7, #31]
 800103a:	4a40      	ldr	r2, [pc, #256]	; (800113c <APPD_SetCPU2GpioConfig+0x138>)
 800103c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001040:	4a3f      	ldr	r2, [pc, #252]	; (8001140 <APPD_SetCPU2GpioConfig+0x13c>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d01b      	beq.n	800107e <APPD_SetCPU2GpioConfig+0x7a>
 8001046:	4a3e      	ldr	r2, [pc, #248]	; (8001140 <APPD_SetCPU2GpioConfig+0x13c>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d821      	bhi.n	8001090 <APPD_SetCPU2GpioConfig+0x8c>
 800104c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001050:	d003      	beq.n	800105a <APPD_SetCPU2GpioConfig+0x56>
 8001052:	4a3c      	ldr	r2, [pc, #240]	; (8001144 <APPD_SetCPU2GpioConfig+0x140>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d009      	beq.n	800106c <APPD_SetCPU2GpioConfig+0x68>
        case (uint32_t)GPIOC:
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;

        default:
          break;
 8001058:	e01a      	b.n	8001090 <APPD_SetCPU2GpioConfig+0x8c>
            gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 800105a:	7ffb      	ldrb	r3, [r7, #31]
 800105c:	4a37      	ldr	r2, [pc, #220]	; (800113c <APPD_SetCPU2GpioConfig+0x138>)
 800105e:	00db      	lsls	r3, r3, #3
 8001060:	4413      	add	r3, r2
 8001062:	889a      	ldrh	r2, [r3, #4]
 8001064:	8bbb      	ldrh	r3, [r7, #28]
 8001066:	4313      	orrs	r3, r2
 8001068:	83bb      	strh	r3, [r7, #28]
          break;
 800106a:	e012      	b.n	8001092 <APPD_SetCPU2GpioConfig+0x8e>
            gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 800106c:	7ffb      	ldrb	r3, [r7, #31]
 800106e:	4a33      	ldr	r2, [pc, #204]	; (800113c <APPD_SetCPU2GpioConfig+0x138>)
 8001070:	00db      	lsls	r3, r3, #3
 8001072:	4413      	add	r3, r2
 8001074:	889a      	ldrh	r2, [r3, #4]
 8001076:	8b7b      	ldrh	r3, [r7, #26]
 8001078:	4313      	orrs	r3, r2
 800107a:	837b      	strh	r3, [r7, #26]
          break;
 800107c:	e009      	b.n	8001092 <APPD_SetCPU2GpioConfig+0x8e>
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 800107e:	7ffb      	ldrb	r3, [r7, #31]
 8001080:	4a2e      	ldr	r2, [pc, #184]	; (800113c <APPD_SetCPU2GpioConfig+0x138>)
 8001082:	00db      	lsls	r3, r3, #3
 8001084:	4413      	add	r3, r2
 8001086:	889a      	ldrh	r2, [r3, #4]
 8001088:	8b3b      	ldrh	r3, [r7, #24]
 800108a:	4313      	orrs	r3, r2
 800108c:	833b      	strh	r3, [r7, #24]
          break;
 800108e:	e000      	b.n	8001092 <APPD_SetCPU2GpioConfig+0x8e>
          break;
 8001090:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8001092:	7ffb      	ldrb	r3, [r7, #31]
 8001094:	3301      	adds	r3, #1
 8001096:	77fb      	strb	r3, [r7, #31]
 8001098:	7ffb      	ldrb	r3, [r7, #31]
 800109a:	2b25      	cmp	r3, #37	; 0x25
 800109c:	d9c5      	bls.n	800102a <APPD_SetCPU2GpioConfig+0x26>
      }
    }
  }

  gpio_config.Pull = GPIO_NOPULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 80010a2:	2301      	movs	r3, #1
 80010a4:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a6:	2303      	movs	r3, #3
 80010a8:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 80010aa:	8bbb      	ldrh	r3, [r7, #28]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d014      	beq.n	80010da <APPD_SetCPU2GpioConfig+0xd6>
  {
    gpio_config.Pin = gpioa_pin_list;
 80010b0:	8bbb      	ldrh	r3, [r7, #28]
 80010b2:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b4:	2001      	movs	r0, #1
 80010b6:	f7ff ff41 	bl	8000f3c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 80010ba:	2001      	movs	r0, #1
 80010bc:	f7ff ff57 	bl	8000f6e <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 80010c0:	1d3b      	adds	r3, r7, #4
 80010c2:	4619      	mov	r1, r3
 80010c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010c8:	f004 fd5e 	bl	8005b88 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 80010cc:	8bbb      	ldrh	r3, [r7, #28]
 80010ce:	2200      	movs	r2, #0
 80010d0:	4619      	mov	r1, r3
 80010d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010d6:	f004 fec7 	bl	8005e68 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 80010da:	8b7b      	ldrh	r3, [r7, #26]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d012      	beq.n	8001106 <APPD_SetCPU2GpioConfig+0x102>
  {
    gpio_config.Pin = gpiob_pin_list;
 80010e0:	8b7b      	ldrh	r3, [r7, #26]
 80010e2:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e4:	2002      	movs	r0, #2
 80010e6:	f7ff ff29 	bl	8000f3c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 80010ea:	2002      	movs	r0, #2
 80010ec:	f7ff ff3f 	bl	8000f6e <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 80010f0:	1d3b      	adds	r3, r7, #4
 80010f2:	4619      	mov	r1, r3
 80010f4:	4813      	ldr	r0, [pc, #76]	; (8001144 <APPD_SetCPU2GpioConfig+0x140>)
 80010f6:	f004 fd47 	bl	8005b88 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 80010fa:	8b7b      	ldrh	r3, [r7, #26]
 80010fc:	2200      	movs	r2, #0
 80010fe:	4619      	mov	r1, r3
 8001100:	4810      	ldr	r0, [pc, #64]	; (8001144 <APPD_SetCPU2GpioConfig+0x140>)
 8001102:	f004 feb1 	bl	8005e68 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 8001106:	8b3b      	ldrh	r3, [r7, #24]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d013      	beq.n	8001134 <APPD_SetCPU2GpioConfig+0x130>
  {
    gpio_config.Pin = gpioc_pin_list;
 800110c:	8b3b      	ldrh	r3, [r7, #24]
 800110e:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001110:	2004      	movs	r0, #4
 8001112:	f7ff ff13 	bl	8000f3c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 8001116:	2004      	movs	r0, #4
 8001118:	f7ff ff29 	bl	8000f6e <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 800111c:	1d3b      	adds	r3, r7, #4
 800111e:	4619      	mov	r1, r3
 8001120:	4807      	ldr	r0, [pc, #28]	; (8001140 <APPD_SetCPU2GpioConfig+0x13c>)
 8001122:	f004 fd31 	bl	8005b88 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 8001126:	8b3b      	ldrh	r3, [r7, #24]
 8001128:	2200      	movs	r2, #0
 800112a:	4619      	mov	r1, r3
 800112c:	4804      	ldr	r0, [pc, #16]	; (8001140 <APPD_SetCPU2GpioConfig+0x13c>)
 800112e:	f004 fe9b 	bl	8005e68 <HAL_GPIO_WritePin>
  }
  
/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 8001132:	bf00      	nop
 8001134:	bf00      	nop
}
 8001136:	3720      	adds	r7, #32
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	08011ed0 	.word	0x08011ed0
 8001140:	48000800 	.word	0x48000800
 8001144:	48000400 	.word	0x48000400

08001148 <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 800114c:	bf00      	nop
}
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr

08001156 <DbgOutputInit>:
 * WRAP FUNCTIONS
 *
*************************************************************/
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 8001156:	b580      	push	{r7, lr}
 8001158:	af00      	add	r7, sp, #0
/* USER CODE BEGIN DbgOutputInit */
	HW_UART_Init(CFG_DEBUG_TRACE_UART);
 800115a:	2002      	movs	r0, #2
 800115c:	f001 fb53 	bl	8002806 <HW_UART_Init>
/* USER CODE END DbgOutputInit */
  return;
 8001160:	bf00      	nop
}
 8001162:	bd80      	pop	{r7, pc}

08001164 <DbgOutputTraces>:

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	460b      	mov	r3, r1
 800116e:	607a      	str	r2, [r7, #4]
 8001170:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8001172:	897a      	ldrh	r2, [r7, #10]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	68f9      	ldr	r1, [r7, #12]
 8001178:	2002      	movs	r0, #2
 800117a:	f001 fbe7 	bl	800294c <HW_UART_Transmit_DMA>
/* USER CODE END DbgOutputTraces */
  return;
 800117e:	bf00      	nop
}
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
	...

08001188 <LL_EXTI_EnableIT_32_63>:
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001190:	4b06      	ldr	r3, [pc, #24]	; (80011ac <LL_EXTI_EnableIT_32_63+0x24>)
 8001192:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001196:	4905      	ldr	r1, [pc, #20]	; (80011ac <LL_EXTI_EnableIT_32_63+0x24>)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	4313      	orrs	r3, r2
 800119c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	58000800 	.word	0x58000800

080011b0 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80011b8:	4b07      	ldr	r3, [pc, #28]	; (80011d8 <LL_C2_PWR_SetPowerMode+0x28>)
 80011ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80011be:	f023 0207 	bic.w	r2, r3, #7
 80011c2:	4905      	ldr	r1, [pc, #20]	; (80011d8 <LL_C2_PWR_SetPowerMode+0x28>)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80011cc:	bf00      	nop
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	58000400 	.word	0x58000400

080011dc <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80011e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011e8:	4a0a      	ldr	r2, [pc, #40]	; (8001214 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 80011ea:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 80011ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80011f6:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	021b      	lsls	r3, r3, #8
 80011fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001202:	4313      	orrs	r3, r2
 8001204:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8001208:	bf00      	nop
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	cafecafe 	.word	0xcafecafe

08001218 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001220:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800122a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4313      	orrs	r3, r2
 8001232:	608b      	str	r3, [r1, #8]
}
 8001234:	bf00      	nop
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001244:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001248:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800124c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001250:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001254:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr

08001262 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8001262:	b480      	push	{r7}
 8001264:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001266:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800126a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800126e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001272:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001276:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800127a:	bf00      	nop
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8001288:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800128c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001290:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001294:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001298:	d101      	bne.n	800129e <LL_RCC_IsActiveFlag_PINRST+0x1a>
 800129a:	2301      	movs	r3, #1
 800129c:	e000      	b.n	80012a0 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 800129e:	2300      	movs	r3, #0
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr

080012aa <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 80012aa:	b480      	push	{r7}
 80012ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 80012ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80012be:	d101      	bne.n	80012c4 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 80012c0:	2301      	movs	r3, #1
 80012c2:	e000      	b.n	80012c6 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 80012c4:	2300      	movs	r3, #0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr

080012d0 <LL_AHB3_GRP1_EnableClock>:
{
 80012d0:	b480      	push	{r7}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80012d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80012e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4013      	ands	r3, r2
 80012f2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012f4:	68fb      	ldr	r3, [r7, #12]
}
 80012f6:	bf00      	nop
 80012f8:	3714      	adds	r7, #20
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
	...

08001304 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8001308:	4b04      	ldr	r3, [pc, #16]	; (800131c <LL_DBGMCU_GetDeviceID+0x18>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8001310:	4618      	mov	r0, r3
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	e0042000 	.word	0xe0042000

08001320 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8001324:	4b04      	ldr	r3, [pc, #16]	; (8001338 <LL_DBGMCU_GetRevisionID+0x18>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	0c1b      	lsrs	r3, r3, #16
 800132a:	b29b      	uxth	r3, r3
}
 800132c:	4618      	mov	r0, r3
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	e0042000 	.word	0xe0042000

0800133c <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	685a      	ldr	r2, [r3, #4]
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	041b      	lsls	r3, r3, #16
 800134e:	431a      	orrs	r2, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	605a      	str	r2, [r3, #4]
}
 8001354:	bf00      	nop
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr

08001360 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685a      	ldr	r2, [r3, #4]
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	431a      	orrs	r2, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	605a      	str	r2, [r3, #4]
}
 8001376:	bf00      	nop
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr

08001382 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001382:	b480      	push	{r7}
 8001384:	b083      	sub	sp, #12
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
 800138a:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	695a      	ldr	r2, [r3, #20]
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	041b      	lsls	r3, r3, #16
 8001394:	431a      	orrs	r2, r3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	615a      	str	r2, [r3, #20]
}
 800139a:	bf00      	nop
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr

080013a6 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80013a6:	b480      	push	{r7}
 80013a8:	b083      	sub	sp, #12
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
 80013ae:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	695a      	ldr	r2, [r3, #20]
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	431a      	orrs	r2, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	615a      	str	r2, [r3, #20]
}
 80013bc:	bf00      	nop
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	683a      	ldr	r2, [r7, #0]
 80013d6:	609a      	str	r2, [r3, #8]
}
 80013d8:	bf00      	nop
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr

080013e4 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	683a      	ldr	r2, [r7, #0]
 80013f2:	619a      	str	r2, [r3, #24]
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001404:	4b05      	ldr	r3, [pc, #20]	; (800141c <LL_LPM_EnableSleep+0x1c>)
 8001406:	691b      	ldr	r3, [r3, #16]
 8001408:	4a04      	ldr	r2, [pc, #16]	; (800141c <LL_LPM_EnableSleep+0x1c>)
 800140a:	f023 0304 	bic.w	r3, r3, #4
 800140e:	6113      	str	r3, [r2, #16]
}
 8001410:	bf00      	nop
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	e000ed00 	.word	0xe000ed00

08001420 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	22ff      	movs	r2, #255	; 0xff
 800142c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800142e:	bf00      	nop
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr

0800143a <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 800143a:	b480      	push	{r7}
 800143c:	b083      	sub	sp, #12
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	22ca      	movs	r2, #202	; 0xca
 8001446:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2253      	movs	r2, #83	; 0x53
 800144c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800144e:	bf00      	nop
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr

0800145a <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 800145a:	b480      	push	{r7}
 800145c:	b083      	sub	sp, #12
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
 8001462:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	f023 0207 	bic.w	r2, r3, #7
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	431a      	orrs	r2, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	609a      	str	r2, [r3, #8]
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001484:	4b04      	ldr	r3, [pc, #16]	; (8001498 <MX_APPE_Config+0x18>)
 8001486:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800148a:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 800148c:	f000 f830 	bl	80014f0 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8001490:	f000 f870 	bl	8001574 <Config_HSE>

  return;
 8001494:	bf00      	nop
}
 8001496:	bd80      	pop	{r7, pc}
 8001498:	58004000 	.word	0x58004000

0800149c <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 80014a0:	f000 f87c 	bl	800159c <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 80014a4:	f000 f894 	bl	80015d0 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80014a8:	4909      	ldr	r1, [pc, #36]	; (80014d0 <MX_APPE_Init+0x34>)
 80014aa:	2000      	movs	r0, #0
 80014ac:	f000 ff40 	bl	8002330 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 80014b0:	f7ff fd79 	bl	8000fa6 <APPD_Init>

  /**
   * The Standby mode should not be entered before the initialization is over
   * The default state of the Low Power Manager is to allow the Standby Mode so an request is needed here
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 80014b4:	2101      	movs	r1, #1
 80014b6:	2001      	movs	r0, #1
 80014b8:	f00c f910 	bl	800d6dc <UTIL_LPM_SetOffMode>

  Led_Init();
 80014bc:	f000 f9ea 	bl	8001894 <Led_Init>

  Button_Init();
 80014c0:	f000 f9f8 	bl	80018b4 <Button_Init>
  
  RxUART_Init();
 80014c4:	f000 fa88 	bl	80019d8 <RxUART_Init>

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80014c8:	f000 f890 	bl	80015ec <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 80014cc:	bf00      	nop
}
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	2000067c 	.word	0x2000067c

080014d4 <Init_Smps>:

void Init_Smps(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 80014d8:	bf00      	nop
}
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr

080014e2 <Init_Exti>:

void Init_Exti(void)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 80014e6:	2050      	movs	r0, #80	; 0x50
 80014e8:	f7ff fe4e 	bl	8001188 <LL_EXTI_EnableIT_32_63>


  return;
 80014ec:	bf00      	nop
}
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 80014f4:	f000 f804 	bl	8001500 <Reset_BackupDomain>

  Reset_IPCC();
 80014f8:	f000 f81a 	bl	8001530 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 80014fc:	bf00      	nop
}
 80014fe:	bd80      	pop	{r7, pc}

08001500 <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8001504:	f7ff febe 	bl	8001284 <LL_RCC_IsActiveFlag_PINRST>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d00d      	beq.n	800152a <Reset_BackupDomain+0x2a>
 800150e:	f7ff fecc 	bl	80012aa <LL_RCC_IsActiveFlag_SFTRST>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d108      	bne.n	800152a <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8001518:	f004 fd80 	bl	800601c <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 800151c:	f004 fd7e 	bl	800601c <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 8001520:	f7ff fe8e 	bl	8001240 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8001524:	f7ff fe9d 	bl	8001262 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8001528:	bf00      	nop
 800152a:	bf00      	nop
}
 800152c:	bd80      	pop	{r7, pc}
	...

08001530 <Reset_IPCC>:

static void Reset_IPCC(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8001534:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001538:	f7ff feca 	bl	80012d0 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 800153c:	213f      	movs	r1, #63	; 0x3f
 800153e:	480c      	ldr	r0, [pc, #48]	; (8001570 <Reset_IPCC+0x40>)
 8001540:	f7ff ff42 	bl	80013c8 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8001544:	213f      	movs	r1, #63	; 0x3f
 8001546:	480a      	ldr	r0, [pc, #40]	; (8001570 <Reset_IPCC+0x40>)
 8001548:	f7ff ff4c 	bl	80013e4 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 800154c:	213f      	movs	r1, #63	; 0x3f
 800154e:	4808      	ldr	r0, [pc, #32]	; (8001570 <Reset_IPCC+0x40>)
 8001550:	f7ff fef4 	bl	800133c <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8001554:	213f      	movs	r1, #63	; 0x3f
 8001556:	4806      	ldr	r0, [pc, #24]	; (8001570 <Reset_IPCC+0x40>)
 8001558:	f7ff ff13 	bl	8001382 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 800155c:	213f      	movs	r1, #63	; 0x3f
 800155e:	4804      	ldr	r0, [pc, #16]	; (8001570 <Reset_IPCC+0x40>)
 8001560:	f7ff fefe 	bl	8001360 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8001564:	213f      	movs	r1, #63	; 0x3f
 8001566:	4802      	ldr	r0, [pc, #8]	; (8001570 <Reset_IPCC+0x40>)
 8001568:	f7ff ff1d 	bl	80013a6 <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 800156c:	bf00      	nop
}
 800156e:	bd80      	pop	{r7, pc}
 8001570:	58000c00 	.word	0x58000c00

08001574 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 800157a:	2000      	movs	r0, #0
 800157c:	f00b fbb4 	bl	800cce8 <OTP_Read>
 8001580:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d005      	beq.n	8001594 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	799b      	ldrb	r3, [r3, #6]
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff fe25 	bl	80011dc <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8001592:	bf00      	nop
 8001594:	bf00      	nop
}
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}

0800159c <System_Init>:

static void System_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  Init_Smps();
 80015a0:	f7ff ff98 	bl	80014d4 <Init_Smps>

  Init_Exti();
 80015a4:	f7ff ff9d 	bl	80014e2 <Init_Exti>

  Init_Rtc();
 80015a8:	f000 f802 	bl	80015b0 <Init_Rtc>

  return;
 80015ac:	bf00      	nop
}
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <Init_Rtc>:

static void Init_Rtc(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 80015b4:	4805      	ldr	r0, [pc, #20]	; (80015cc <Init_Rtc+0x1c>)
 80015b6:	f7ff ff40 	bl	800143a <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 80015ba:	2100      	movs	r1, #0
 80015bc:	4803      	ldr	r0, [pc, #12]	; (80015cc <Init_Rtc+0x1c>)
 80015be:	f7ff ff4c 	bl	800145a <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 80015c2:	4802      	ldr	r0, [pc, #8]	; (80015cc <Init_Rtc+0x1c>)
 80015c4:	f7ff ff2c 	bl	8001420 <LL_RTC_EnableWriteProtection>

  return;
 80015c8:	bf00      	nop
}
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40002800 	.word	0x40002800

080015d0 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80015d4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80015d8:	f7ff fe1e 	bl	8001218 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 80015dc:	f00c f86c 	bl	800d6b8 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80015e0:	2004      	movs	r0, #4
 80015e2:	f7ff fde5 	bl	80011b0 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 80015e6:	bf00      	nop
}
 80015e8:	bd80      	pop	{r7, pc}
	...

080015ec <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b088      	sub	sp, #32
 80015f0:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 80015f2:	f00b f881 	bl	800c6f8 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 80015f6:	4a11      	ldr	r2, [pc, #68]	; (800163c <appe_Tl_Init+0x50>)
 80015f8:	2100      	movs	r1, #0
 80015fa:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80015fe:	f00c f999 	bl	800d934 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8001602:	4b0f      	ldr	r3, [pc, #60]	; (8001640 <appe_Tl_Init+0x54>)
 8001604:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8001606:	4b0f      	ldr	r3, [pc, #60]	; (8001644 <appe_Tl_Init+0x58>)
 8001608:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 800160a:	463b      	mov	r3, r7
 800160c:	4619      	mov	r1, r3
 800160e:	480e      	ldr	r0, [pc, #56]	; (8001648 <appe_Tl_Init+0x5c>)
 8001610:	f00a ff34 	bl	800c47c <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8001614:	4b0d      	ldr	r3, [pc, #52]	; (800164c <appe_Tl_Init+0x60>)
 8001616:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8001618:	4b0d      	ldr	r3, [pc, #52]	; (8001650 <appe_Tl_Init+0x64>)
 800161a:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 800161c:	4b0d      	ldr	r3, [pc, #52]	; (8001654 <appe_Tl_Init+0x68>)
 800161e:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8001620:	f240 533c 	movw	r3, #1340	; 0x53c
 8001624:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8001626:	f107 0308 	add.w	r3, r7, #8
 800162a:	4618      	mov	r0, r3
 800162c:	f00b f9a6 	bl	800c97c <TL_MM_Init>

  TL_Enable();
 8001630:	f00b f85c 	bl	800c6ec <TL_Enable>

  return;
 8001634:	bf00      	nop
}
 8001636:	3720      	adds	r7, #32
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	0800c4b5 	.word	0x0800c4b5
 8001640:	20030734 	.word	0x20030734
 8001644:	08001659 	.word	0x08001659
 8001648:	08001671 	.word	0x08001671
 800164c:	2003094c 	.word	0x2003094c
 8001650:	20030840 	.word	0x20030840
 8001654:	200301f8 	.word	0x200301f8

08001658 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8001662:	bf00      	nop
}
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
	...

08001670 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b088      	sub	sp, #32
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	330b      	adds	r3, #11
 800167e:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	881b      	ldrh	r3, [r3, #0]
 8001684:	b29b      	uxth	r3, r3
 8001686:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 800168a:	2b07      	cmp	r3, #7
 800168c:	d860      	bhi.n	8001750 <APPE_SysUserEvtRx+0xe0>
 800168e:	a201      	add	r2, pc, #4	; (adr r2, 8001694 <APPE_SysUserEvtRx+0x24>)
 8001690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001694:	080016b5 	.word	0x080016b5
 8001698:	080016f7 	.word	0x080016f7
 800169c:	08001705 	.word	0x08001705
 80016a0:	08001751 	.word	0x08001751
 80016a4:	08001721 	.word	0x08001721
 80016a8:	08001731 	.word	0x08001731
 80016ac:	08001739 	.word	0x08001739
 80016b0:	08001749 	.word	0x08001749
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 80016b4:	f107 030c 	add.w	r3, r7, #12
 80016b8:	4618      	mov	r0, r3
 80016ba:	f00a fc95 	bl	800bfe8 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 80016be:	7b3b      	ldrb	r3, [r7, #12]
 80016c0:	4619      	mov	r1, r3
 80016c2:	7b7b      	ldrb	r3, [r7, #13]
 80016c4:	461a      	mov	r2, r3
 80016c6:	7bbb      	ldrb	r3, [r7, #14]
 80016c8:	4824      	ldr	r0, [pc, #144]	; (800175c <APPE_SysUserEvtRx+0xec>)
 80016ca:	f00c ff9d 	bl	800e608 <iprintf>
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 80016ce:	7c3b      	ldrb	r3, [r7, #16]
 80016d0:	4619      	mov	r1, r3
 80016d2:	4823      	ldr	r0, [pc, #140]	; (8001760 <APPE_SysUserEvtRx+0xf0>)
 80016d4:	f00c ff98 	bl	800e608 <iprintf>
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 80016d8:	7dbb      	ldrb	r3, [r7, #22]
 80016da:	4619      	mov	r1, r3
 80016dc:	7dfb      	ldrb	r3, [r7, #23]
 80016de:	461a      	mov	r2, r3
 80016e0:	7e3b      	ldrb	r3, [r7, #24]
 80016e2:	4820      	ldr	r0, [pc, #128]	; (8001764 <APPE_SysUserEvtRx+0xf4>)
 80016e4:	f00c ff90 	bl	800e608 <iprintf>

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
 80016e8:	481f      	ldr	r0, [pc, #124]	; (8001768 <APPE_SysUserEvtRx+0xf8>)
 80016ea:	f00c ff8d 	bl	800e608 <iprintf>
    APPE_SysEvtReadyProcessing(pPayload);
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f000 f870 	bl	80017d4 <APPE_SysEvtReadyProcessing>
    break;
 80016f4:	e02d      	b.n	8001752 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 80016f6:	481d      	ldr	r0, [pc, #116]	; (800176c <APPE_SysUserEvtRx+0xfc>)
 80016f8:	f00c ff86 	bl	800e608 <iprintf>
    APPE_SysEvtError(pPayload);
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f000 f843 	bl	8001788 <APPE_SysEvtError>
    break;
 8001702:	e026      	b.n	8001752 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CMO+ \n");
 8001704:	481a      	ldr	r0, [pc, #104]	; (8001770 <APPE_SysUserEvtRx+0x100>)
 8001706:	f00c ffe5 	bl	800e6d4 <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 800170e:	6819      	ldr	r1, [r3, #0]
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	461a      	mov	r2, r3
 8001718:	4816      	ldr	r0, [pc, #88]	; (8001774 <APPE_SysUserEvtRx+0x104>)
 800171a:	f00c ff75 	bl	800e608 <iprintf>
    break;
 800171e:	e018      	b.n	8001752 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	3302      	adds	r3, #2
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4619      	mov	r1, r3
 8001728:	4813      	ldr	r0, [pc, #76]	; (8001778 <APPE_SysUserEvtRx+0x108>)
 800172a:	f00c ff6d 	bl	800e608 <iprintf>
    break;
 800172e:	e010      	b.n	8001752 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 8001730:	4812      	ldr	r0, [pc, #72]	; (800177c <APPE_SysUserEvtRx+0x10c>)
 8001732:	f00c ff69 	bl	800e608 <iprintf>
    break;
 8001736:	e00c      	b.n	8001752 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	3302      	adds	r3, #2
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4619      	mov	r1, r3
 8001740:	480f      	ldr	r0, [pc, #60]	; (8001780 <APPE_SysUserEvtRx+0x110>)
 8001742:	f00c ff61 	bl	800e608 <iprintf>
    break;
 8001746:	e004      	b.n	8001752 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 8001748:	480e      	ldr	r0, [pc, #56]	; (8001784 <APPE_SysUserEvtRx+0x114>)
 800174a:	f00c ff5d 	bl	800e608 <iprintf>
    break;
 800174e:	e000      	b.n	8001752 <APPE_SysUserEvtRx+0xe2>

  default:
    break;
 8001750:	bf00      	nop
  }

  return;
 8001752:	bf00      	nop
}
 8001754:	3720      	adds	r7, #32
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	080109d4 	.word	0x080109d4
 8001760:	080109f8 	.word	0x080109f8
 8001764:	08010a14 	.word	0x08010a14
 8001768:	08010a2c 	.word	0x08010a2c
 800176c:	08010a4c 	.word	0x08010a4c
 8001770:	08010a70 	.word	0x08010a70
 8001774:	08010ac0 	.word	0x08010ac0
 8001778:	08010ae8 	.word	0x08010ae8
 800177c:	08010b24 	.word	0x08010b24
 8001780:	08010b48 	.word	0x08010b48
 8001784:	08010b84 	.word	0x08010b84

08001788 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	330b      	adds	r3, #11
 8001796:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	3302      	adds	r3, #2
 800179c:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	4619      	mov	r1, r3
 80017a4:	4808      	ldr	r0, [pc, #32]	; (80017c8 <APPE_SysEvtError+0x40>)
 80017a6:	f00c ff2f 	bl	800e608 <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d103      	bne.n	80017ba <APPE_SysEvtError+0x32>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 80017b2:	4806      	ldr	r0, [pc, #24]	; (80017cc <APPE_SysEvtError+0x44>)
 80017b4:	f00c ff8e 	bl	800e6d4 <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 80017b8:	e003      	b.n	80017c2 <APPE_SysEvtError+0x3a>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 80017ba:	4805      	ldr	r0, [pc, #20]	; (80017d0 <APPE_SysEvtError+0x48>)
 80017bc:	f00c ff8a 	bl	800e6d4 <puts>
  return;
 80017c0:	bf00      	nop
}
 80017c2:	3710      	adds	r7, #16
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	08010ba8 	.word	0x08010ba8
 80017cc:	08010bd8 	.word	0x08010bd8
 80017d0:	08010c14 	.word	0x08010c14

080017d4 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b08a      	sub	sp, #40	; 0x28
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 80017dc:	f107 0308 	add.w	r3, r7, #8
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	605a      	str	r2, [r3, #4]
 80017e6:	609a      	str	r2, [r3, #8]
 80017e8:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 80017ea:	2300      	movs	r3, #0
 80017ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t DeviceID=0;
 80017ee:	2300      	movs	r3, #0
 80017f0:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	330b      	adds	r3, #11
 80017f8:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	3302      	adds	r3, #2
 80017fe:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d128      	bne.n	800185a <APPE_SysEvtReadyProcessing+0x86>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");
 8001808:	481d      	ldr	r0, [pc, #116]	; (8001880 <APPE_SysEvtReadyProcessing+0xac>)
 800180a:	f00c ff63 	bl	800e6d4 <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2();
 800180e:	f7ff fbdd 	bl	8000fcc <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8001812:	230f      	movs	r3, #15
 8001814:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8001816:	237f      	movs	r3, #127	; 0x7f
 8001818:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 800181a:	f7ff fd81 	bl	8001320 <LL_DBGMCU_GetRevisionID>
 800181e:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);
 8001820:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001822:	4818      	ldr	r0, [pc, #96]	; (8001884 <APPE_SysEvtReadyProcessing+0xb0>)
 8001824:	f00c fef0 	bl	800e608 <iprintf>

    config_param.RevisionID = (uint16_t)RevisionID;
 8001828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182a:	b29b      	uxth	r3, r3
 800182c:	82bb      	strh	r3, [r7, #20]
    
    DeviceID = LL_DBGMCU_GetDeviceID();
 800182e:	f7ff fd69 	bl	8001304 <LL_DBGMCU_GetDeviceID>
 8001832:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
 8001834:	6a39      	ldr	r1, [r7, #32]
 8001836:	4814      	ldr	r0, [pc, #80]	; (8001888 <APPE_SysEvtReadyProcessing+0xb4>)
 8001838:	f00c fee6 	bl	800e608 <iprintf>
    config_param.DeviceID = (uint16_t)DeviceID;
 800183c:	6a3b      	ldr	r3, [r7, #32]
 800183e:	b29b      	uxth	r3, r3
 8001840:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8001842:	f107 0308 	add.w	r3, r7, #8
 8001846:	4618      	mov	r0, r3
 8001848:	f00a fbb8 	bl	800bfbc <SHCI_C2_Config>

    APP_BLE_Init();
 800184c:	f001 feb0 	bl	80035b0 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8001850:	2100      	movs	r1, #0
 8001852:	2001      	movs	r0, #1
 8001854:	f00b ff42 	bl	800d6dc <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8001858:	e00e      	b.n	8001878 <APPE_SysEvtReadyProcessing+0xa4>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	2b01      	cmp	r3, #1
 8001860:	d106      	bne.n	8001870 <APPE_SysEvtReadyProcessing+0x9c>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n\r");
 8001862:	480a      	ldr	r0, [pc, #40]	; (800188c <APPE_SysEvtReadyProcessing+0xb8>)
 8001864:	f00c fed0 	bl	800e608 <iprintf>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2200      	movs	r2, #0
 800186c:	701a      	strb	r2, [r3, #0]
  return;
 800186e:	e003      	b.n	8001878 <APPE_SysEvtReadyProcessing+0xa4>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 8001870:	4807      	ldr	r0, [pc, #28]	; (8001890 <APPE_SysEvtReadyProcessing+0xbc>)
 8001872:	f00c fec9 	bl	800e608 <iprintf>
  return;
 8001876:	bf00      	nop
}
 8001878:	3728      	adds	r7, #40	; 0x28
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	08010c4c 	.word	0x08010c4c
 8001884:	08010c68 	.word	0x08010c68
 8001888:	08010c8c 	.word	0x08010c8c
 800188c:	08010cac 	.word	0x08010cac
 8001890:	08010ce0 	.word	0x08010ce0

08001894 <Led_Init>:

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS */
static void Led_Init( void )
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
#if (CFG_LED_SUPPORTED == 1)
  /**
   * Leds Initialization
   */
  BSP_LED_Init(LED_BLUE);
 8001898:	2000      	movs	r0, #0
 800189a:	f003 f9df 	bl	8004c5c <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 800189e:	2001      	movs	r0, #1
 80018a0:	f003 f9dc 	bl	8004c5c <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80018a4:	2002      	movs	r0, #2
 80018a6:	f003 f9d9 	bl	8004c5c <BSP_LED_Init>

  BSP_LED_On(LED_GREEN);
 80018aa:	2001      	movs	r0, #1
 80018ac:	f003 fa10 	bl	8004cd0 <BSP_LED_On>
#endif

  return;
 80018b0:	bf00      	nop
}
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <Button_Init>:

static void Button_Init( void )
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
#if (CFG_BUTTON_SUPPORTED == 1)
  /**
   * Button Initialization
   */
  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 80018b8:	2101      	movs	r1, #1
 80018ba:	2000      	movs	r0, #0
 80018bc:	f003 fa3c 	bl	8004d38 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 80018c0:	2101      	movs	r1, #1
 80018c2:	2001      	movs	r0, #1
 80018c4:	f003 fa38 	bl	8004d38 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW3, BUTTON_MODE_EXTI);
 80018c8:	2101      	movs	r1, #1
 80018ca:	2002      	movs	r0, #2
 80018cc:	f003 fa34 	bl	8004d38 <BSP_PB_Init>
#endif

  return;
 80018d0:	bf00      	nop
}
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018dc:	f003 fbf6 	bl	80050cc <HAL_GetTick>
 80018e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018ec:	d00a      	beq.n	8001904 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 80018ee:	f003 fc05 	bl	80050fc <HAL_GetTickFreq>
 80018f2:	4603      	mov	r3, r0
 80018f4:	461a      	mov	r2, r3
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	4413      	add	r3, r2
 80018fa:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018fc:	e002      	b.n	8001904 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 80018fe:	f7ff fd7f 	bl	8001400 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM)
    __force_stores();
  #endif /* __CC_ARM */

    __WFI();
 8001902:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8001904:	f003 fbe2 	bl	80050cc <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	68fa      	ldr	r2, [r7, #12]
 8001910:	429a      	cmp	r2, r3
 8001912:	d8f4      	bhi.n	80018fe <HAL_Delay+0x2a>
  }
}
 8001914:	bf00      	nop
 8001916:	bf00      	nop
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 800191e:	b580      	push	{r7, lr}
 8001920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001922:	f04f 30ff 	mov.w	r0, #4294967295
 8001926:	f00b ff09 	bl	800d73c <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 800192a:	bf00      	nop
 800192c:	bd80      	pop	{r7, pc}

0800192e <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 800192e:	b480      	push	{r7}
 8001930:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8001932:	bf00      	nop
}
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001946:	f04f 30ff 	mov.w	r0, #4294967295
 800194a:	f00b fef7 	bl	800d73c <UTIL_SEQ_Run>

  return;
 800194e:	bf00      	nop
}
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b082      	sub	sp, #8
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800195e:	2100      	movs	r1, #0
 8001960:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001964:	f00c f808 	bl	800d978 <UTIL_SEQ_SetTask>
  return;
 8001968:	bf00      	nop
}
 800196a:	3708      	adds	r7, #8
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}

08001970 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001978:	2002      	movs	r0, #2
 800197a:	f00c f869 	bl	800da50 <UTIL_SEQ_SetEvt>
  return;
 800197e:	bf00      	nop
}
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}

08001986 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8001986:	b580      	push	{r7, lr}
 8001988:	b082      	sub	sp, #8
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 800198e:	2002      	movs	r0, #2
 8001990:	f00c f87e 	bl	800da90 <UTIL_SEQ_WaitEvt>
  return;
 8001994:	bf00      	nop
}
 8001996:	3708      	adds	r7, #8
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin )
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 80019a6:	88fb      	ldrh	r3, [r7, #6]
 80019a8:	2b10      	cmp	r3, #16
 80019aa:	d006      	beq.n	80019ba <HAL_GPIO_EXTI_Callback+0x1e>
 80019ac:	2b10      	cmp	r3, #16
 80019ae:	dc0d      	bgt.n	80019cc <HAL_GPIO_EXTI_Callback+0x30>
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d005      	beq.n	80019c0 <HAL_GPIO_EXTI_Callback+0x24>
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d006      	beq.n	80019c6 <HAL_GPIO_EXTI_Callback+0x2a>
    case BUTTON_SW3_PIN:
      APP_BLE_Key_Button3_Action();
      break;

    default:
      break;
 80019b8:	e008      	b.n	80019cc <HAL_GPIO_EXTI_Callback+0x30>
     APP_BLE_Key_Button1_Action();
 80019ba:	f002 f9b1 	bl	8003d20 <APP_BLE_Key_Button1_Action>
      break; 
 80019be:	e006      	b.n	80019ce <HAL_GPIO_EXTI_Callback+0x32>
      APP_BLE_Key_Button2_Action();
 80019c0:	f002 f9b5 	bl	8003d2e <APP_BLE_Key_Button2_Action>
      break; 
 80019c4:	e003      	b.n	80019ce <HAL_GPIO_EXTI_Callback+0x32>
      APP_BLE_Key_Button3_Action();
 80019c6:	f002 f9b9 	bl	8003d3c <APP_BLE_Key_Button3_Action>
      break;
 80019ca:	e000      	b.n	80019ce <HAL_GPIO_EXTI_Callback+0x32>
      break;
 80019cc:	bf00      	nop

  }
  return;
 80019ce:	bf00      	nop
}
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
	...

080019d8 <RxUART_Init>:

static void RxUART_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  HW_UART_Receive_IT((hw_uart_id_t)CFG_DEBUG_TRACE_UART, aRxBuffer, 1U, RxCpltCallback);
 80019dc:	4b03      	ldr	r3, [pc, #12]	; (80019ec <RxUART_Init+0x14>)
 80019de:	2201      	movs	r2, #1
 80019e0:	4903      	ldr	r1, [pc, #12]	; (80019f0 <RxUART_Init+0x18>)
 80019e2:	2002      	movs	r0, #2
 80019e4:	f000 ff24 	bl	8002830 <HW_UART_Receive_IT>
}
 80019e8:	bf00      	nop
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	080019f5 	.word	0x080019f5
 80019f0:	20000288 	.word	0x20000288

080019f4 <RxCpltCallback>:

static void RxCpltCallback(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* Filling buffer and wait for '\r' char */
  if (indexReceiveChar < C_SIZE_CMD_STRING)
 80019f8:	4b15      	ldr	r3, [pc, #84]	; (8001a50 <RxCpltCallback+0x5c>)
 80019fa:	881b      	ldrh	r3, [r3, #0]
 80019fc:	2bff      	cmp	r3, #255	; 0xff
 80019fe:	d81e      	bhi.n	8001a3e <RxCpltCallback+0x4a>
  {
    if (aRxBuffer[0] == '\r')
 8001a00:	4b14      	ldr	r3, [pc, #80]	; (8001a54 <RxCpltCallback+0x60>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	2b0d      	cmp	r3, #13
 8001a06:	d10f      	bne.n	8001a28 <RxCpltCallback+0x34>
    {
      APP_DBG_MSG("received %s\n", CommandString);
 8001a08:	4913      	ldr	r1, [pc, #76]	; (8001a58 <RxCpltCallback+0x64>)
 8001a0a:	4814      	ldr	r0, [pc, #80]	; (8001a5c <RxCpltCallback+0x68>)
 8001a0c:	f00c fdfc 	bl	800e608 <iprintf>

      UartCmdExecute();
 8001a10:	f000 f828 	bl	8001a64 <UartCmdExecute>

      /* Clear receive buffer and character counter*/
      indexReceiveChar = 0;
 8001a14:	4b0e      	ldr	r3, [pc, #56]	; (8001a50 <RxCpltCallback+0x5c>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	801a      	strh	r2, [r3, #0]
      memset(CommandString, 0, C_SIZE_CMD_STRING);
 8001a1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a1e:	2100      	movs	r1, #0
 8001a20:	480d      	ldr	r0, [pc, #52]	; (8001a58 <RxCpltCallback+0x64>)
 8001a22:	f00c ff57 	bl	800e8d4 <memset>
 8001a26:	e00a      	b.n	8001a3e <RxCpltCallback+0x4a>
    }
    else
    {
      CommandString[indexReceiveChar++] = aRxBuffer[0];
 8001a28:	4b09      	ldr	r3, [pc, #36]	; (8001a50 <RxCpltCallback+0x5c>)
 8001a2a:	881b      	ldrh	r3, [r3, #0]
 8001a2c:	1c5a      	adds	r2, r3, #1
 8001a2e:	b291      	uxth	r1, r2
 8001a30:	4a07      	ldr	r2, [pc, #28]	; (8001a50 <RxCpltCallback+0x5c>)
 8001a32:	8011      	strh	r1, [r2, #0]
 8001a34:	461a      	mov	r2, r3
 8001a36:	4b07      	ldr	r3, [pc, #28]	; (8001a54 <RxCpltCallback+0x60>)
 8001a38:	7819      	ldrb	r1, [r3, #0]
 8001a3a:	4b07      	ldr	r3, [pc, #28]	; (8001a58 <RxCpltCallback+0x64>)
 8001a3c:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Once a character has been sent, put back the device in reception mode */
  HW_UART_Receive_IT((hw_uart_id_t)CFG_DEBUG_TRACE_UART, aRxBuffer, 1U, RxCpltCallback);
 8001a3e:	4b08      	ldr	r3, [pc, #32]	; (8001a60 <RxCpltCallback+0x6c>)
 8001a40:	2201      	movs	r2, #1
 8001a42:	4904      	ldr	r1, [pc, #16]	; (8001a54 <RxCpltCallback+0x60>)
 8001a44:	2002      	movs	r0, #2
 8001a46:	f000 fef3 	bl	8002830 <HW_UART_Receive_IT>
}
 8001a4a:	bf00      	nop
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	20000390 	.word	0x20000390
 8001a54:	20000288 	.word	0x20000288
 8001a58:	20000290 	.word	0x20000290
 8001a5c:	08010d14 	.word	0x08010d14
 8001a60:	080019f5 	.word	0x080019f5

08001a64 <UartCmdExecute>:

static void UartCmdExecute(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* Parse received CommandString */
  if(strcmp((char const*)CommandString, "SW1") == 0)
 8001a68:	491c      	ldr	r1, [pc, #112]	; (8001adc <UartCmdExecute+0x78>)
 8001a6a:	481d      	ldr	r0, [pc, #116]	; (8001ae0 <UartCmdExecute+0x7c>)
 8001a6c:	f7fe fb88 	bl	8000180 <strcmp>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d109      	bne.n	8001a8a <UartCmdExecute+0x26>
  {
    APP_DBG_MSG("SW1 OK\n");
 8001a76:	481b      	ldr	r0, [pc, #108]	; (8001ae4 <UartCmdExecute+0x80>)
 8001a78:	f00c fe2c 	bl	800e6d4 <puts>
    exti_handle.Line = EXTI_LINE_4;
 8001a7c:	4b1a      	ldr	r3, [pc, #104]	; (8001ae8 <UartCmdExecute+0x84>)
 8001a7e:	4a1b      	ldr	r2, [pc, #108]	; (8001aec <UartCmdExecute+0x88>)
 8001a80:	601a      	str	r2, [r3, #0]
    HAL_EXTI_GenerateSWI(&exti_handle);
 8001a82:	4819      	ldr	r0, [pc, #100]	; (8001ae8 <UartCmdExecute+0x84>)
 8001a84:	f004 f85e 	bl	8005b44 <HAL_EXTI_GenerateSWI>
  }
  else
  {
    APP_DBG_MSG("NOT RECOGNIZED COMMAND : %s\n", CommandString);
  }
}
 8001a88:	e026      	b.n	8001ad8 <UartCmdExecute+0x74>
  else if (strcmp((char const*)CommandString, "SW2") == 0)
 8001a8a:	4919      	ldr	r1, [pc, #100]	; (8001af0 <UartCmdExecute+0x8c>)
 8001a8c:	4814      	ldr	r0, [pc, #80]	; (8001ae0 <UartCmdExecute+0x7c>)
 8001a8e:	f7fe fb77 	bl	8000180 <strcmp>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d10a      	bne.n	8001aae <UartCmdExecute+0x4a>
    APP_DBG_MSG("SW2 OK\n");
 8001a98:	4816      	ldr	r0, [pc, #88]	; (8001af4 <UartCmdExecute+0x90>)
 8001a9a:	f00c fe1b 	bl	800e6d4 <puts>
    exti_handle.Line = EXTI_LINE_0;
 8001a9e:	4b12      	ldr	r3, [pc, #72]	; (8001ae8 <UartCmdExecute+0x84>)
 8001aa0:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
 8001aa4:	601a      	str	r2, [r3, #0]
    HAL_EXTI_GenerateSWI(&exti_handle);
 8001aa6:	4810      	ldr	r0, [pc, #64]	; (8001ae8 <UartCmdExecute+0x84>)
 8001aa8:	f004 f84c 	bl	8005b44 <HAL_EXTI_GenerateSWI>
}
 8001aac:	e014      	b.n	8001ad8 <UartCmdExecute+0x74>
  else if (strcmp((char const*)CommandString, "SW3") == 0)
 8001aae:	4912      	ldr	r1, [pc, #72]	; (8001af8 <UartCmdExecute+0x94>)
 8001ab0:	480b      	ldr	r0, [pc, #44]	; (8001ae0 <UartCmdExecute+0x7c>)
 8001ab2:	f7fe fb65 	bl	8000180 <strcmp>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d109      	bne.n	8001ad0 <UartCmdExecute+0x6c>
    APP_DBG_MSG("SW3 OK\n");
 8001abc:	480f      	ldr	r0, [pc, #60]	; (8001afc <UartCmdExecute+0x98>)
 8001abe:	f00c fe09 	bl	800e6d4 <puts>
    exti_handle.Line = EXTI_LINE_1;
 8001ac2:	4b09      	ldr	r3, [pc, #36]	; (8001ae8 <UartCmdExecute+0x84>)
 8001ac4:	4a0e      	ldr	r2, [pc, #56]	; (8001b00 <UartCmdExecute+0x9c>)
 8001ac6:	601a      	str	r2, [r3, #0]
    HAL_EXTI_GenerateSWI(&exti_handle);
 8001ac8:	4807      	ldr	r0, [pc, #28]	; (8001ae8 <UartCmdExecute+0x84>)
 8001aca:	f004 f83b 	bl	8005b44 <HAL_EXTI_GenerateSWI>
}
 8001ace:	e003      	b.n	8001ad8 <UartCmdExecute+0x74>
    APP_DBG_MSG("NOT RECOGNIZED COMMAND : %s\n", CommandString);
 8001ad0:	4903      	ldr	r1, [pc, #12]	; (8001ae0 <UartCmdExecute+0x7c>)
 8001ad2:	480c      	ldr	r0, [pc, #48]	; (8001b04 <UartCmdExecute+0xa0>)
 8001ad4:	f00c fd98 	bl	800e608 <iprintf>
}
 8001ad8:	bf00      	nop
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	08010d24 	.word	0x08010d24
 8001ae0:	20000290 	.word	0x20000290
 8001ae4:	08010d28 	.word	0x08010d28
 8001ae8:	20000280 	.word	0x20000280
 8001aec:	16000004 	.word	0x16000004
 8001af0:	08010d30 	.word	0x08010d30
 8001af4:	08010d34 	.word	0x08010d34
 8001af8:	08010d3c 	.word	0x08010d3c
 8001afc:	08010d40 	.word	0x08010d40
 8001b00:	16000001 	.word	0x16000001
 8001b04:	08010d48 	.word	0x08010d48

08001b08 <LL_EXTI_EnableIT_0_31>:
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001b10:	4b06      	ldr	r3, [pc, #24]	; (8001b2c <LL_EXTI_EnableIT_0_31+0x24>)
 8001b12:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001b16:	4905      	ldr	r1, [pc, #20]	; (8001b2c <LL_EXTI_EnableIT_0_31+0x24>)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001b20:	bf00      	nop
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr
 8001b2c:	58000800 	.word	0x58000800

08001b30 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001b38:	4b05      	ldr	r3, [pc, #20]	; (8001b50 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	4904      	ldr	r1, [pc, #16]	; (8001b50 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	600b      	str	r3, [r1, #0]

}
 8001b44:	bf00      	nop
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	58000800 	.word	0x58000800

08001b54 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001b5a:	4b0d      	ldr	r3, [pc, #52]	; (8001b90 <ReadRtcSsrValue+0x3c>)
 8001b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001b62:	4b0b      	ldr	r3, [pc, #44]	; (8001b90 <ReadRtcSsrValue+0x3c>)
 8001b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8001b6a:	e005      	b.n	8001b78 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001b70:	4b07      	ldr	r3, [pc, #28]	; (8001b90 <ReadRtcSsrValue+0x3c>)
 8001b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d1f5      	bne.n	8001b6c <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8001b80:	683b      	ldr	r3, [r7, #0]
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	40002800 	.word	0x40002800

08001b94 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b085      	sub	sp, #20
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	460a      	mov	r2, r1
 8001b9e:	71fb      	strb	r3, [r7, #7]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8001ba4:	79ba      	ldrb	r2, [r7, #6]
 8001ba6:	491d      	ldr	r1, [pc, #116]	; (8001c1c <LinkTimerAfter+0x88>)
 8001ba8:	4613      	mov	r3, r2
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	4413      	add	r3, r2
 8001bae:	00db      	lsls	r3, r3, #3
 8001bb0:	440b      	add	r3, r1
 8001bb2:	3315      	adds	r3, #21
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001bb8:	7bfb      	ldrb	r3, [r7, #15]
 8001bba:	2b06      	cmp	r3, #6
 8001bbc:	d009      	beq.n	8001bd2 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8001bbe:	7bfa      	ldrb	r2, [r7, #15]
 8001bc0:	4916      	ldr	r1, [pc, #88]	; (8001c1c <LinkTimerAfter+0x88>)
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	4413      	add	r3, r2
 8001bc8:	00db      	lsls	r3, r3, #3
 8001bca:	440b      	add	r3, r1
 8001bcc:	3314      	adds	r3, #20
 8001bce:	79fa      	ldrb	r2, [r7, #7]
 8001bd0:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8001bd2:	79fa      	ldrb	r2, [r7, #7]
 8001bd4:	4911      	ldr	r1, [pc, #68]	; (8001c1c <LinkTimerAfter+0x88>)
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	4413      	add	r3, r2
 8001bdc:	00db      	lsls	r3, r3, #3
 8001bde:	440b      	add	r3, r1
 8001be0:	3315      	adds	r3, #21
 8001be2:	7bfa      	ldrb	r2, [r7, #15]
 8001be4:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8001be6:	79fa      	ldrb	r2, [r7, #7]
 8001be8:	490c      	ldr	r1, [pc, #48]	; (8001c1c <LinkTimerAfter+0x88>)
 8001bea:	4613      	mov	r3, r2
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	4413      	add	r3, r2
 8001bf0:	00db      	lsls	r3, r3, #3
 8001bf2:	440b      	add	r3, r1
 8001bf4:	3314      	adds	r3, #20
 8001bf6:	79ba      	ldrb	r2, [r7, #6]
 8001bf8:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8001bfa:	79ba      	ldrb	r2, [r7, #6]
 8001bfc:	4907      	ldr	r1, [pc, #28]	; (8001c1c <LinkTimerAfter+0x88>)
 8001bfe:	4613      	mov	r3, r2
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	4413      	add	r3, r2
 8001c04:	00db      	lsls	r3, r3, #3
 8001c06:	440b      	add	r3, r1
 8001c08:	3315      	adds	r3, #21
 8001c0a:	79fa      	ldrb	r2, [r7, #7]
 8001c0c:	701a      	strb	r2, [r3, #0]

  return;
 8001c0e:	bf00      	nop
}
 8001c10:	3714      	adds	r7, #20
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	20000394 	.word	0x20000394

08001c20 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	4603      	mov	r3, r0
 8001c28:	460a      	mov	r2, r1
 8001c2a:	71fb      	strb	r3, [r7, #7]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8001c30:	4b29      	ldr	r3, [pc, #164]	; (8001cd8 <LinkTimerBefore+0xb8>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	79ba      	ldrb	r2, [r7, #6]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d032      	beq.n	8001ca2 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8001c3c:	79ba      	ldrb	r2, [r7, #6]
 8001c3e:	4927      	ldr	r1, [pc, #156]	; (8001cdc <LinkTimerBefore+0xbc>)
 8001c40:	4613      	mov	r3, r2
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	4413      	add	r3, r2
 8001c46:	00db      	lsls	r3, r3, #3
 8001c48:	440b      	add	r3, r1
 8001c4a:	3314      	adds	r3, #20
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8001c50:	7bfa      	ldrb	r2, [r7, #15]
 8001c52:	4922      	ldr	r1, [pc, #136]	; (8001cdc <LinkTimerBefore+0xbc>)
 8001c54:	4613      	mov	r3, r2
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	4413      	add	r3, r2
 8001c5a:	00db      	lsls	r3, r3, #3
 8001c5c:	440b      	add	r3, r1
 8001c5e:	3315      	adds	r3, #21
 8001c60:	79fa      	ldrb	r2, [r7, #7]
 8001c62:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001c64:	79fa      	ldrb	r2, [r7, #7]
 8001c66:	491d      	ldr	r1, [pc, #116]	; (8001cdc <LinkTimerBefore+0xbc>)
 8001c68:	4613      	mov	r3, r2
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	4413      	add	r3, r2
 8001c6e:	00db      	lsls	r3, r3, #3
 8001c70:	440b      	add	r3, r1
 8001c72:	3315      	adds	r3, #21
 8001c74:	79ba      	ldrb	r2, [r7, #6]
 8001c76:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8001c78:	79fa      	ldrb	r2, [r7, #7]
 8001c7a:	4918      	ldr	r1, [pc, #96]	; (8001cdc <LinkTimerBefore+0xbc>)
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	4413      	add	r3, r2
 8001c82:	00db      	lsls	r3, r3, #3
 8001c84:	440b      	add	r3, r1
 8001c86:	3314      	adds	r3, #20
 8001c88:	7bfa      	ldrb	r2, [r7, #15]
 8001c8a:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001c8c:	79ba      	ldrb	r2, [r7, #6]
 8001c8e:	4913      	ldr	r1, [pc, #76]	; (8001cdc <LinkTimerBefore+0xbc>)
 8001c90:	4613      	mov	r3, r2
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	4413      	add	r3, r2
 8001c96:	00db      	lsls	r3, r3, #3
 8001c98:	440b      	add	r3, r1
 8001c9a:	3314      	adds	r3, #20
 8001c9c:	79fa      	ldrb	r2, [r7, #7]
 8001c9e:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8001ca0:	e014      	b.n	8001ccc <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8001ca2:	79fa      	ldrb	r2, [r7, #7]
 8001ca4:	490d      	ldr	r1, [pc, #52]	; (8001cdc <LinkTimerBefore+0xbc>)
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	4413      	add	r3, r2
 8001cac:	00db      	lsls	r3, r3, #3
 8001cae:	440b      	add	r3, r1
 8001cb0:	3315      	adds	r3, #21
 8001cb2:	79ba      	ldrb	r2, [r7, #6]
 8001cb4:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001cb6:	79ba      	ldrb	r2, [r7, #6]
 8001cb8:	4908      	ldr	r1, [pc, #32]	; (8001cdc <LinkTimerBefore+0xbc>)
 8001cba:	4613      	mov	r3, r2
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	4413      	add	r3, r2
 8001cc0:	00db      	lsls	r3, r3, #3
 8001cc2:	440b      	add	r3, r1
 8001cc4:	3314      	adds	r3, #20
 8001cc6:	79fa      	ldrb	r2, [r7, #7]
 8001cc8:	701a      	strb	r2, [r3, #0]
  return;
 8001cca:	bf00      	nop
}
 8001ccc:	3714      	adds	r7, #20
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	20000424 	.word	0x20000424
 8001cdc:	20000394 	.word	0x20000394

08001ce0 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001cea:	4b4e      	ldr	r3, [pc, #312]	; (8001e24 <linkTimer+0x144>)
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	2b06      	cmp	r3, #6
 8001cf2:	d118      	bne.n	8001d26 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001cf4:	4b4b      	ldr	r3, [pc, #300]	; (8001e24 <linkTimer+0x144>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	b2da      	uxtb	r2, r3
 8001cfa:	4b4b      	ldr	r3, [pc, #300]	; (8001e28 <linkTimer+0x148>)
 8001cfc:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8001cfe:	4a49      	ldr	r2, [pc, #292]	; (8001e24 <linkTimer+0x144>)
 8001d00:	79fb      	ldrb	r3, [r7, #7]
 8001d02:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001d04:	79fa      	ldrb	r2, [r7, #7]
 8001d06:	4949      	ldr	r1, [pc, #292]	; (8001e2c <linkTimer+0x14c>)
 8001d08:	4613      	mov	r3, r2
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	4413      	add	r3, r2
 8001d0e:	00db      	lsls	r3, r3, #3
 8001d10:	440b      	add	r3, r1
 8001d12:	3315      	adds	r3, #21
 8001d14:	2206      	movs	r2, #6
 8001d16:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001d18:	4b45      	ldr	r3, [pc, #276]	; (8001e30 <linkTimer+0x150>)
 8001d1a:	f04f 32ff 	mov.w	r2, #4294967295
 8001d1e:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8001d20:	2300      	movs	r3, #0
 8001d22:	81fb      	strh	r3, [r7, #14]
 8001d24:	e078      	b.n	8001e18 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8001d26:	f000 f909 	bl	8001f3c <ReturnTimeElapsed>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8001d2e:	79fa      	ldrb	r2, [r7, #7]
 8001d30:	493e      	ldr	r1, [pc, #248]	; (8001e2c <linkTimer+0x14c>)
 8001d32:	4613      	mov	r3, r2
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	4413      	add	r3, r2
 8001d38:	00db      	lsls	r3, r3, #3
 8001d3a:	440b      	add	r3, r1
 8001d3c:	3308      	adds	r3, #8
 8001d3e:	6819      	ldr	r1, [r3, #0]
 8001d40:	89fb      	ldrh	r3, [r7, #14]
 8001d42:	79fa      	ldrb	r2, [r7, #7]
 8001d44:	4419      	add	r1, r3
 8001d46:	4839      	ldr	r0, [pc, #228]	; (8001e2c <linkTimer+0x14c>)
 8001d48:	4613      	mov	r3, r2
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	4413      	add	r3, r2
 8001d4e:	00db      	lsls	r3, r3, #3
 8001d50:	4403      	add	r3, r0
 8001d52:	3308      	adds	r3, #8
 8001d54:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8001d56:	79fa      	ldrb	r2, [r7, #7]
 8001d58:	4934      	ldr	r1, [pc, #208]	; (8001e2c <linkTimer+0x14c>)
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	4413      	add	r3, r2
 8001d60:	00db      	lsls	r3, r3, #3
 8001d62:	440b      	add	r3, r1
 8001d64:	3308      	adds	r3, #8
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8001d6a:	4b2e      	ldr	r3, [pc, #184]	; (8001e24 <linkTimer+0x144>)
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	4619      	mov	r1, r3
 8001d72:	4a2e      	ldr	r2, [pc, #184]	; (8001e2c <linkTimer+0x14c>)
 8001d74:	460b      	mov	r3, r1
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	440b      	add	r3, r1
 8001d7a:	00db      	lsls	r3, r3, #3
 8001d7c:	4413      	add	r3, r2
 8001d7e:	3308      	adds	r3, #8
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	68ba      	ldr	r2, [r7, #8]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d337      	bcc.n	8001df8 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8001d88:	4b26      	ldr	r3, [pc, #152]	; (8001e24 <linkTimer+0x144>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8001d8e:	7b7a      	ldrb	r2, [r7, #13]
 8001d90:	4926      	ldr	r1, [pc, #152]	; (8001e2c <linkTimer+0x14c>)
 8001d92:	4613      	mov	r3, r2
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	4413      	add	r3, r2
 8001d98:	00db      	lsls	r3, r3, #3
 8001d9a:	440b      	add	r3, r1
 8001d9c:	3315      	adds	r3, #21
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001da2:	e013      	b.n	8001dcc <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001da4:	7b7a      	ldrb	r2, [r7, #13]
 8001da6:	4921      	ldr	r1, [pc, #132]	; (8001e2c <linkTimer+0x14c>)
 8001da8:	4613      	mov	r3, r2
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	4413      	add	r3, r2
 8001dae:	00db      	lsls	r3, r3, #3
 8001db0:	440b      	add	r3, r1
 8001db2:	3315      	adds	r3, #21
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001db8:	7b7a      	ldrb	r2, [r7, #13]
 8001dba:	491c      	ldr	r1, [pc, #112]	; (8001e2c <linkTimer+0x14c>)
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	4413      	add	r3, r2
 8001dc2:	00db      	lsls	r3, r3, #3
 8001dc4:	440b      	add	r3, r1
 8001dc6:	3315      	adds	r3, #21
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001dcc:	7b3b      	ldrb	r3, [r7, #12]
 8001dce:	2b06      	cmp	r3, #6
 8001dd0:	d00b      	beq.n	8001dea <linkTimer+0x10a>
 8001dd2:	7b3a      	ldrb	r2, [r7, #12]
 8001dd4:	4915      	ldr	r1, [pc, #84]	; (8001e2c <linkTimer+0x14c>)
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	4413      	add	r3, r2
 8001ddc:	00db      	lsls	r3, r3, #3
 8001dde:	440b      	add	r3, r1
 8001de0:	3308      	adds	r3, #8
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	68ba      	ldr	r2, [r7, #8]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d2dc      	bcs.n	8001da4 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8001dea:	7b7a      	ldrb	r2, [r7, #13]
 8001dec:	79fb      	ldrb	r3, [r7, #7]
 8001dee:	4611      	mov	r1, r2
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff fecf 	bl	8001b94 <LinkTimerAfter>
 8001df6:	e00f      	b.n	8001e18 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001df8:	4b0a      	ldr	r3, [pc, #40]	; (8001e24 <linkTimer+0x144>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	b2da      	uxtb	r2, r3
 8001dfe:	79fb      	ldrb	r3, [r7, #7]
 8001e00:	4611      	mov	r1, r2
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7ff ff0c 	bl	8001c20 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001e08:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <linkTimer+0x144>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	b2da      	uxtb	r2, r3
 8001e0e:	4b06      	ldr	r3, [pc, #24]	; (8001e28 <linkTimer+0x148>)
 8001e10:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8001e12:	4a04      	ldr	r2, [pc, #16]	; (8001e24 <linkTimer+0x144>)
 8001e14:	79fb      	ldrb	r3, [r7, #7]
 8001e16:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8001e18:	89fb      	ldrh	r3, [r7, #14]
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3710      	adds	r7, #16
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	20000424 	.word	0x20000424
 8001e28:	20000425 	.word	0x20000425
 8001e2c:	20000394 	.word	0x20000394
 8001e30:	20000428 	.word	0x20000428

08001e34 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	460a      	mov	r2, r1
 8001e3e:	71fb      	strb	r3, [r7, #7]
 8001e40:	4613      	mov	r3, r2
 8001e42:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001e44:	4b39      	ldr	r3, [pc, #228]	; (8001f2c <UnlinkTimer+0xf8>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	79fa      	ldrb	r2, [r7, #7]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d111      	bne.n	8001e74 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001e50:	4b36      	ldr	r3, [pc, #216]	; (8001f2c <UnlinkTimer+0xf8>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	b2da      	uxtb	r2, r3
 8001e56:	4b36      	ldr	r3, [pc, #216]	; (8001f30 <UnlinkTimer+0xfc>)
 8001e58:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8001e5a:	79fa      	ldrb	r2, [r7, #7]
 8001e5c:	4935      	ldr	r1, [pc, #212]	; (8001f34 <UnlinkTimer+0x100>)
 8001e5e:	4613      	mov	r3, r2
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	4413      	add	r3, r2
 8001e64:	00db      	lsls	r3, r3, #3
 8001e66:	440b      	add	r3, r1
 8001e68:	3315      	adds	r3, #21
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	b2da      	uxtb	r2, r3
 8001e6e:	4b2f      	ldr	r3, [pc, #188]	; (8001f2c <UnlinkTimer+0xf8>)
 8001e70:	701a      	strb	r2, [r3, #0]
 8001e72:	e03e      	b.n	8001ef2 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001e74:	79fa      	ldrb	r2, [r7, #7]
 8001e76:	492f      	ldr	r1, [pc, #188]	; (8001f34 <UnlinkTimer+0x100>)
 8001e78:	4613      	mov	r3, r2
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	4413      	add	r3, r2
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	440b      	add	r3, r1
 8001e82:	3314      	adds	r3, #20
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8001e88:	79fa      	ldrb	r2, [r7, #7]
 8001e8a:	492a      	ldr	r1, [pc, #168]	; (8001f34 <UnlinkTimer+0x100>)
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	4413      	add	r3, r2
 8001e92:	00db      	lsls	r3, r3, #3
 8001e94:	440b      	add	r3, r1
 8001e96:	3315      	adds	r3, #21
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001e9c:	79f9      	ldrb	r1, [r7, #7]
 8001e9e:	7bfa      	ldrb	r2, [r7, #15]
 8001ea0:	4824      	ldr	r0, [pc, #144]	; (8001f34 <UnlinkTimer+0x100>)
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	440b      	add	r3, r1
 8001ea8:	00db      	lsls	r3, r3, #3
 8001eaa:	4403      	add	r3, r0
 8001eac:	3315      	adds	r3, #21
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	b2d8      	uxtb	r0, r3
 8001eb2:	4920      	ldr	r1, [pc, #128]	; (8001f34 <UnlinkTimer+0x100>)
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	4413      	add	r3, r2
 8001eba:	00db      	lsls	r3, r3, #3
 8001ebc:	440b      	add	r3, r1
 8001ebe:	3315      	adds	r3, #21
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001ec4:	7bbb      	ldrb	r3, [r7, #14]
 8001ec6:	2b06      	cmp	r3, #6
 8001ec8:	d013      	beq.n	8001ef2 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8001eca:	79f9      	ldrb	r1, [r7, #7]
 8001ecc:	7bba      	ldrb	r2, [r7, #14]
 8001ece:	4819      	ldr	r0, [pc, #100]	; (8001f34 <UnlinkTimer+0x100>)
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	440b      	add	r3, r1
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	4403      	add	r3, r0
 8001eda:	3314      	adds	r3, #20
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	b2d8      	uxtb	r0, r3
 8001ee0:	4914      	ldr	r1, [pc, #80]	; (8001f34 <UnlinkTimer+0x100>)
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	4413      	add	r3, r2
 8001ee8:	00db      	lsls	r3, r3, #3
 8001eea:	440b      	add	r3, r1
 8001eec:	3314      	adds	r3, #20
 8001eee:	4602      	mov	r2, r0
 8001ef0:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8001ef2:	79fa      	ldrb	r2, [r7, #7]
 8001ef4:	490f      	ldr	r1, [pc, #60]	; (8001f34 <UnlinkTimer+0x100>)
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	4413      	add	r3, r2
 8001efc:	00db      	lsls	r3, r3, #3
 8001efe:	440b      	add	r3, r1
 8001f00:	330c      	adds	r3, #12
 8001f02:	2201      	movs	r2, #1
 8001f04:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8001f06:	4b09      	ldr	r3, [pc, #36]	; (8001f2c <UnlinkTimer+0xf8>)
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	2b06      	cmp	r3, #6
 8001f0e:	d107      	bne.n	8001f20 <UnlinkTimer+0xec>
 8001f10:	79bb      	ldrb	r3, [r7, #6]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d104      	bne.n	8001f20 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001f16:	4b08      	ldr	r3, [pc, #32]	; (8001f38 <UnlinkTimer+0x104>)
 8001f18:	f04f 32ff 	mov.w	r2, #4294967295
 8001f1c:	601a      	str	r2, [r3, #0]
  }

  return;
 8001f1e:	bf00      	nop
 8001f20:	bf00      	nop
}
 8001f22:	3714      	adds	r7, #20
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr
 8001f2c:	20000424 	.word	0x20000424
 8001f30:	20000425 	.word	0x20000425
 8001f34:	20000394 	.word	0x20000394
 8001f38:	20000428 	.word	0x20000428

08001f3c <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8001f42:	4b1a      	ldr	r3, [pc, #104]	; (8001fac <ReturnTimeElapsed+0x70>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f4a:	d026      	beq.n	8001f9a <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8001f4c:	f7ff fe02 	bl	8001b54 <ReadRtcSsrValue>
 8001f50:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8001f52:	4b16      	ldr	r3, [pc, #88]	; (8001fac <ReturnTimeElapsed+0x70>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d805      	bhi.n	8001f68 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8001f5c:	4b13      	ldr	r3, [pc, #76]	; (8001fac <ReturnTimeElapsed+0x70>)
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	607b      	str	r3, [r7, #4]
 8001f66:	e00a      	b.n	8001f7e <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8001f68:	4b11      	ldr	r3, [pc, #68]	; (8001fb0 <ReturnTimeElapsed+0x74>)
 8001f6a:	881b      	ldrh	r3, [r3, #0]
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001f74:	4b0d      	ldr	r3, [pc, #52]	; (8001fac <ReturnTimeElapsed+0x70>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	683a      	ldr	r2, [r7, #0]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8001f7e:	4b0d      	ldr	r3, [pc, #52]	; (8001fb4 <ReturnTimeElapsed+0x78>)
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	461a      	mov	r2, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	fb02 f303 	mul.w	r3, r2, r3
 8001f8a:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001f8c:	4b0a      	ldr	r3, [pc, #40]	; (8001fb8 <ReturnTimeElapsed+0x7c>)
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	461a      	mov	r2, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	40d3      	lsrs	r3, r2
 8001f96:	607b      	str	r3, [r7, #4]
 8001f98:	e001      	b.n	8001f9e <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	b29b      	uxth	r3, r3
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	20000428 	.word	0x20000428
 8001fb0:	20000430 	.word	0x20000430
 8001fb4:	2000042e 	.word	0x2000042e
 8001fb8:	2000042d 	.word	0x2000042d

08001fbc <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8001fc6:	88fb      	ldrh	r3, [r7, #6]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d108      	bne.n	8001fde <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001fcc:	f7ff fdc2 	bl	8001b54 <ReadRtcSsrValue>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	4a21      	ldr	r2, [pc, #132]	; (8002058 <RestartWakeupCounter+0x9c>)
 8001fd4:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001fd6:	2003      	movs	r0, #3
 8001fd8:	f003 fa25 	bl	8005426 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001fdc:	e039      	b.n	8002052 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8001fde:	88fb      	ldrh	r3, [r7, #6]
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d803      	bhi.n	8001fec <RestartWakeupCounter+0x30>
 8001fe4:	4b1d      	ldr	r3, [pc, #116]	; (800205c <RestartWakeupCounter+0xa0>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d002      	beq.n	8001ff2 <RestartWakeupCounter+0x36>
      Value -= 1;
 8001fec:	88fb      	ldrh	r3, [r7, #6]
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001ff2:	bf00      	nop
 8001ff4:	4b1a      	ldr	r3, [pc, #104]	; (8002060 <RestartWakeupCounter+0xa4>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	f003 0304 	and.w	r3, r3, #4
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d0f8      	beq.n	8001ff4 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002002:	4b17      	ldr	r3, [pc, #92]	; (8002060 <RestartWakeupCounter+0xa4>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	b2da      	uxtb	r2, r3
 800200a:	4b15      	ldr	r3, [pc, #84]	; (8002060 <RestartWakeupCounter+0xa4>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002012:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002014:	4b13      	ldr	r3, [pc, #76]	; (8002064 <RestartWakeupCounter+0xa8>)
 8002016:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800201a:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800201c:	2003      	movs	r0, #3
 800201e:	f003 fa10 	bl	8005442 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8002022:	4b11      	ldr	r3, [pc, #68]	; (8002068 <RestartWakeupCounter+0xac>)
 8002024:	695b      	ldr	r3, [r3, #20]
 8002026:	0c1b      	lsrs	r3, r3, #16
 8002028:	041b      	lsls	r3, r3, #16
 800202a:	88fa      	ldrh	r2, [r7, #6]
 800202c:	490e      	ldr	r1, [pc, #56]	; (8002068 <RestartWakeupCounter+0xac>)
 800202e:	4313      	orrs	r3, r2
 8002030:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8002032:	f7ff fd8f 	bl	8001b54 <ReadRtcSsrValue>
 8002036:	4603      	mov	r3, r0
 8002038:	4a07      	ldr	r2, [pc, #28]	; (8002058 <RestartWakeupCounter+0x9c>)
 800203a:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 800203c:	4b08      	ldr	r3, [pc, #32]	; (8002060 <RestartWakeupCounter+0xa4>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	689a      	ldr	r2, [r3, #8]
 8002042:	4b07      	ldr	r3, [pc, #28]	; (8002060 <RestartWakeupCounter+0xa4>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800204a:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 800204c:	f3af 8000 	nop.w
  return ;
 8002050:	bf00      	nop
}
 8002052:	3708      	adds	r7, #8
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	20000428 	.word	0x20000428
 800205c:	2000042d 	.word	0x2000042d
 8002060:	2000067c 	.word	0x2000067c
 8002064:	58000800 	.word	0x58000800
 8002068:	40002800 	.word	0x40002800

0800206c <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8002072:	4b45      	ldr	r3, [pc, #276]	; (8002188 <RescheduleTimerList+0x11c>)
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800207a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800207e:	d107      	bne.n	8002090 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8002080:	bf00      	nop
 8002082:	4b42      	ldr	r3, [pc, #264]	; (800218c <RescheduleTimerList+0x120>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	f003 0304 	and.w	r3, r3, #4
 800208c:	2b00      	cmp	r3, #0
 800208e:	d1f8      	bne.n	8002082 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8002090:	4b3e      	ldr	r3, [pc, #248]	; (800218c <RescheduleTimerList+0x120>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	689a      	ldr	r2, [r3, #8]
 8002096:	4b3d      	ldr	r3, [pc, #244]	; (800218c <RescheduleTimerList+0x120>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800209e:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 80020a0:	4b3b      	ldr	r3, [pc, #236]	; (8002190 <RescheduleTimerList+0x124>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 80020a6:	7bfa      	ldrb	r2, [r7, #15]
 80020a8:	493a      	ldr	r1, [pc, #232]	; (8002194 <RescheduleTimerList+0x128>)
 80020aa:	4613      	mov	r3, r2
 80020ac:	005b      	lsls	r3, r3, #1
 80020ae:	4413      	add	r3, r2
 80020b0:	00db      	lsls	r3, r3, #3
 80020b2:	440b      	add	r3, r1
 80020b4:	3308      	adds	r3, #8
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 80020ba:	f7ff ff3f 	bl	8001f3c <ReturnTimeElapsed>
 80020be:	4603      	mov	r3, r0
 80020c0:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 80020c2:	88fb      	ldrh	r3, [r7, #6]
 80020c4:	68ba      	ldr	r2, [r7, #8]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d205      	bcs.n	80020d6 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 80020ca:	2300      	movs	r3, #0
 80020cc:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80020ce:	4b32      	ldr	r3, [pc, #200]	; (8002198 <RescheduleTimerList+0x12c>)
 80020d0:	2201      	movs	r2, #1
 80020d2:	701a      	strb	r2, [r3, #0]
 80020d4:	e04d      	b.n	8002172 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 80020d6:	88fb      	ldrh	r3, [r7, #6]
 80020d8:	4a30      	ldr	r2, [pc, #192]	; (800219c <RescheduleTimerList+0x130>)
 80020da:	8812      	ldrh	r2, [r2, #0]
 80020dc:	b292      	uxth	r2, r2
 80020de:	4413      	add	r3, r2
 80020e0:	461a      	mov	r2, r3
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d906      	bls.n	80020f6 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 80020e8:	4b2c      	ldr	r3, [pc, #176]	; (800219c <RescheduleTimerList+0x130>)
 80020ea:	881b      	ldrh	r3, [r3, #0]
 80020ec:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 80020ee:	4b2a      	ldr	r3, [pc, #168]	; (8002198 <RescheduleTimerList+0x12c>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	701a      	strb	r2, [r3, #0]
 80020f4:	e03d      	b.n	8002172 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	b29a      	uxth	r2, r3
 80020fa:	88fb      	ldrh	r3, [r7, #6]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002100:	4b25      	ldr	r3, [pc, #148]	; (8002198 <RescheduleTimerList+0x12c>)
 8002102:	2201      	movs	r2, #1
 8002104:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002106:	e034      	b.n	8002172 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8002108:	7bfa      	ldrb	r2, [r7, #15]
 800210a:	4922      	ldr	r1, [pc, #136]	; (8002194 <RescheduleTimerList+0x128>)
 800210c:	4613      	mov	r3, r2
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	4413      	add	r3, r2
 8002112:	00db      	lsls	r3, r3, #3
 8002114:	440b      	add	r3, r1
 8002116:	3308      	adds	r3, #8
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	88fb      	ldrh	r3, [r7, #6]
 800211c:	429a      	cmp	r2, r3
 800211e:	d20a      	bcs.n	8002136 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8002120:	7bfa      	ldrb	r2, [r7, #15]
 8002122:	491c      	ldr	r1, [pc, #112]	; (8002194 <RescheduleTimerList+0x128>)
 8002124:	4613      	mov	r3, r2
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	4413      	add	r3, r2
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	440b      	add	r3, r1
 800212e:	3308      	adds	r3, #8
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]
 8002134:	e013      	b.n	800215e <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8002136:	7bfa      	ldrb	r2, [r7, #15]
 8002138:	4916      	ldr	r1, [pc, #88]	; (8002194 <RescheduleTimerList+0x128>)
 800213a:	4613      	mov	r3, r2
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	4413      	add	r3, r2
 8002140:	00db      	lsls	r3, r3, #3
 8002142:	440b      	add	r3, r1
 8002144:	3308      	adds	r3, #8
 8002146:	6819      	ldr	r1, [r3, #0]
 8002148:	88fb      	ldrh	r3, [r7, #6]
 800214a:	7bfa      	ldrb	r2, [r7, #15]
 800214c:	1ac9      	subs	r1, r1, r3
 800214e:	4811      	ldr	r0, [pc, #68]	; (8002194 <RescheduleTimerList+0x128>)
 8002150:	4613      	mov	r3, r2
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	4413      	add	r3, r2
 8002156:	00db      	lsls	r3, r3, #3
 8002158:	4403      	add	r3, r0
 800215a:	3308      	adds	r3, #8
 800215c:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 800215e:	7bfa      	ldrb	r2, [r7, #15]
 8002160:	490c      	ldr	r1, [pc, #48]	; (8002194 <RescheduleTimerList+0x128>)
 8002162:	4613      	mov	r3, r2
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	4413      	add	r3, r2
 8002168:	00db      	lsls	r3, r3, #3
 800216a:	440b      	add	r3, r1
 800216c:	3315      	adds	r3, #21
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002172:	7bfb      	ldrb	r3, [r7, #15]
 8002174:	2b06      	cmp	r3, #6
 8002176:	d1c7      	bne.n	8002108 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8002178:	89bb      	ldrh	r3, [r7, #12]
 800217a:	4618      	mov	r0, r3
 800217c:	f7ff ff1e 	bl	8001fbc <RestartWakeupCounter>

  return ;
 8002180:	bf00      	nop
}
 8002182:	3710      	adds	r7, #16
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	40002800 	.word	0x40002800
 800218c:	2000067c 	.word	0x2000067c
 8002190:	20000424 	.word	0x20000424
 8002194:	20000394 	.word	0x20000394
 8002198:	2000042c 	.word	0x2000042c
 800219c:	20000432 	.word	0x20000432

080021a0 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b08a      	sub	sp, #40	; 0x28
 80021a4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021a6:	f3ef 8310 	mrs	r3, PRIMASK
 80021aa:	617b      	str	r3, [r7, #20]
  return(result);
 80021ac:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80021ae:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 80021b0:	b672      	cpsid	i
}
 80021b2:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80021b4:	4b59      	ldr	r3, [pc, #356]	; (800231c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	22ca      	movs	r2, #202	; 0xca
 80021ba:	625a      	str	r2, [r3, #36]	; 0x24
 80021bc:	4b57      	ldr	r3, [pc, #348]	; (800231c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2253      	movs	r2, #83	; 0x53
 80021c2:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 80021c4:	4b55      	ldr	r3, [pc, #340]	; (800231c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	689a      	ldr	r2, [r3, #8]
 80021ca:	4b54      	ldr	r3, [pc, #336]	; (800231c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021d2:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 80021d4:	4b52      	ldr	r3, [pc, #328]	; (8002320 <HW_TS_RTC_Wakeup_Handler+0x180>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 80021dc:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80021e0:	4950      	ldr	r1, [pc, #320]	; (8002324 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80021e2:	4613      	mov	r3, r2
 80021e4:	005b      	lsls	r3, r3, #1
 80021e6:	4413      	add	r3, r2
 80021e8:	00db      	lsls	r3, r3, #3
 80021ea:	440b      	add	r3, r1
 80021ec:	330c      	adds	r3, #12
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d16e      	bne.n	80022d4 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 80021f6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80021fa:	494a      	ldr	r1, [pc, #296]	; (8002324 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80021fc:	4613      	mov	r3, r2
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	4413      	add	r3, r2
 8002202:	00db      	lsls	r3, r3, #3
 8002204:	440b      	add	r3, r1
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 800220a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800220e:	4945      	ldr	r1, [pc, #276]	; (8002324 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002210:	4613      	mov	r3, r2
 8002212:	005b      	lsls	r3, r3, #1
 8002214:	4413      	add	r3, r2
 8002216:	00db      	lsls	r3, r3, #3
 8002218:	440b      	add	r3, r1
 800221a:	3310      	adds	r3, #16
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8002220:	4b41      	ldr	r3, [pc, #260]	; (8002328 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b00      	cmp	r3, #0
 8002228:	d04c      	beq.n	80022c4 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 800222a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800222e:	493d      	ldr	r1, [pc, #244]	; (8002324 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002230:	4613      	mov	r3, r2
 8002232:	005b      	lsls	r3, r3, #1
 8002234:	4413      	add	r3, r2
 8002236:	00db      	lsls	r3, r3, #3
 8002238:	440b      	add	r3, r1
 800223a:	330d      	adds	r3, #13
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	b2db      	uxtb	r3, r3
 8002240:	2b01      	cmp	r3, #1
 8002242:	d124      	bne.n	800228e <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8002244:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002248:	2101      	movs	r1, #1
 800224a:	4618      	mov	r0, r3
 800224c:	f7ff fdf2 	bl	8001e34 <UnlinkTimer>
 8002250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002252:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	f383 8810 	msr	PRIMASK, r3
}
 800225a:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 800225c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002260:	4930      	ldr	r1, [pc, #192]	; (8002324 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002262:	4613      	mov	r3, r2
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	4413      	add	r3, r2
 8002268:	00db      	lsls	r3, r3, #3
 800226a:	440b      	add	r3, r1
 800226c:	3304      	adds	r3, #4
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002274:	4611      	mov	r1, r2
 8002276:	4618      	mov	r0, r3
 8002278:	f000 fa32 	bl	80026e0 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800227c:	4b27      	ldr	r3, [pc, #156]	; (800231c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	22ca      	movs	r2, #202	; 0xca
 8002282:	625a      	str	r2, [r3, #36]	; 0x24
 8002284:	4b25      	ldr	r3, [pc, #148]	; (800231c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2253      	movs	r2, #83	; 0x53
 800228a:	625a      	str	r2, [r3, #36]	; 0x24
 800228c:	e012      	b.n	80022b4 <HW_TS_RTC_Wakeup_Handler+0x114>
 800228e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002290:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	f383 8810 	msr	PRIMASK, r3
}
 8002298:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 800229a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800229e:	4618      	mov	r0, r3
 80022a0:	f000 f99a 	bl	80025d8 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80022a4:	4b1d      	ldr	r3, [pc, #116]	; (800231c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	22ca      	movs	r2, #202	; 0xca
 80022aa:	625a      	str	r2, [r3, #36]	; 0x24
 80022ac:	4b1b      	ldr	r3, [pc, #108]	; (800231c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2253      	movs	r2, #83	; 0x53
 80022b2:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 80022b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80022b8:	69fa      	ldr	r2, [r7, #28]
 80022ba:	4619      	mov	r1, r3
 80022bc:	69b8      	ldr	r0, [r7, #24]
 80022be:	f000 fa95 	bl	80027ec <HW_TS_RTC_Int_AppNot>
 80022c2:	e022      	b.n	800230a <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 80022c4:	f7ff fed2 	bl	800206c <RescheduleTimerList>
 80022c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ca:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	f383 8810 	msr	PRIMASK, r3
}
 80022d2:	e01a      	b.n	800230a <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80022d4:	bf00      	nop
 80022d6:	4b11      	ldr	r3, [pc, #68]	; (800231c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	f003 0304 	and.w	r3, r3, #4
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d0f8      	beq.n	80022d6 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80022e4:	4b0d      	ldr	r3, [pc, #52]	; (800231c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	b2da      	uxtb	r2, r3
 80022ec:	4b0b      	ldr	r3, [pc, #44]	; (800231c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80022f4:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80022f6:	4b0d      	ldr	r3, [pc, #52]	; (800232c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80022f8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80022fc:	60da      	str	r2, [r3, #12]
 80022fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002300:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f383 8810 	msr	PRIMASK, r3
}
 8002308:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800230a:	4b04      	ldr	r3, [pc, #16]	; (800231c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	22ff      	movs	r2, #255	; 0xff
 8002310:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8002312:	bf00      	nop
}
 8002314:	3728      	adds	r7, #40	; 0x28
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	2000067c 	.word	0x2000067c
 8002320:	20000424 	.word	0x20000424
 8002324:	20000394 	.word	0x20000394
 8002328:	2000042c 	.word	0x2000042c
 800232c:	58000800 	.word	0x58000800

08002330 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b088      	sub	sp, #32
 8002334:	af00      	add	r7, sp, #0
 8002336:	4603      	mov	r3, r0
 8002338:	6039      	str	r1, [r7, #0]
 800233a:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800233c:	4b5e      	ldr	r3, [pc, #376]	; (80024b8 <HW_TS_Init+0x188>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	22ca      	movs	r2, #202	; 0xca
 8002342:	625a      	str	r2, [r3, #36]	; 0x24
 8002344:	4b5c      	ldr	r3, [pc, #368]	; (80024b8 <HW_TS_Init+0x188>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2253      	movs	r2, #83	; 0x53
 800234a:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800234c:	4b5b      	ldr	r3, [pc, #364]	; (80024bc <HW_TS_Init+0x18c>)
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	4a5a      	ldr	r2, [pc, #360]	; (80024bc <HW_TS_Init+0x18c>)
 8002352:	f043 0320 	orr.w	r3, r3, #32
 8002356:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8002358:	4b58      	ldr	r3, [pc, #352]	; (80024bc <HW_TS_Init+0x18c>)
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	b2db      	uxtb	r3, r3
 800235e:	f003 0307 	and.w	r3, r3, #7
 8002362:	b2db      	uxtb	r3, r3
 8002364:	f1c3 0304 	rsb	r3, r3, #4
 8002368:	b2da      	uxtb	r2, r3
 800236a:	4b55      	ldr	r3, [pc, #340]	; (80024c0 <HW_TS_Init+0x190>)
 800236c:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 800236e:	4b53      	ldr	r3, [pc, #332]	; (80024bc <HW_TS_Init+0x18c>)
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002376:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 800237a:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237c:	693a      	ldr	r2, [r7, #16]
 800237e:	fa92 f2a2 	rbit	r2, r2
 8002382:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002384:	68fa      	ldr	r2, [r7, #12]
 8002386:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002388:	697a      	ldr	r2, [r7, #20]
 800238a:	2a00      	cmp	r2, #0
 800238c:	d101      	bne.n	8002392 <HW_TS_Init+0x62>
  {
    return 32U;
 800238e:	2220      	movs	r2, #32
 8002390:	e003      	b.n	800239a <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8002392:	697a      	ldr	r2, [r7, #20]
 8002394:	fab2 f282 	clz	r2, r2
 8002398:	b2d2      	uxtb	r2, r2
 800239a:	40d3      	lsrs	r3, r2
 800239c:	b2db      	uxtb	r3, r3
 800239e:	3301      	adds	r3, #1
 80023a0:	b2da      	uxtb	r2, r3
 80023a2:	4b48      	ldr	r3, [pc, #288]	; (80024c4 <HW_TS_Init+0x194>)
 80023a4:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80023a6:	4b45      	ldr	r3, [pc, #276]	; (80024bc <HW_TS_Init+0x18c>)
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	3301      	adds	r3, #1
 80023b4:	b29a      	uxth	r2, r3
 80023b6:	4b44      	ldr	r3, [pc, #272]	; (80024c8 <HW_TS_Init+0x198>)
 80023b8:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80023ba:	4b43      	ldr	r3, [pc, #268]	; (80024c8 <HW_TS_Init+0x198>)
 80023bc:	881b      	ldrh	r3, [r3, #0]
 80023be:	3b01      	subs	r3, #1
 80023c0:	4a40      	ldr	r2, [pc, #256]	; (80024c4 <HW_TS_Init+0x194>)
 80023c2:	7812      	ldrb	r2, [r2, #0]
 80023c4:	fb02 f303 	mul.w	r3, r2, r3
 80023c8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80023cc:	4a3c      	ldr	r2, [pc, #240]	; (80024c0 <HW_TS_Init+0x190>)
 80023ce:	7812      	ldrb	r2, [r2, #0]
 80023d0:	40d3      	lsrs	r3, r2
 80023d2:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80023da:	4293      	cmp	r3, r2
 80023dc:	d904      	bls.n	80023e8 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80023de:	4b3b      	ldr	r3, [pc, #236]	; (80024cc <HW_TS_Init+0x19c>)
 80023e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023e4:	801a      	strh	r2, [r3, #0]
 80023e6:	e003      	b.n	80023f0 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	b29a      	uxth	r2, r3
 80023ec:	4b37      	ldr	r3, [pc, #220]	; (80024cc <HW_TS_Init+0x19c>)
 80023ee:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80023f0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80023f4:	f7ff fb9c 	bl	8001b30 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80023f8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80023fc:	f7ff fb84 	bl	8001b08 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8002400:	79fb      	ldrb	r3, [r7, #7]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d13d      	bne.n	8002482 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002406:	4b32      	ldr	r3, [pc, #200]	; (80024d0 <HW_TS_Init+0x1a0>)
 8002408:	2201      	movs	r2, #1
 800240a:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800240c:	4b31      	ldr	r3, [pc, #196]	; (80024d4 <HW_TS_Init+0x1a4>)
 800240e:	f04f 32ff 	mov.w	r2, #4294967295
 8002412:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002414:	2300      	movs	r3, #0
 8002416:	77fb      	strb	r3, [r7, #31]
 8002418:	e00c      	b.n	8002434 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 800241a:	7ffa      	ldrb	r2, [r7, #31]
 800241c:	492e      	ldr	r1, [pc, #184]	; (80024d8 <HW_TS_Init+0x1a8>)
 800241e:	4613      	mov	r3, r2
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	4413      	add	r3, r2
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	440b      	add	r3, r1
 8002428:	330c      	adds	r3, #12
 800242a:	2200      	movs	r2, #0
 800242c:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800242e:	7ffb      	ldrb	r3, [r7, #31]
 8002430:	3301      	adds	r3, #1
 8002432:	77fb      	strb	r3, [r7, #31]
 8002434:	7ffb      	ldrb	r3, [r7, #31]
 8002436:	2b05      	cmp	r3, #5
 8002438:	d9ef      	bls.n	800241a <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800243a:	4b28      	ldr	r3, [pc, #160]	; (80024dc <HW_TS_Init+0x1ac>)
 800243c:	2206      	movs	r2, #6
 800243e:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8002440:	4b1d      	ldr	r3, [pc, #116]	; (80024b8 <HW_TS_Init+0x188>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	689a      	ldr	r2, [r3, #8]
 8002446:	4b1c      	ldr	r3, [pc, #112]	; (80024b8 <HW_TS_Init+0x188>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800244e:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8002450:	4b19      	ldr	r3, [pc, #100]	; (80024b8 <HW_TS_Init+0x188>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	b2da      	uxtb	r2, r3
 8002458:	4b17      	ldr	r3, [pc, #92]	; (80024b8 <HW_TS_Init+0x188>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002460:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8002462:	4b1f      	ldr	r3, [pc, #124]	; (80024e0 <HW_TS_Init+0x1b0>)
 8002464:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002468:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 800246a:	2003      	movs	r0, #3
 800246c:	f002 ffe9 	bl	8005442 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8002470:	4b11      	ldr	r3, [pc, #68]	; (80024b8 <HW_TS_Init+0x188>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	689a      	ldr	r2, [r3, #8]
 8002476:	4b10      	ldr	r3, [pc, #64]	; (80024b8 <HW_TS_Init+0x188>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800247e:	609a      	str	r2, [r3, #8]
 8002480:	e009      	b.n	8002496 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8002482:	4b0d      	ldr	r3, [pc, #52]	; (80024b8 <HW_TS_Init+0x188>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800248c:	2b00      	cmp	r3, #0
 800248e:	d002      	beq.n	8002496 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8002490:	2003      	movs	r0, #3
 8002492:	f002 ffc8 	bl	8005426 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002496:	4b08      	ldr	r3, [pc, #32]	; (80024b8 <HW_TS_Init+0x188>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	22ff      	movs	r2, #255	; 0xff
 800249c:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 800249e:	2200      	movs	r2, #0
 80024a0:	2103      	movs	r1, #3
 80024a2:	2003      	movs	r0, #3
 80024a4:	f002 ff7d 	bl	80053a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80024a8:	2003      	movs	r0, #3
 80024aa:	f002 ff94 	bl	80053d6 <HAL_NVIC_EnableIRQ>

  return;
 80024ae:	bf00      	nop
}
 80024b0:	3720      	adds	r7, #32
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	2000067c 	.word	0x2000067c
 80024bc:	40002800 	.word	0x40002800
 80024c0:	2000042d 	.word	0x2000042d
 80024c4:	2000042e 	.word	0x2000042e
 80024c8:	20000430 	.word	0x20000430
 80024cc:	20000432 	.word	0x20000432
 80024d0:	2000042c 	.word	0x2000042c
 80024d4:	20000428 	.word	0x20000428
 80024d8:	20000394 	.word	0x20000394
 80024dc:	20000424 	.word	0x20000424
 80024e0:	58000800 	.word	0x58000800

080024e4 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b08b      	sub	sp, #44	; 0x2c
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	603b      	str	r3, [r7, #0]
 80024f0:	4613      	mov	r3, r2
 80024f2:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 80024f4:	2300      	movs	r3, #0
 80024f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024fa:	f3ef 8310 	mrs	r3, PRIMASK
 80024fe:	61fb      	str	r3, [r7, #28]
  return(result);
 8002500:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002502:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8002504:	b672      	cpsid	i
}
 8002506:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8002508:	e004      	b.n	8002514 <HW_TS_Create+0x30>
  {
    loop++;
 800250a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800250e:	3301      	adds	r3, #1
 8002510:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8002514:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002518:	2b05      	cmp	r3, #5
 800251a:	d80c      	bhi.n	8002536 <HW_TS_Create+0x52>
 800251c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002520:	492c      	ldr	r1, [pc, #176]	; (80025d4 <HW_TS_Create+0xf0>)
 8002522:	4613      	mov	r3, r2
 8002524:	005b      	lsls	r3, r3, #1
 8002526:	4413      	add	r3, r2
 8002528:	00db      	lsls	r3, r3, #3
 800252a:	440b      	add	r3, r1
 800252c:	330c      	adds	r3, #12
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b00      	cmp	r3, #0
 8002534:	d1e9      	bne.n	800250a <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002536:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800253a:	2b06      	cmp	r3, #6
 800253c:	d038      	beq.n	80025b0 <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 800253e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002542:	4924      	ldr	r1, [pc, #144]	; (80025d4 <HW_TS_Create+0xf0>)
 8002544:	4613      	mov	r3, r2
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	4413      	add	r3, r2
 800254a:	00db      	lsls	r3, r3, #3
 800254c:	440b      	add	r3, r1
 800254e:	330c      	adds	r3, #12
 8002550:	2201      	movs	r2, #1
 8002552:	701a      	strb	r2, [r3, #0]
 8002554:	6a3b      	ldr	r3, [r7, #32]
 8002556:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	f383 8810 	msr	PRIMASK, r3
}
 800255e:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8002560:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002564:	491b      	ldr	r1, [pc, #108]	; (80025d4 <HW_TS_Create+0xf0>)
 8002566:	4613      	mov	r3, r2
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	4413      	add	r3, r2
 800256c:	00db      	lsls	r3, r3, #3
 800256e:	440b      	add	r3, r1
 8002570:	3310      	adds	r3, #16
 8002572:	68fa      	ldr	r2, [r7, #12]
 8002574:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 8002576:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800257a:	4916      	ldr	r1, [pc, #88]	; (80025d4 <HW_TS_Create+0xf0>)
 800257c:	4613      	mov	r3, r2
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	4413      	add	r3, r2
 8002582:	00db      	lsls	r3, r3, #3
 8002584:	440b      	add	r3, r1
 8002586:	330d      	adds	r3, #13
 8002588:	79fa      	ldrb	r2, [r7, #7]
 800258a:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 800258c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002590:	4910      	ldr	r1, [pc, #64]	; (80025d4 <HW_TS_Create+0xf0>)
 8002592:	4613      	mov	r3, r2
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	4413      	add	r3, r2
 8002598:	00db      	lsls	r3, r3, #3
 800259a:	440b      	add	r3, r1
 800259c:	683a      	ldr	r2, [r7, #0]
 800259e:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80025a6:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 80025a8:	2300      	movs	r3, #0
 80025aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80025ae:	e008      	b.n	80025c2 <HW_TS_Create+0xde>
 80025b0:	6a3b      	ldr	r3, [r7, #32]
 80025b2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	f383 8810 	msr	PRIMASK, r3
}
 80025ba:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 80025bc:	2301      	movs	r3, #1
 80025be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 80025c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	372c      	adds	r7, #44	; 0x2c
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	20000394 	.word	0x20000394

080025d8 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b086      	sub	sp, #24
 80025dc:	af00      	add	r7, sp, #0
 80025de:	4603      	mov	r3, r0
 80025e0:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025e2:	f3ef 8310 	mrs	r3, PRIMASK
 80025e6:	60fb      	str	r3, [r7, #12]
  return(result);
 80025e8:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80025ea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80025ec:	b672      	cpsid	i
}
 80025ee:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80025f0:	2003      	movs	r0, #3
 80025f2:	f002 fefe 	bl	80053f2 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80025f6:	4b34      	ldr	r3, [pc, #208]	; (80026c8 <HW_TS_Stop+0xf0>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	22ca      	movs	r2, #202	; 0xca
 80025fc:	625a      	str	r2, [r3, #36]	; 0x24
 80025fe:	4b32      	ldr	r3, [pc, #200]	; (80026c8 <HW_TS_Stop+0xf0>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2253      	movs	r2, #83	; 0x53
 8002604:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002606:	79fa      	ldrb	r2, [r7, #7]
 8002608:	4930      	ldr	r1, [pc, #192]	; (80026cc <HW_TS_Stop+0xf4>)
 800260a:	4613      	mov	r3, r2
 800260c:	005b      	lsls	r3, r3, #1
 800260e:	4413      	add	r3, r2
 8002610:	00db      	lsls	r3, r3, #3
 8002612:	440b      	add	r3, r1
 8002614:	330c      	adds	r3, #12
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b02      	cmp	r3, #2
 800261c:	d142      	bne.n	80026a4 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 800261e:	79fb      	ldrb	r3, [r7, #7]
 8002620:	2100      	movs	r1, #0
 8002622:	4618      	mov	r0, r3
 8002624:	f7ff fc06 	bl	8001e34 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8002628:	4b29      	ldr	r3, [pc, #164]	; (80026d0 <HW_TS_Stop+0xf8>)
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800262e:	7cfb      	ldrb	r3, [r7, #19]
 8002630:	2b06      	cmp	r3, #6
 8002632:	d12f      	bne.n	8002694 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8002634:	4b27      	ldr	r3, [pc, #156]	; (80026d4 <HW_TS_Stop+0xfc>)
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800263c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002640:	d107      	bne.n	8002652 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8002642:	bf00      	nop
 8002644:	4b20      	ldr	r3, [pc, #128]	; (80026c8 <HW_TS_Stop+0xf0>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	f003 0304 	and.w	r3, r3, #4
 800264e:	2b00      	cmp	r3, #0
 8002650:	d1f8      	bne.n	8002644 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8002652:	4b1d      	ldr	r3, [pc, #116]	; (80026c8 <HW_TS_Stop+0xf0>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	689a      	ldr	r2, [r3, #8]
 8002658:	4b1b      	ldr	r3, [pc, #108]	; (80026c8 <HW_TS_Stop+0xf0>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002660:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002662:	bf00      	nop
 8002664:	4b18      	ldr	r3, [pc, #96]	; (80026c8 <HW_TS_Stop+0xf0>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	f003 0304 	and.w	r3, r3, #4
 800266e:	2b00      	cmp	r3, #0
 8002670:	d0f8      	beq.n	8002664 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002672:	4b15      	ldr	r3, [pc, #84]	; (80026c8 <HW_TS_Stop+0xf0>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	b2da      	uxtb	r2, r3
 800267a:	4b13      	ldr	r3, [pc, #76]	; (80026c8 <HW_TS_Stop+0xf0>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002682:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002684:	4b14      	ldr	r3, [pc, #80]	; (80026d8 <HW_TS_Stop+0x100>)
 8002686:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800268a:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800268c:	2003      	movs	r0, #3
 800268e:	f002 fed8 	bl	8005442 <HAL_NVIC_ClearPendingIRQ>
 8002692:	e007      	b.n	80026a4 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8002694:	4b11      	ldr	r3, [pc, #68]	; (80026dc <HW_TS_Stop+0x104>)
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	b2db      	uxtb	r3, r3
 800269a:	7cfa      	ldrb	r2, [r7, #19]
 800269c:	429a      	cmp	r2, r3
 800269e:	d001      	beq.n	80026a4 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 80026a0:	f7ff fce4 	bl	800206c <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80026a4:	4b08      	ldr	r3, [pc, #32]	; (80026c8 <HW_TS_Stop+0xf0>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	22ff      	movs	r2, #255	; 0xff
 80026aa:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80026ac:	2003      	movs	r0, #3
 80026ae:	f002 fe92 	bl	80053d6 <HAL_NVIC_EnableIRQ>
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	f383 8810 	msr	PRIMASK, r3
}
 80026bc:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80026be:	bf00      	nop
}
 80026c0:	3718      	adds	r7, #24
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	2000067c 	.word	0x2000067c
 80026cc:	20000394 	.word	0x20000394
 80026d0:	20000424 	.word	0x20000424
 80026d4:	40002800 	.word	0x40002800
 80026d8:	58000800 	.word	0x58000800
 80026dc:	20000425 	.word	0x20000425

080026e0 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b086      	sub	sp, #24
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	4603      	mov	r3, r0
 80026e8:	6039      	str	r1, [r7, #0]
 80026ea:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80026ec:	79fa      	ldrb	r2, [r7, #7]
 80026ee:	493b      	ldr	r1, [pc, #236]	; (80027dc <HW_TS_Start+0xfc>)
 80026f0:	4613      	mov	r3, r2
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	4413      	add	r3, r2
 80026f6:	00db      	lsls	r3, r3, #3
 80026f8:	440b      	add	r3, r1
 80026fa:	330c      	adds	r3, #12
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	2b02      	cmp	r3, #2
 8002702:	d103      	bne.n	800270c <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8002704:	79fb      	ldrb	r3, [r7, #7]
 8002706:	4618      	mov	r0, r3
 8002708:	f7ff ff66 	bl	80025d8 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800270c:	f3ef 8310 	mrs	r3, PRIMASK
 8002710:	60fb      	str	r3, [r7, #12]
  return(result);
 8002712:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002714:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002716:	b672      	cpsid	i
}
 8002718:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800271a:	2003      	movs	r0, #3
 800271c:	f002 fe69 	bl	80053f2 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002720:	4b2f      	ldr	r3, [pc, #188]	; (80027e0 <HW_TS_Start+0x100>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	22ca      	movs	r2, #202	; 0xca
 8002726:	625a      	str	r2, [r3, #36]	; 0x24
 8002728:	4b2d      	ldr	r3, [pc, #180]	; (80027e0 <HW_TS_Start+0x100>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2253      	movs	r2, #83	; 0x53
 800272e:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8002730:	79fa      	ldrb	r2, [r7, #7]
 8002732:	492a      	ldr	r1, [pc, #168]	; (80027dc <HW_TS_Start+0xfc>)
 8002734:	4613      	mov	r3, r2
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	4413      	add	r3, r2
 800273a:	00db      	lsls	r3, r3, #3
 800273c:	440b      	add	r3, r1
 800273e:	330c      	adds	r3, #12
 8002740:	2202      	movs	r2, #2
 8002742:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8002744:	79fa      	ldrb	r2, [r7, #7]
 8002746:	4925      	ldr	r1, [pc, #148]	; (80027dc <HW_TS_Start+0xfc>)
 8002748:	4613      	mov	r3, r2
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	4413      	add	r3, r2
 800274e:	00db      	lsls	r3, r3, #3
 8002750:	440b      	add	r3, r1
 8002752:	3308      	adds	r3, #8
 8002754:	683a      	ldr	r2, [r7, #0]
 8002756:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8002758:	79fa      	ldrb	r2, [r7, #7]
 800275a:	4920      	ldr	r1, [pc, #128]	; (80027dc <HW_TS_Start+0xfc>)
 800275c:	4613      	mov	r3, r2
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	4413      	add	r3, r2
 8002762:	00db      	lsls	r3, r3, #3
 8002764:	440b      	add	r3, r1
 8002766:	3304      	adds	r3, #4
 8002768:	683a      	ldr	r2, [r7, #0]
 800276a:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 800276c:	79fb      	ldrb	r3, [r7, #7]
 800276e:	4618      	mov	r0, r3
 8002770:	f7ff fab6 	bl	8001ce0 <linkTimer>
 8002774:	4603      	mov	r3, r0
 8002776:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8002778:	4b1a      	ldr	r3, [pc, #104]	; (80027e4 <HW_TS_Start+0x104>)
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800277e:	4b1a      	ldr	r3, [pc, #104]	; (80027e8 <HW_TS_Start+0x108>)
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	b2db      	uxtb	r3, r3
 8002784:	7c7a      	ldrb	r2, [r7, #17]
 8002786:	429a      	cmp	r2, r3
 8002788:	d002      	beq.n	8002790 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 800278a:	f7ff fc6f 	bl	800206c <RescheduleTimerList>
 800278e:	e013      	b.n	80027b8 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8002790:	79fa      	ldrb	r2, [r7, #7]
 8002792:	4912      	ldr	r1, [pc, #72]	; (80027dc <HW_TS_Start+0xfc>)
 8002794:	4613      	mov	r3, r2
 8002796:	005b      	lsls	r3, r3, #1
 8002798:	4413      	add	r3, r2
 800279a:	00db      	lsls	r3, r3, #3
 800279c:	440b      	add	r3, r1
 800279e:	3308      	adds	r3, #8
 80027a0:	6819      	ldr	r1, [r3, #0]
 80027a2:	8a7b      	ldrh	r3, [r7, #18]
 80027a4:	79fa      	ldrb	r2, [r7, #7]
 80027a6:	1ac9      	subs	r1, r1, r3
 80027a8:	480c      	ldr	r0, [pc, #48]	; (80027dc <HW_TS_Start+0xfc>)
 80027aa:	4613      	mov	r3, r2
 80027ac:	005b      	lsls	r3, r3, #1
 80027ae:	4413      	add	r3, r2
 80027b0:	00db      	lsls	r3, r3, #3
 80027b2:	4403      	add	r3, r0
 80027b4:	3308      	adds	r3, #8
 80027b6:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80027b8:	4b09      	ldr	r3, [pc, #36]	; (80027e0 <HW_TS_Start+0x100>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	22ff      	movs	r2, #255	; 0xff
 80027be:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80027c0:	2003      	movs	r0, #3
 80027c2:	f002 fe08 	bl	80053d6 <HAL_NVIC_EnableIRQ>
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	f383 8810 	msr	PRIMASK, r3
}
 80027d0:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80027d2:	bf00      	nop
}
 80027d4:	3718      	adds	r7, #24
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	20000394 	.word	0x20000394
 80027e0:	2000067c 	.word	0x2000067c
 80027e4:	20000424 	.word	0x20000424
 80027e8:	20000425 	.word	0x20000425

080027ec <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	460b      	mov	r3, r1
 80027f6:	607a      	str	r2, [r7, #4]
 80027f8:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4798      	blx	r3

  return;
 80027fe:	bf00      	nop
}
 8002800:	3710      	adds	r7, #16
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <HW_UART_Init>:
    void (*HW_hlpuart1RxCb)(void);
    void (*HW_hlpuart1TxCb)(void);
#endif

void HW_UART_Init(hw_uart_id_t hw_uart_id)
{
 8002806:	b580      	push	{r7, lr}
 8002808:	b082      	sub	sp, #8
 800280a:	af00      	add	r7, sp, #0
 800280c:	4603      	mov	r3, r0
 800280e:	71fb      	strb	r3, [r7, #7]
  switch (hw_uart_id)
 8002810:	79fb      	ldrb	r3, [r7, #7]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d002      	beq.n	800281c <HW_UART_Init+0x16>
 8002816:	2b02      	cmp	r3, #2
 8002818:	d003      	beq.n	8002822 <HW_UART_Init+0x1c>
      MX_LPUART1_UART_Init();
      break;
#endif

    default:
      break;
 800281a:	e005      	b.n	8002828 <HW_UART_Init+0x22>
      MX_USART1_UART_Init();
 800281c:	f000 fa92 	bl	8002d44 <MX_USART1_UART_Init>
      break;
 8002820:	e002      	b.n	8002828 <HW_UART_Init+0x22>
      MX_LPUART1_UART_Init();
 8002822:	f000 fa43 	bl	8002cac <MX_LPUART1_UART_Init>
      break;
 8002826:	bf00      	nop
  }
  return;
 8002828:	bf00      	nop
}
 800282a:	3708      	adds	r7, #8
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <HW_UART_Receive_IT>:

void HW_UART_Receive_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	60b9      	str	r1, [r7, #8]
 8002838:	607b      	str	r3, [r7, #4]
 800283a:	4603      	mov	r3, r0
 800283c:	73fb      	strb	r3, [r7, #15]
 800283e:	4613      	mov	r3, r2
 8002840:	81bb      	strh	r3, [r7, #12]
  switch (hw_uart_id)
 8002842:	7bfb      	ldrb	r3, [r7, #15]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d002      	beq.n	800284e <HW_UART_Receive_IT+0x1e>
 8002848:	2b02      	cmp	r3, #2
 800284a:	d00d      	beq.n	8002868 <HW_UART_Receive_IT+0x38>
      HW_UART_RX_IT(hlpuart1, LPUART1);
      break;
#endif

    default:
      break;
 800284c:	e019      	b.n	8002882 <HW_UART_Receive_IT+0x52>
      HW_UART_RX_IT(huart1, USART1);
 800284e:	4a0f      	ldr	r2, [pc, #60]	; (800288c <HW_UART_Receive_IT+0x5c>)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6013      	str	r3, [r2, #0]
 8002854:	4b0e      	ldr	r3, [pc, #56]	; (8002890 <HW_UART_Receive_IT+0x60>)
 8002856:	4a0f      	ldr	r2, [pc, #60]	; (8002894 <HW_UART_Receive_IT+0x64>)
 8002858:	601a      	str	r2, [r3, #0]
 800285a:	89bb      	ldrh	r3, [r7, #12]
 800285c:	461a      	mov	r2, r3
 800285e:	68b9      	ldr	r1, [r7, #8]
 8002860:	480b      	ldr	r0, [pc, #44]	; (8002890 <HW_UART_Receive_IT+0x60>)
 8002862:	f005 fc97 	bl	8008194 <HAL_UART_Receive_IT>
      break;
 8002866:	e00c      	b.n	8002882 <HW_UART_Receive_IT+0x52>
      HW_UART_RX_IT(hlpuart1, LPUART1);
 8002868:	4a0b      	ldr	r2, [pc, #44]	; (8002898 <HW_UART_Receive_IT+0x68>)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6013      	str	r3, [r2, #0]
 800286e:	4b0b      	ldr	r3, [pc, #44]	; (800289c <HW_UART_Receive_IT+0x6c>)
 8002870:	4a0b      	ldr	r2, [pc, #44]	; (80028a0 <HW_UART_Receive_IT+0x70>)
 8002872:	601a      	str	r2, [r3, #0]
 8002874:	89bb      	ldrh	r3, [r7, #12]
 8002876:	461a      	mov	r2, r3
 8002878:	68b9      	ldr	r1, [r7, #8]
 800287a:	4808      	ldr	r0, [pc, #32]	; (800289c <HW_UART_Receive_IT+0x6c>)
 800287c:	f005 fc8a 	bl	8008194 <HAL_UART_Receive_IT>
      break;
 8002880:	bf00      	nop
  }

  return;
 8002882:	bf00      	nop
}
 8002884:	3710      	adds	r7, #16
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	20000434 	.word	0x20000434
 8002890:	20000514 	.word	0x20000514
 8002894:	40013800 	.word	0x40013800
 8002898:	2000043c 	.word	0x2000043c
 800289c:	20000480 	.word	0x20000480
 80028a0:	40008000 	.word	0x40008000

080028a4 <HW_UART_Transmit>:

  return;
}

hw_status_t HW_UART_Transmit(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size,  uint32_t timeout)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b086      	sub	sp, #24
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60b9      	str	r1, [r7, #8]
 80028ac:	607b      	str	r3, [r7, #4]
 80028ae:	4603      	mov	r3, r0
 80028b0:	73fb      	strb	r3, [r7, #15]
 80028b2:	4613      	mov	r3, r2
 80028b4:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 80028b6:	2300      	movs	r3, #0
 80028b8:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 80028ba:	2300      	movs	r3, #0
 80028bc:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 80028be:	7bfb      	ldrb	r3, [r7, #15]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d002      	beq.n	80028ca <HW_UART_Transmit+0x26>
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d00c      	beq.n	80028e2 <HW_UART_Transmit+0x3e>
            HW_UART_TX(hlpuart1, LPUART1);
            break;
#endif

        default:
            break;
 80028c8:	e017      	b.n	80028fa <HW_UART_Transmit+0x56>
            HW_UART_TX(huart1, USART1);
 80028ca:	4b1c      	ldr	r3, [pc, #112]	; (800293c <HW_UART_Transmit+0x98>)
 80028cc:	4a1c      	ldr	r2, [pc, #112]	; (8002940 <HW_UART_Transmit+0x9c>)
 80028ce:	601a      	str	r2, [r3, #0]
 80028d0:	89ba      	ldrh	r2, [r7, #12]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	68b9      	ldr	r1, [r7, #8]
 80028d6:	4819      	ldr	r0, [pc, #100]	; (800293c <HW_UART_Transmit+0x98>)
 80028d8:	f005 fbce 	bl	8008078 <HAL_UART_Transmit>
 80028dc:	4603      	mov	r3, r0
 80028de:	75fb      	strb	r3, [r7, #23]
            break;
 80028e0:	e00b      	b.n	80028fa <HW_UART_Transmit+0x56>
            HW_UART_TX(hlpuart1, LPUART1);
 80028e2:	4b18      	ldr	r3, [pc, #96]	; (8002944 <HW_UART_Transmit+0xa0>)
 80028e4:	4a18      	ldr	r2, [pc, #96]	; (8002948 <HW_UART_Transmit+0xa4>)
 80028e6:	601a      	str	r2, [r3, #0]
 80028e8:	89ba      	ldrh	r2, [r7, #12]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	68b9      	ldr	r1, [r7, #8]
 80028ee:	4815      	ldr	r0, [pc, #84]	; (8002944 <HW_UART_Transmit+0xa0>)
 80028f0:	f005 fbc2 	bl	8008078 <HAL_UART_Transmit>
 80028f4:	4603      	mov	r3, r0
 80028f6:	75fb      	strb	r3, [r7, #23]
            break;
 80028f8:	bf00      	nop
    }

    switch (hal_status)
 80028fa:	7dfb      	ldrb	r3, [r7, #23]
 80028fc:	2b03      	cmp	r3, #3
 80028fe:	d817      	bhi.n	8002930 <HW_UART_Transmit+0x8c>
 8002900:	a201      	add	r2, pc, #4	; (adr r2, 8002908 <HW_UART_Transmit+0x64>)
 8002902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002906:	bf00      	nop
 8002908:	08002919 	.word	0x08002919
 800290c:	0800291f 	.word	0x0800291f
 8002910:	08002925 	.word	0x08002925
 8002914:	0800292b 	.word	0x0800292b
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 8002918:	2300      	movs	r3, #0
 800291a:	75bb      	strb	r3, [r7, #22]
            break;
 800291c:	e009      	b.n	8002932 <HW_UART_Transmit+0x8e>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 800291e:	2301      	movs	r3, #1
 8002920:	75bb      	strb	r3, [r7, #22]
            break;
 8002922:	e006      	b.n	8002932 <HW_UART_Transmit+0x8e>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 8002924:	2302      	movs	r3, #2
 8002926:	75bb      	strb	r3, [r7, #22]
            break;
 8002928:	e003      	b.n	8002932 <HW_UART_Transmit+0x8e>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 800292a:	2303      	movs	r3, #3
 800292c:	75bb      	strb	r3, [r7, #22]
            break;
 800292e:	e000      	b.n	8002932 <HW_UART_Transmit+0x8e>

        default:
            break;
 8002930:	bf00      	nop
    }

    return hw_status;
 8002932:	7dbb      	ldrb	r3, [r7, #22]
}
 8002934:	4618      	mov	r0, r3
 8002936:	3718      	adds	r7, #24
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	20000514 	.word	0x20000514
 8002940:	40013800 	.word	0x40013800
 8002944:	20000480 	.word	0x20000480
 8002948:	40008000 	.word	0x40008000

0800294c <HW_UART_Transmit_DMA>:

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b086      	sub	sp, #24
 8002950:	af00      	add	r7, sp, #0
 8002952:	60b9      	str	r1, [r7, #8]
 8002954:	607b      	str	r3, [r7, #4]
 8002956:	4603      	mov	r3, r0
 8002958:	73fb      	strb	r3, [r7, #15]
 800295a:	4613      	mov	r3, r2
 800295c:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 800295e:	2300      	movs	r3, #0
 8002960:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 8002962:	2300      	movs	r3, #0
 8002964:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 8002966:	7bfb      	ldrb	r3, [r7, #15]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d002      	beq.n	8002972 <HW_UART_Transmit_DMA+0x26>
 800296c:	2b02      	cmp	r3, #2
 800296e:	d00f      	beq.n	8002990 <HW_UART_Transmit_DMA+0x44>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 8002970:	e01d      	b.n	80029ae <HW_UART_Transmit_DMA+0x62>
            HW_huart1TxCb = cb;
 8002972:	4a1f      	ldr	r2, [pc, #124]	; (80029f0 <HW_UART_Transmit_DMA+0xa4>)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 8002978:	4b1e      	ldr	r3, [pc, #120]	; (80029f4 <HW_UART_Transmit_DMA+0xa8>)
 800297a:	4a1f      	ldr	r2, [pc, #124]	; (80029f8 <HW_UART_Transmit_DMA+0xac>)
 800297c:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 800297e:	89bb      	ldrh	r3, [r7, #12]
 8002980:	461a      	mov	r2, r3
 8002982:	68b9      	ldr	r1, [r7, #8]
 8002984:	481b      	ldr	r0, [pc, #108]	; (80029f4 <HW_UART_Transmit_DMA+0xa8>)
 8002986:	f005 fc51 	bl	800822c <HAL_UART_Transmit_DMA>
 800298a:	4603      	mov	r3, r0
 800298c:	75fb      	strb	r3, [r7, #23]
            break;
 800298e:	e00e      	b.n	80029ae <HW_UART_Transmit_DMA+0x62>
            HW_hlpuart1TxCb = cb;
 8002990:	4a1a      	ldr	r2, [pc, #104]	; (80029fc <HW_UART_Transmit_DMA+0xb0>)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6013      	str	r3, [r2, #0]
            hlpuart1.Instance = LPUART1;
 8002996:	4b1a      	ldr	r3, [pc, #104]	; (8002a00 <HW_UART_Transmit_DMA+0xb4>)
 8002998:	4a1a      	ldr	r2, [pc, #104]	; (8002a04 <HW_UART_Transmit_DMA+0xb8>)
 800299a:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
 800299c:	89bb      	ldrh	r3, [r7, #12]
 800299e:	461a      	mov	r2, r3
 80029a0:	68b9      	ldr	r1, [r7, #8]
 80029a2:	4817      	ldr	r0, [pc, #92]	; (8002a00 <HW_UART_Transmit_DMA+0xb4>)
 80029a4:	f005 fc42 	bl	800822c <HAL_UART_Transmit_DMA>
 80029a8:	4603      	mov	r3, r0
 80029aa:	75fb      	strb	r3, [r7, #23]
            break;
 80029ac:	bf00      	nop
    }

    switch (hal_status)
 80029ae:	7dfb      	ldrb	r3, [r7, #23]
 80029b0:	2b03      	cmp	r3, #3
 80029b2:	d817      	bhi.n	80029e4 <HW_UART_Transmit_DMA+0x98>
 80029b4:	a201      	add	r2, pc, #4	; (adr r2, 80029bc <HW_UART_Transmit_DMA+0x70>)
 80029b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029ba:	bf00      	nop
 80029bc:	080029cd 	.word	0x080029cd
 80029c0:	080029d3 	.word	0x080029d3
 80029c4:	080029d9 	.word	0x080029d9
 80029c8:	080029df 	.word	0x080029df
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 80029cc:	2300      	movs	r3, #0
 80029ce:	75bb      	strb	r3, [r7, #22]
            break;
 80029d0:	e009      	b.n	80029e6 <HW_UART_Transmit_DMA+0x9a>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 80029d2:	2301      	movs	r3, #1
 80029d4:	75bb      	strb	r3, [r7, #22]
            break;
 80029d6:	e006      	b.n	80029e6 <HW_UART_Transmit_DMA+0x9a>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 80029d8:	2302      	movs	r3, #2
 80029da:	75bb      	strb	r3, [r7, #22]
            break;
 80029dc:	e003      	b.n	80029e6 <HW_UART_Transmit_DMA+0x9a>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 80029de:	2303      	movs	r3, #3
 80029e0:	75bb      	strb	r3, [r7, #22]
            break;
 80029e2:	e000      	b.n	80029e6 <HW_UART_Transmit_DMA+0x9a>

        default:
            break;
 80029e4:	bf00      	nop
    }

    return hw_status;
 80029e6:	7dbb      	ldrb	r3, [r7, #22]
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3718      	adds	r7, #24
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	20000438 	.word	0x20000438
 80029f4:	20000514 	.word	0x20000514
 80029f8:	40013800 	.word	0x40013800
 80029fc:	20000440 	.word	0x20000440
 8002a00:	20000480 	.word	0x20000480
 8002a04:	40008000 	.word	0x40008000

08002a08 <HAL_UART_RxCpltCallback>:

    return;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a0f      	ldr	r2, [pc, #60]	; (8002a54 <HAL_UART_RxCpltCallback+0x4c>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d00a      	beq.n	8002a30 <HAL_UART_RxCpltCallback+0x28>
 8002a1a:	4a0f      	ldr	r2, [pc, #60]	; (8002a58 <HAL_UART_RxCpltCallback+0x50>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d10f      	bne.n	8002a40 <HAL_UART_RxCpltCallback+0x38>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1RxCb)
 8002a20:	4b0e      	ldr	r3, [pc, #56]	; (8002a5c <HAL_UART_RxCpltCallback+0x54>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d00d      	beq.n	8002a44 <HAL_UART_RxCpltCallback+0x3c>
            {
                HW_huart1RxCb();
 8002a28:	4b0c      	ldr	r3, [pc, #48]	; (8002a5c <HAL_UART_RxCpltCallback+0x54>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4798      	blx	r3
            }
            break;
 8002a2e:	e009      	b.n	8002a44 <HAL_UART_RxCpltCallback+0x3c>
#endif

#if (CFG_HW_LPUART1_ENABLED == 1)
        case (uint32_t)LPUART1:
            if(HW_hlpuart1RxCb)
 8002a30:	4b0b      	ldr	r3, [pc, #44]	; (8002a60 <HAL_UART_RxCpltCallback+0x58>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d007      	beq.n	8002a48 <HAL_UART_RxCpltCallback+0x40>
            {
                HW_hlpuart1RxCb();
 8002a38:	4b09      	ldr	r3, [pc, #36]	; (8002a60 <HAL_UART_RxCpltCallback+0x58>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4798      	blx	r3
            }
            break;
 8002a3e:	e003      	b.n	8002a48 <HAL_UART_RxCpltCallback+0x40>
#endif

        default:
            break;
 8002a40:	bf00      	nop
 8002a42:	e002      	b.n	8002a4a <HAL_UART_RxCpltCallback+0x42>
            break;
 8002a44:	bf00      	nop
 8002a46:	e000      	b.n	8002a4a <HAL_UART_RxCpltCallback+0x42>
            break;
 8002a48:	bf00      	nop
    }

    return;
 8002a4a:	bf00      	nop
}
 8002a4c:	3708      	adds	r7, #8
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	40008000 	.word	0x40008000
 8002a58:	40013800 	.word	0x40013800
 8002a5c:	20000434 	.word	0x20000434
 8002a60:	2000043c 	.word	0x2000043c

08002a64 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a0f      	ldr	r2, [pc, #60]	; (8002ab0 <HAL_UART_TxCpltCallback+0x4c>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d00a      	beq.n	8002a8c <HAL_UART_TxCpltCallback+0x28>
 8002a76:	4a0f      	ldr	r2, [pc, #60]	; (8002ab4 <HAL_UART_TxCpltCallback+0x50>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d10f      	bne.n	8002a9c <HAL_UART_TxCpltCallback+0x38>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 8002a7c:	4b0e      	ldr	r3, [pc, #56]	; (8002ab8 <HAL_UART_TxCpltCallback+0x54>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d00d      	beq.n	8002aa0 <HAL_UART_TxCpltCallback+0x3c>
            {
                HW_huart1TxCb();
 8002a84:	4b0c      	ldr	r3, [pc, #48]	; (8002ab8 <HAL_UART_TxCpltCallback+0x54>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4798      	blx	r3
            }
            break;
 8002a8a:	e009      	b.n	8002aa0 <HAL_UART_TxCpltCallback+0x3c>
#endif

#if (CFG_HW_LPUART1_ENABLED == 1)
        case (uint32_t)LPUART1:
            if(HW_hlpuart1TxCb)
 8002a8c:	4b0b      	ldr	r3, [pc, #44]	; (8002abc <HAL_UART_TxCpltCallback+0x58>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d007      	beq.n	8002aa4 <HAL_UART_TxCpltCallback+0x40>
            {
                HW_hlpuart1TxCb();
 8002a94:	4b09      	ldr	r3, [pc, #36]	; (8002abc <HAL_UART_TxCpltCallback+0x58>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4798      	blx	r3
            }
            break;
 8002a9a:	e003      	b.n	8002aa4 <HAL_UART_TxCpltCallback+0x40>
#endif

        default:
            break;
 8002a9c:	bf00      	nop
 8002a9e:	e002      	b.n	8002aa6 <HAL_UART_TxCpltCallback+0x42>
            break;
 8002aa0:	bf00      	nop
 8002aa2:	e000      	b.n	8002aa6 <HAL_UART_TxCpltCallback+0x42>
            break;
 8002aa4:	bf00      	nop
    }

    return;
 8002aa6:	bf00      	nop
}
 8002aa8:	3708      	adds	r7, #8
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	40008000 	.word	0x40008000
 8002ab4:	40013800 	.word	0x40013800
 8002ab8:	20000438 	.word	0x20000438
 8002abc:	20000440 	.word	0x20000440

08002ac0 <LL_RCC_LSE_SetDriveCapability>:
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8002ac8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad0:	f023 0218 	bic.w	r2, r3, #24
 8002ad4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002ae0:	bf00      	nop
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <LL_AHB1_GRP1_EnableClock>:
{
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002af4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002af8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002afa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002b04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b08:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002b10:	68fb      	ldr	r3, [r7, #12]
}
 8002b12:	bf00      	nop
 8002b14:	3714      	adds	r7, #20
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr

08002b1e <LL_AHB2_GRP1_EnableClock>:
{
 8002b1e:	b480      	push	{r7}
 8002b20:	b085      	sub	sp, #20
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002b26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002b36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002b42:	68fb      	ldr	r3, [r7, #12]
}
 8002b44:	bf00      	nop
 8002b46:	3714      	adds	r7, #20
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b54:	f002 fa4c 	bl	8004ff0 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8002b58:	f7fe fc92 	bl	8001480 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b5c:	f000 f814 	bl	8002b88 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002b60:	f000 f870 	bl	8002c44 <PeriphCommonClock_Config>

  /* IPCC initialisation */
   MX_IPCC_Init();
 8002b64:	f000 f88e 	bl	8002c84 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b68:	f000 f9a9 	bl	8002ebe <MX_GPIO_Init>
  MX_DMA_Init();
 8002b6c:	f000 f98a 	bl	8002e84 <MX_DMA_Init>
  MX_RF_Init();
 8002b70:	f000 f936 	bl	8002de0 <MX_RF_Init>
  MX_RTC_Init();
 8002b74:	f000 f952 	bl	8002e1c <MX_RTC_Init>
  MX_RNG_Init();
 8002b78:	f000 f93a 	bl	8002df0 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8002b7c:	f7fe fc8e 	bl	800149c <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8002b80:	f7fe fecd 	bl	800191e <MX_APPE_Process>
 8002b84:	e7fc      	b.n	8002b80 <main+0x30>
	...

08002b88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b09a      	sub	sp, #104	; 0x68
 8002b8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b8e:	f107 0320 	add.w	r3, r7, #32
 8002b92:	2248      	movs	r2, #72	; 0x48
 8002b94:	2100      	movs	r1, #0
 8002b96:	4618      	mov	r0, r3
 8002b98:	f00b fe9c 	bl	800e8d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b9c:	1d3b      	adds	r3, r7, #4
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	601a      	str	r2, [r3, #0]
 8002ba2:	605a      	str	r2, [r3, #4]
 8002ba4:	609a      	str	r2, [r3, #8]
 8002ba6:	60da      	str	r2, [r3, #12]
 8002ba8:	611a      	str	r2, [r3, #16]
 8002baa:	615a      	str	r2, [r3, #20]
 8002bac:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002bae:	f003 fa35 	bl	800601c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002bb2:	2000      	movs	r0, #0
 8002bb4:	f7ff ff84 	bl	8002ac0 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bb8:	4b21      	ldr	r3, [pc, #132]	; (8002c40 <SystemClock_Config+0xb8>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002bc0:	4a1f      	ldr	r2, [pc, #124]	; (8002c40 <SystemClock_Config+0xb8>)
 8002bc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bc6:	6013      	str	r3, [r2, #0]
 8002bc8:	4b1d      	ldr	r3, [pc, #116]	; (8002c40 <SystemClock_Config+0xb8>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002bd0:	603b      	str	r3, [r7, #0]
 8002bd2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8002bd4:	2347      	movs	r3, #71	; 0x47
 8002bd6:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002bd8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002bdc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002bde:	2301      	movs	r3, #1
 8002be0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002be2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002be6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002be8:	2301      	movs	r3, #1
 8002bea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002bec:	2340      	movs	r3, #64	; 0x40
 8002bee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002bf4:	f107 0320 	add.w	r3, r7, #32
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f003 fda3 	bl	8006744 <HAL_RCC_OscConfig>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8002c04:	f000 f968 	bl	8002ed8 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8002c08:	236f      	movs	r3, #111	; 0x6f
 8002c0a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c10:	2300      	movs	r3, #0
 8002c12:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002c14:	2300      	movs	r3, #0
 8002c16:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8002c20:	2300      	movs	r3, #0
 8002c22:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002c24:	1d3b      	adds	r3, r7, #4
 8002c26:	2101      	movs	r1, #1
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f004 f8ff 	bl	8006e2c <HAL_RCC_ClockConfig>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d001      	beq.n	8002c38 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8002c34:	f000 f950 	bl	8002ed8 <Error_Handler>
  }
}
 8002c38:	bf00      	nop
 8002c3a:	3768      	adds	r7, #104	; 0x68
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	58000400 	.word	0x58000400

08002c44 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b094      	sub	sp, #80	; 0x50
 8002c48:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c4a:	463b      	mov	r3, r7
 8002c4c:	2250      	movs	r2, #80	; 0x50
 8002c4e:	2100      	movs	r1, #0
 8002c50:	4618      	mov	r0, r3
 8002c52:	f00b fe3f 	bl	800e8d4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8002c56:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002c5a:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8002c5c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002c60:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8002c62:	2302      	movs	r3, #2
 8002c64:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8002c66:	2310      	movs	r3, #16
 8002c68:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c6a:	463b      	mov	r3, r7
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f004 fd1a 	bl	80076a6 <HAL_RCCEx_PeriphCLKConfig>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d001      	beq.n	8002c7c <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8002c78:	f000 f92e 	bl	8002ed8 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8002c7c:	bf00      	nop
 8002c7e:	3750      	adds	r7, #80	; 0x50
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8002c88:	4b06      	ldr	r3, [pc, #24]	; (8002ca4 <MX_IPCC_Init+0x20>)
 8002c8a:	4a07      	ldr	r2, [pc, #28]	; (8002ca8 <MX_IPCC_Init+0x24>)
 8002c8c:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8002c8e:	4805      	ldr	r0, [pc, #20]	; (8002ca4 <MX_IPCC_Init+0x20>)
 8002c90:	f003 f93e 	bl	8005f10 <HAL_IPCC_Init>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d001      	beq.n	8002c9e <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8002c9a:	f000 f91d 	bl	8002ed8 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8002c9e:	bf00      	nop
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	20000444 	.word	0x20000444
 8002ca8:	58000c00 	.word	0x58000c00

08002cac <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_LPUART1_UART_Init(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002cb0:	4b22      	ldr	r3, [pc, #136]	; (8002d3c <MX_LPUART1_UART_Init+0x90>)
 8002cb2:	4a23      	ldr	r2, [pc, #140]	; (8002d40 <MX_LPUART1_UART_Init+0x94>)
 8002cb4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 8002cb6:	4b21      	ldr	r3, [pc, #132]	; (8002d3c <MX_LPUART1_UART_Init+0x90>)
 8002cb8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002cbc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002cbe:	4b1f      	ldr	r3, [pc, #124]	; (8002d3c <MX_LPUART1_UART_Init+0x90>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002cc4:	4b1d      	ldr	r3, [pc, #116]	; (8002d3c <MX_LPUART1_UART_Init+0x90>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002cca:	4b1c      	ldr	r3, [pc, #112]	; (8002d3c <MX_LPUART1_UART_Init+0x90>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002cd0:	4b1a      	ldr	r3, [pc, #104]	; (8002d3c <MX_LPUART1_UART_Init+0x90>)
 8002cd2:	220c      	movs	r2, #12
 8002cd4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cd6:	4b19      	ldr	r3, [pc, #100]	; (8002d3c <MX_LPUART1_UART_Init+0x90>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002cdc:	4b17      	ldr	r3, [pc, #92]	; (8002d3c <MX_LPUART1_UART_Init+0x90>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002ce2:	4b16      	ldr	r3, [pc, #88]	; (8002d3c <MX_LPUART1_UART_Init+0x90>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ce8:	4b14      	ldr	r3, [pc, #80]	; (8002d3c <MX_LPUART1_UART_Init+0x90>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8002cee:	4b13      	ldr	r3, [pc, #76]	; (8002d3c <MX_LPUART1_UART_Init+0x90>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002cf4:	4811      	ldr	r0, [pc, #68]	; (8002d3c <MX_LPUART1_UART_Init+0x90>)
 8002cf6:	f005 f96f 	bl	8007fd8 <HAL_UART_Init>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d001      	beq.n	8002d04 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8002d00:	f000 f8ea 	bl	8002ed8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d04:	2100      	movs	r1, #0
 8002d06:	480d      	ldr	r0, [pc, #52]	; (8002d3c <MX_LPUART1_UART_Init+0x90>)
 8002d08:	f007 fa49 	bl	800a19e <HAL_UARTEx_SetTxFifoThreshold>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d001      	beq.n	8002d16 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002d12:	f000 f8e1 	bl	8002ed8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d16:	2100      	movs	r1, #0
 8002d18:	4808      	ldr	r0, [pc, #32]	; (8002d3c <MX_LPUART1_UART_Init+0x90>)
 8002d1a:	f007 fa7e 	bl	800a21a <HAL_UARTEx_SetRxFifoThreshold>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d001      	beq.n	8002d28 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002d24:	f000 f8d8 	bl	8002ed8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002d28:	4804      	ldr	r0, [pc, #16]	; (8002d3c <MX_LPUART1_UART_Init+0x90>)
 8002d2a:	f007 f9ff 	bl	800a12c <HAL_UARTEx_DisableFifoMode>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d001      	beq.n	8002d38 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002d34:	f000 f8d0 	bl	8002ed8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002d38:	bf00      	nop
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	20000480 	.word	0x20000480
 8002d40:	40008000 	.word	0x40008000

08002d44 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002d48:	4b23      	ldr	r3, [pc, #140]	; (8002dd8 <MX_USART1_UART_Init+0x94>)
 8002d4a:	4a24      	ldr	r2, [pc, #144]	; (8002ddc <MX_USART1_UART_Init+0x98>)
 8002d4c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002d4e:	4b22      	ldr	r3, [pc, #136]	; (8002dd8 <MX_USART1_UART_Init+0x94>)
 8002d50:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002d54:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002d56:	4b20      	ldr	r3, [pc, #128]	; (8002dd8 <MX_USART1_UART_Init+0x94>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002d5c:	4b1e      	ldr	r3, [pc, #120]	; (8002dd8 <MX_USART1_UART_Init+0x94>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002d62:	4b1d      	ldr	r3, [pc, #116]	; (8002dd8 <MX_USART1_UART_Init+0x94>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002d68:	4b1b      	ldr	r3, [pc, #108]	; (8002dd8 <MX_USART1_UART_Init+0x94>)
 8002d6a:	220c      	movs	r2, #12
 8002d6c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d6e:	4b1a      	ldr	r3, [pc, #104]	; (8002dd8 <MX_USART1_UART_Init+0x94>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8002d74:	4b18      	ldr	r3, [pc, #96]	; (8002dd8 <MX_USART1_UART_Init+0x94>)
 8002d76:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002d7a:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d7c:	4b16      	ldr	r3, [pc, #88]	; (8002dd8 <MX_USART1_UART_Init+0x94>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002d82:	4b15      	ldr	r3, [pc, #84]	; (8002dd8 <MX_USART1_UART_Init+0x94>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d88:	4b13      	ldr	r3, [pc, #76]	; (8002dd8 <MX_USART1_UART_Init+0x94>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002d8e:	4812      	ldr	r0, [pc, #72]	; (8002dd8 <MX_USART1_UART_Init+0x94>)
 8002d90:	f005 f922 	bl	8007fd8 <HAL_UART_Init>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8002d9a:	f000 f89d 	bl	8002ed8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d9e:	2100      	movs	r1, #0
 8002da0:	480d      	ldr	r0, [pc, #52]	; (8002dd8 <MX_USART1_UART_Init+0x94>)
 8002da2:	f007 f9fc 	bl	800a19e <HAL_UARTEx_SetTxFifoThreshold>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d001      	beq.n	8002db0 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8002dac:	f000 f894 	bl	8002ed8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002db0:	2100      	movs	r1, #0
 8002db2:	4809      	ldr	r0, [pc, #36]	; (8002dd8 <MX_USART1_UART_Init+0x94>)
 8002db4:	f007 fa31 	bl	800a21a <HAL_UARTEx_SetRxFifoThreshold>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8002dbe:	f000 f88b 	bl	8002ed8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002dc2:	4805      	ldr	r0, [pc, #20]	; (8002dd8 <MX_USART1_UART_Init+0x94>)
 8002dc4:	f007 f9b2 	bl	800a12c <HAL_UARTEx_DisableFifoMode>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8002dce:	f000 f883 	bl	8002ed8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002dd2:	bf00      	nop
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	20000514 	.word	0x20000514
 8002ddc:	40013800 	.word	0x40013800

08002de0 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8002de0:	b480      	push	{r7}
 8002de2:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8002de4:	bf00      	nop
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
	...

08002df0 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8002df4:	4b07      	ldr	r3, [pc, #28]	; (8002e14 <MX_RNG_Init+0x24>)
 8002df6:	4a08      	ldr	r2, [pc, #32]	; (8002e18 <MX_RNG_Init+0x28>)
 8002df8:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8002dfa:	4b06      	ldr	r3, [pc, #24]	; (8002e14 <MX_RNG_Init+0x24>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002e00:	4804      	ldr	r0, [pc, #16]	; (8002e14 <MX_RNG_Init+0x24>)
 8002e02:	f004 fed7 	bl	8007bb4 <HAL_RNG_Init>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d001      	beq.n	8002e10 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8002e0c:	f000 f864 	bl	8002ed8 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8002e10:	bf00      	nop
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	20000668 	.word	0x20000668
 8002e18:	58001000 	.word	0x58001000

08002e1c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002e20:	4b16      	ldr	r3, [pc, #88]	; (8002e7c <MX_RTC_Init+0x60>)
 8002e22:	4a17      	ldr	r2, [pc, #92]	; (8002e80 <MX_RTC_Init+0x64>)
 8002e24:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002e26:	4b15      	ldr	r3, [pc, #84]	; (8002e7c <MX_RTC_Init+0x60>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8002e2c:	4b13      	ldr	r3, [pc, #76]	; (8002e7c <MX_RTC_Init+0x60>)
 8002e2e:	220f      	movs	r2, #15
 8002e30:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8002e32:	4b12      	ldr	r3, [pc, #72]	; (8002e7c <MX_RTC_Init+0x60>)
 8002e34:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002e38:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002e3a:	4b10      	ldr	r3, [pc, #64]	; (8002e7c <MX_RTC_Init+0x60>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002e40:	4b0e      	ldr	r3, [pc, #56]	; (8002e7c <MX_RTC_Init+0x60>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002e46:	4b0d      	ldr	r3, [pc, #52]	; (8002e7c <MX_RTC_Init+0x60>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002e4c:	4b0b      	ldr	r3, [pc, #44]	; (8002e7c <MX_RTC_Init+0x60>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002e52:	480a      	ldr	r0, [pc, #40]	; (8002e7c <MX_RTC_Init+0x60>)
 8002e54:	f004 fee4 	bl	8007c20 <HAL_RTC_Init>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d001      	beq.n	8002e62 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8002e5e:	f000 f83b 	bl	8002ed8 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8002e62:	2200      	movs	r2, #0
 8002e64:	2100      	movs	r1, #0
 8002e66:	4805      	ldr	r0, [pc, #20]	; (8002e7c <MX_RTC_Init+0x60>)
 8002e68:	f004 ffda 	bl	8007e20 <HAL_RTCEx_SetWakeUpTimer_IT>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8002e72:	f000 f831 	bl	8002ed8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002e76:	bf00      	nop
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	2000067c 	.word	0x2000067c
 8002e80:	40002800 	.word	0x40002800

08002e84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002e88:	2004      	movs	r0, #4
 8002e8a:	f7ff fe2f 	bl	8002aec <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002e8e:	2001      	movs	r0, #1
 8002e90:	f7ff fe2c 	bl	8002aec <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002e94:	2002      	movs	r0, #2
 8002e96:	f7ff fe29 	bl	8002aec <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 15, 0);
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	210f      	movs	r1, #15
 8002e9e:	200e      	movs	r0, #14
 8002ea0:	f002 fa7f 	bl	80053a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002ea4:	200e      	movs	r0, #14
 8002ea6:	f002 fa96 	bl	80053d6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 15, 0);
 8002eaa:	2200      	movs	r2, #0
 8002eac:	210f      	movs	r1, #15
 8002eae:	203a      	movs	r0, #58	; 0x3a
 8002eb0:	f002 fa77 	bl	80053a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8002eb4:	203a      	movs	r0, #58	; 0x3a
 8002eb6:	f002 fa8e 	bl	80053d6 <HAL_NVIC_EnableIRQ>

}
 8002eba:	bf00      	nop
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ebe:	b580      	push	{r7, lr}
 8002ec0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ec2:	2004      	movs	r0, #4
 8002ec4:	f7ff fe2b 	bl	8002b1e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ec8:	2001      	movs	r0, #1
 8002eca:	f7ff fe28 	bl	8002b1e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ece:	2002      	movs	r0, #2
 8002ed0:	f7ff fe25 	bl	8002b1e <LL_AHB2_GRP1_EnableClock>

}
 8002ed4:	bf00      	nop
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002edc:	bf00      	nop
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr

08002ee6 <LL_RCC_EnableRTC>:
{
 8002ee6:	b480      	push	{r7}
 8002ee8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002eea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ef2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ef6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002efa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002efe:	bf00      	nop
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <LL_AHB2_GRP1_EnableClock>:
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b085      	sub	sp, #20
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002f10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f14:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002f16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002f20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f24:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
}
 8002f2e:	bf00      	nop
 8002f30:	3714      	adds	r7, #20
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr

08002f3a <LL_AHB3_GRP1_EnableClock>:
{
 8002f3a:	b480      	push	{r7}
 8002f3c:	b085      	sub	sp, #20
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002f42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f46:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f48:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002f52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f56:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
}
 8002f60:	bf00      	nop
 8002f62:	3714      	adds	r7, #20
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <LL_APB1_GRP1_EnableClock>:
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b085      	sub	sp, #20
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002f74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f78:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002f7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002f84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f88:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002f90:	68fb      	ldr	r3, [r7, #12]
}
 8002f92:	bf00      	nop
 8002f94:	3714      	adds	r7, #20
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr

08002f9e <LL_APB1_GRP2_EnableClock>:
{
 8002f9e:	b480      	push	{r7}
 8002fa0:	b085      	sub	sp, #20
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 8002fa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002faa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002fac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	65cb      	str	r3, [r1, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8002fb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
}
 8002fc4:	bf00      	nop
 8002fc6:	3714      	adds	r7, #20
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr

08002fd0 <LL_APB2_GRP1_EnableClock>:
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b085      	sub	sp, #20
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002fd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fdc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002fde:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002fe8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
}
 8002ff6:	bf00      	nop
 8002ff8:	3714      	adds	r7, #20
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr

08003002 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003002:	b580      	push	{r7, lr}
 8003004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8003006:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800300a:	f7ff ff96 	bl	8002f3a <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 800300e:	2200      	movs	r2, #0
 8003010:	2100      	movs	r1, #0
 8003012:	202e      	movs	r0, #46	; 0x2e
 8003014:	f002 f9c5 	bl	80053a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8003018:	202e      	movs	r0, #46	; 0x2e
 800301a:	f002 f9dc 	bl	80053d6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800301e:	bf00      	nop
 8003020:	bd80      	pop	{r7, pc}
	...

08003024 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a0d      	ldr	r2, [pc, #52]	; (8003068 <HAL_IPCC_MspInit+0x44>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d113      	bne.n	800305e <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8003036:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800303a:	f7ff ff7e 	bl	8002f3a <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 800303e:	2200      	movs	r2, #0
 8003040:	2100      	movs	r1, #0
 8003042:	202c      	movs	r0, #44	; 0x2c
 8003044:	f002 f9ad 	bl	80053a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8003048:	202c      	movs	r0, #44	; 0x2c
 800304a:	f002 f9c4 	bl	80053d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 800304e:	2200      	movs	r2, #0
 8003050:	2100      	movs	r1, #0
 8003052:	202d      	movs	r0, #45	; 0x2d
 8003054:	f002 f9a5 	bl	80053a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8003058:	202d      	movs	r0, #45	; 0x2d
 800305a:	f002 f9bc 	bl	80053d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 800305e:	bf00      	nop
 8003060:	3708      	adds	r7, #8
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	58000c00 	.word	0x58000c00

0800306c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b0a0      	sub	sp, #128	; 0x80
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003074:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003078:	2200      	movs	r2, #0
 800307a:	601a      	str	r2, [r3, #0]
 800307c:	605a      	str	r2, [r3, #4]
 800307e:	609a      	str	r2, [r3, #8]
 8003080:	60da      	str	r2, [r3, #12]
 8003082:	611a      	str	r2, [r3, #16]
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003084:	f107 030c 	add.w	r3, r7, #12
 8003088:	2250      	movs	r2, #80	; 0x50
 800308a:	2100      	movs	r1, #0
 800308c:	4618      	mov	r0, r3
 800308e:	f00b fc21 	bl	800e8d4 <memset>
  if(huart->Instance==LPUART1)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a68      	ldr	r2, [pc, #416]	; (8003238 <HAL_UART_MspInit+0x1cc>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d16e      	bne.n	800317a <HAL_UART_MspInit+0x10e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800309c:	2302      	movs	r3, #2
 800309e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80030a0:	2300      	movs	r3, #0
 80030a2:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030a4:	f107 030c 	add.w	r3, r7, #12
 80030a8:	4618      	mov	r0, r3
 80030aa:	f004 fafc 	bl	80076a6 <HAL_RCCEx_PeriphCLKConfig>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d001      	beq.n	80030b8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80030b4:	f7ff ff10 	bl	8002ed8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80030b8:	2001      	movs	r0, #1
 80030ba:	f7ff ff70 	bl	8002f9e <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030be:	2001      	movs	r0, #1
 80030c0:	f7ff ff22 	bl	8002f08 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80030c4:	230c      	movs	r3, #12
 80030c6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030c8:	2302      	movs	r3, #2
 80030ca:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030cc:	2300      	movs	r3, #0
 80030ce:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030d0:	2303      	movs	r3, #3
 80030d2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80030d4:	2308      	movs	r3, #8
 80030d6:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030d8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80030dc:	4619      	mov	r1, r3
 80030de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030e2:	f002 fd51 	bl	8005b88 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel4;
 80030e6:	4b55      	ldr	r3, [pc, #340]	; (800323c <HAL_UART_MspInit+0x1d0>)
 80030e8:	4a55      	ldr	r2, [pc, #340]	; (8003240 <HAL_UART_MspInit+0x1d4>)
 80030ea:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 80030ec:	4b53      	ldr	r3, [pc, #332]	; (800323c <HAL_UART_MspInit+0x1d0>)
 80030ee:	2211      	movs	r2, #17
 80030f0:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80030f2:	4b52      	ldr	r3, [pc, #328]	; (800323c <HAL_UART_MspInit+0x1d0>)
 80030f4:	2210      	movs	r2, #16
 80030f6:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030f8:	4b50      	ldr	r3, [pc, #320]	; (800323c <HAL_UART_MspInit+0x1d0>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80030fe:	4b4f      	ldr	r3, [pc, #316]	; (800323c <HAL_UART_MspInit+0x1d0>)
 8003100:	2280      	movs	r2, #128	; 0x80
 8003102:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003104:	4b4d      	ldr	r3, [pc, #308]	; (800323c <HAL_UART_MspInit+0x1d0>)
 8003106:	2200      	movs	r2, #0
 8003108:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800310a:	4b4c      	ldr	r3, [pc, #304]	; (800323c <HAL_UART_MspInit+0x1d0>)
 800310c:	2200      	movs	r2, #0
 800310e:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8003110:	4b4a      	ldr	r3, [pc, #296]	; (800323c <HAL_UART_MspInit+0x1d0>)
 8003112:	2200      	movs	r2, #0
 8003114:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003116:	4b49      	ldr	r3, [pc, #292]	; (800323c <HAL_UART_MspInit+0x1d0>)
 8003118:	2200      	movs	r2, #0
 800311a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 800311c:	4847      	ldr	r0, [pc, #284]	; (800323c <HAL_UART_MspInit+0x1d0>)
 800311e:	f002 f99f 	bl	8005460 <HAL_DMA_Init>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d001      	beq.n	800312c <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8003128:	f7ff fed6 	bl	8002ed8 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_DMAMUX1_CH1_EVT;
 800312c:	f04f 5388 	mov.w	r3, #285212672	; 0x11000000
 8003130:	65fb      	str	r3, [r7, #92]	; 0x5c
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 8003132:	2300      	movs	r3, #0
 8003134:	663b      	str	r3, [r7, #96]	; 0x60
    pSyncConfig.SyncEnable = DISABLE;
 8003136:	2300      	movs	r3, #0
 8003138:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
    pSyncConfig.EventEnable = DISABLE;
 800313c:	2300      	movs	r3, #0
 800313e:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
    pSyncConfig.RequestNumber = 1;
 8003142:	2301      	movs	r3, #1
 8003144:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_DMAEx_ConfigMuxSync(&hdma_lpuart1_tx, &pSyncConfig) != HAL_OK)
 8003146:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800314a:	4619      	mov	r1, r3
 800314c:	483b      	ldr	r0, [pc, #236]	; (800323c <HAL_UART_MspInit+0x1d0>)
 800314e:	f002 fcb9 	bl	8005ac4 <HAL_DMAEx_ConfigMuxSync>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d001      	beq.n	800315c <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 8003158:	f7ff febe 	bl	8002ed8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a37      	ldr	r2, [pc, #220]	; (800323c <HAL_UART_MspInit+0x1d0>)
 8003160:	67da      	str	r2, [r3, #124]	; 0x7c
 8003162:	4a36      	ldr	r2, [pc, #216]	; (800323c <HAL_UART_MspInit+0x1d0>)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8003168:	2200      	movs	r2, #0
 800316a:	2100      	movs	r1, #0
 800316c:	2025      	movs	r0, #37	; 0x25
 800316e:	f002 f918 	bl	80053a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8003172:	2025      	movs	r0, #37	; 0x25
 8003174:	f002 f92f 	bl	80053d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003178:	e05a      	b.n	8003230 <HAL_UART_MspInit+0x1c4>
  else if(huart->Instance==USART1)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a31      	ldr	r2, [pc, #196]	; (8003244 <HAL_UART_MspInit+0x1d8>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d155      	bne.n	8003230 <HAL_UART_MspInit+0x1c4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003184:	2301      	movs	r3, #1
 8003186:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003188:	2300      	movs	r3, #0
 800318a:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800318c:	f107 030c 	add.w	r3, r7, #12
 8003190:	4618      	mov	r0, r3
 8003192:	f004 fa88 	bl	80076a6 <HAL_RCCEx_PeriphCLKConfig>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d001      	beq.n	80031a0 <HAL_UART_MspInit+0x134>
      Error_Handler();
 800319c:	f7ff fe9c 	bl	8002ed8 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80031a0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80031a4:	f7ff ff14 	bl	8002fd0 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031a8:	2002      	movs	r0, #2
 80031aa:	f7ff fead 	bl	8002f08 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80031ae:	23c0      	movs	r3, #192	; 0xc0
 80031b0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031b2:	2302      	movs	r3, #2
 80031b4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b6:	2300      	movs	r3, #0
 80031b8:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031ba:	2303      	movs	r3, #3
 80031bc:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80031be:	2307      	movs	r3, #7
 80031c0:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031c2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80031c6:	4619      	mov	r1, r3
 80031c8:	481f      	ldr	r0, [pc, #124]	; (8003248 <HAL_UART_MspInit+0x1dc>)
 80031ca:	f002 fcdd 	bl	8005b88 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Channel4;
 80031ce:	4b1f      	ldr	r3, [pc, #124]	; (800324c <HAL_UART_MspInit+0x1e0>)
 80031d0:	4a1f      	ldr	r2, [pc, #124]	; (8003250 <HAL_UART_MspInit+0x1e4>)
 80031d2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80031d4:	4b1d      	ldr	r3, [pc, #116]	; (800324c <HAL_UART_MspInit+0x1e0>)
 80031d6:	220f      	movs	r2, #15
 80031d8:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80031da:	4b1c      	ldr	r3, [pc, #112]	; (800324c <HAL_UART_MspInit+0x1e0>)
 80031dc:	2210      	movs	r2, #16
 80031de:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80031e0:	4b1a      	ldr	r3, [pc, #104]	; (800324c <HAL_UART_MspInit+0x1e0>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80031e6:	4b19      	ldr	r3, [pc, #100]	; (800324c <HAL_UART_MspInit+0x1e0>)
 80031e8:	2280      	movs	r2, #128	; 0x80
 80031ea:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80031ec:	4b17      	ldr	r3, [pc, #92]	; (800324c <HAL_UART_MspInit+0x1e0>)
 80031ee:	2200      	movs	r2, #0
 80031f0:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80031f2:	4b16      	ldr	r3, [pc, #88]	; (800324c <HAL_UART_MspInit+0x1e0>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80031f8:	4b14      	ldr	r3, [pc, #80]	; (800324c <HAL_UART_MspInit+0x1e0>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80031fe:	4b13      	ldr	r3, [pc, #76]	; (800324c <HAL_UART_MspInit+0x1e0>)
 8003200:	2200      	movs	r2, #0
 8003202:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003204:	4811      	ldr	r0, [pc, #68]	; (800324c <HAL_UART_MspInit+0x1e0>)
 8003206:	f002 f92b 	bl	8005460 <HAL_DMA_Init>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d001      	beq.n	8003214 <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 8003210:	f7ff fe62 	bl	8002ed8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a0d      	ldr	r2, [pc, #52]	; (800324c <HAL_UART_MspInit+0x1e0>)
 8003218:	67da      	str	r2, [r3, #124]	; 0x7c
 800321a:	4a0c      	ldr	r2, [pc, #48]	; (800324c <HAL_UART_MspInit+0x1e0>)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003220:	2200      	movs	r2, #0
 8003222:	2100      	movs	r1, #0
 8003224:	2024      	movs	r0, #36	; 0x24
 8003226:	f002 f8bc 	bl	80053a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800322a:	2024      	movs	r0, #36	; 0x24
 800322c:	f002 f8d3 	bl	80053d6 <HAL_NVIC_EnableIRQ>
}
 8003230:	bf00      	nop
 8003232:	3780      	adds	r7, #128	; 0x80
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	40008000 	.word	0x40008000
 800323c:	200005a8 	.word	0x200005a8
 8003240:	40020044 	.word	0x40020044
 8003244:	40013800 	.word	0x40013800
 8003248:	48000400 	.word	0x48000400
 800324c:	20000608 	.word	0x20000608
 8003250:	40020444 	.word	0x40020444

08003254 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b096      	sub	sp, #88	; 0x58
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800325c:	f107 0308 	add.w	r3, r7, #8
 8003260:	2250      	movs	r2, #80	; 0x50
 8003262:	2100      	movs	r1, #0
 8003264:	4618      	mov	r0, r3
 8003266:	f00b fb35 	bl	800e8d4 <memset>
  if(hrng->Instance==RNG)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a0d      	ldr	r2, [pc, #52]	; (80032a4 <HAL_RNG_MspInit+0x50>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d113      	bne.n	800329c <HAL_RNG_MspInit+0x48>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8003274:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003278:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 800327a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800327e:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003280:	f107 0308 	add.w	r3, r7, #8
 8003284:	4618      	mov	r0, r3
 8003286:	f004 fa0e 	bl	80076a6 <HAL_RCCEx_PeriphCLKConfig>
 800328a:	4603      	mov	r3, r0
 800328c:	2b00      	cmp	r3, #0
 800328e:	d001      	beq.n	8003294 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8003290:	f7ff fe22 	bl	8002ed8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8003294:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8003298:	f7ff fe4f 	bl	8002f3a <LL_AHB3_GRP1_EnableClock>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 800329c:	bf00      	nop
 800329e:	3758      	adds	r7, #88	; 0x58
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	58001000 	.word	0x58001000

080032a8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b096      	sub	sp, #88	; 0x58
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80032b0:	f107 0308 	add.w	r3, r7, #8
 80032b4:	2250      	movs	r2, #80	; 0x50
 80032b6:	2100      	movs	r1, #0
 80032b8:	4618      	mov	r0, r3
 80032ba:	f00b fb0b 	bl	800e8d4 <memset>
  if(hrtc->Instance==RTC)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a12      	ldr	r2, [pc, #72]	; (800330c <HAL_RTC_MspInit+0x64>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d11d      	bne.n	8003304 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80032c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80032cc:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = LL_RCC_RTC_CLKSOURCE_LSE;
 80032ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032d2:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80032d4:	f107 0308 	add.w	r3, r7, #8
 80032d8:	4618      	mov	r0, r3
 80032da:	f004 f9e4 	bl	80076a6 <HAL_RCCEx_PeriphCLKConfig>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d001      	beq.n	80032e8 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80032e4:	f7ff fdf8 	bl	8002ed8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80032e8:	f7ff fdfd 	bl	8002ee6 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80032ec:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80032f0:	f7ff fe3c 	bl	8002f6c <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80032f4:	2200      	movs	r2, #0
 80032f6:	2100      	movs	r1, #0
 80032f8:	2003      	movs	r0, #3
 80032fa:	f002 f852 	bl	80053a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80032fe:	2003      	movs	r0, #3
 8003300:	f002 f869 	bl	80053d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003304:	bf00      	nop
 8003306:	3758      	adds	r7, #88	; 0x58
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}
 800330c:	40002800 	.word	0x40002800

08003310 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003310:	b480      	push	{r7}
 8003312:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003314:	bf00      	nop
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr

0800331e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800331e:	b480      	push	{r7}
 8003320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003322:	e7fe      	b.n	8003322 <HardFault_Handler+0x4>

08003324 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003324:	b480      	push	{r7}
 8003326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003328:	e7fe      	b.n	8003328 <MemManage_Handler+0x4>

0800332a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800332a:	b480      	push	{r7}
 800332c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800332e:	e7fe      	b.n	800332e <BusFault_Handler+0x4>

08003330 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003330:	b480      	push	{r7}
 8003332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003334:	e7fe      	b.n	8003334 <UsageFault_Handler+0x4>

08003336 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003336:	b480      	push	{r7}
 8003338:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800333a:	bf00      	nop
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003344:	b480      	push	{r7}
 8003346:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003348:	bf00      	nop
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr

08003352 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003352:	b480      	push	{r7}
 8003354:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003356:	bf00      	nop
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003364:	f001 fe9e 	bl	80050a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003368:	bf00      	nop
 800336a:	bd80      	pop	{r7, pc}

0800336c <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8003370:	f7fe ff16 	bl	80021a0 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8003374:	bf00      	nop
 8003376:	bd80      	pop	{r7, pc}

08003378 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 800337c:	4802      	ldr	r0, [pc, #8]	; (8003388 <DMA1_Channel4_IRQHandler+0x10>)
 800337e:	f002 fa50 	bl	8005822 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8003382:	bf00      	nop
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	200005a8 	.word	0x200005a8

0800338c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003390:	4802      	ldr	r0, [pc, #8]	; (800339c <USART1_IRQHandler+0x10>)
 8003392:	f004 ffcb 	bl	800832c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003396:	bf00      	nop
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	20000514 	.word	0x20000514

080033a0 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80033a4:	4802      	ldr	r0, [pc, #8]	; (80033b0 <LPUART1_IRQHandler+0x10>)
 80033a6:	f004 ffc1 	bl	800832c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80033aa:	bf00      	nop
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	20000480 	.word	0x20000480

080033b4 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 80033b8:	f001 fac2 	bl	8004940 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 80033bc:	bf00      	nop
 80033be:	bd80      	pop	{r7, pc}

080033c0 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 80033c4:	f001 faf2 	bl	80049ac <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 80033c8:	bf00      	nop
 80033ca:	bd80      	pop	{r7, pc}

080033cc <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80033d0:	f002 fd7a 	bl	8005ec8 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 80033d4:	bf00      	nop
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80033dc:	4802      	ldr	r0, [pc, #8]	; (80033e8 <DMA2_Channel4_IRQHandler+0x10>)
 80033de:	f002 fa20 	bl	8005822 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 80033e2:	bf00      	nop
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	20000608 	.word	0x20000608

080033ec <EXTI4_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW1_EXTI_IRQHandler(void)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW1_PIN);
 80033f0:	2010      	movs	r0, #16
 80033f2:	f002 fd51 	bl	8005e98 <HAL_GPIO_EXTI_IRQHandler>
}
 80033f6:	bf00      	nop
 80033f8:	bd80      	pop	{r7, pc}

080033fa <EXTI0_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW2_EXTI_IRQHandler(void)
{
 80033fa:	b580      	push	{r7, lr}
 80033fc:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW2_PIN);
 80033fe:	2001      	movs	r0, #1
 8003400:	f002 fd4a 	bl	8005e98 <HAL_GPIO_EXTI_IRQHandler>
}
 8003404:	bf00      	nop
 8003406:	bd80      	pop	{r7, pc}

08003408 <EXTI1_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW3_EXTI_IRQHandler(void)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW3_PIN);
 800340c:	2002      	movs	r0, #2
 800340e:	f002 fd43 	bl	8005e98 <HAL_GPIO_EXTI_IRQHandler>
}
 8003412:	bf00      	nop
 8003414:	bd80      	pop	{r7, pc}

08003416 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003416:	b480      	push	{r7}
 8003418:	af00      	add	r7, sp, #0
  return 1;
 800341a:	2301      	movs	r3, #1
}
 800341c:	4618      	mov	r0, r3
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr

08003426 <_kill>:

int _kill(int pid, int sig)
{
 8003426:	b580      	push	{r7, lr}
 8003428:	b082      	sub	sp, #8
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
 800342e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003430:	f00b faa2 	bl	800e978 <__errno>
 8003434:	4603      	mov	r3, r0
 8003436:	2216      	movs	r2, #22
 8003438:	601a      	str	r2, [r3, #0]
  return -1;
 800343a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800343e:	4618      	mov	r0, r3
 8003440:	3708      	adds	r7, #8
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}

08003446 <_exit>:

void _exit (int status)
{
 8003446:	b580      	push	{r7, lr}
 8003448:	b082      	sub	sp, #8
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800344e:	f04f 31ff 	mov.w	r1, #4294967295
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f7ff ffe7 	bl	8003426 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003458:	e7fe      	b.n	8003458 <_exit+0x12>

0800345a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800345a:	b580      	push	{r7, lr}
 800345c:	b086      	sub	sp, #24
 800345e:	af00      	add	r7, sp, #0
 8003460:	60f8      	str	r0, [r7, #12]
 8003462:	60b9      	str	r1, [r7, #8]
 8003464:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003466:	2300      	movs	r3, #0
 8003468:	617b      	str	r3, [r7, #20]
 800346a:	e00a      	b.n	8003482 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800346c:	f3af 8000 	nop.w
 8003470:	4601      	mov	r1, r0
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	1c5a      	adds	r2, r3, #1
 8003476:	60ba      	str	r2, [r7, #8]
 8003478:	b2ca      	uxtb	r2, r1
 800347a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	3301      	adds	r3, #1
 8003480:	617b      	str	r3, [r7, #20]
 8003482:	697a      	ldr	r2, [r7, #20]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	429a      	cmp	r2, r3
 8003488:	dbf0      	blt.n	800346c <_read+0x12>
  }

  return len;
 800348a:	687b      	ldr	r3, [r7, #4]
}
 800348c:	4618      	mov	r0, r3
 800348e:	3718      	adds	r7, #24
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800349c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <_fstat>:


int _fstat(int file, struct stat *st)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80034bc:	605a      	str	r2, [r3, #4]
  return 0;
 80034be:	2300      	movs	r3, #0
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	370c      	adds	r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <_isatty>:

int _isatty(int file)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80034d4:	2301      	movs	r3, #1
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	370c      	adds	r7, #12
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr

080034e2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80034e2:	b480      	push	{r7}
 80034e4:	b085      	sub	sp, #20
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	60f8      	str	r0, [r7, #12]
 80034ea:	60b9      	str	r1, [r7, #8]
 80034ec:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80034ee:	2300      	movs	r3, #0
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3714      	adds	r7, #20
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b086      	sub	sp, #24
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003504:	4a14      	ldr	r2, [pc, #80]	; (8003558 <_sbrk+0x5c>)
 8003506:	4b15      	ldr	r3, [pc, #84]	; (800355c <_sbrk+0x60>)
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003510:	4b13      	ldr	r3, [pc, #76]	; (8003560 <_sbrk+0x64>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d102      	bne.n	800351e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003518:	4b11      	ldr	r3, [pc, #68]	; (8003560 <_sbrk+0x64>)
 800351a:	4a12      	ldr	r2, [pc, #72]	; (8003564 <_sbrk+0x68>)
 800351c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800351e:	4b10      	ldr	r3, [pc, #64]	; (8003560 <_sbrk+0x64>)
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4413      	add	r3, r2
 8003526:	693a      	ldr	r2, [r7, #16]
 8003528:	429a      	cmp	r2, r3
 800352a:	d207      	bcs.n	800353c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800352c:	f00b fa24 	bl	800e978 <__errno>
 8003530:	4603      	mov	r3, r0
 8003532:	220c      	movs	r2, #12
 8003534:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003536:	f04f 33ff 	mov.w	r3, #4294967295
 800353a:	e009      	b.n	8003550 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800353c:	4b08      	ldr	r3, [pc, #32]	; (8003560 <_sbrk+0x64>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003542:	4b07      	ldr	r3, [pc, #28]	; (8003560 <_sbrk+0x64>)
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4413      	add	r3, r2
 800354a:	4a05      	ldr	r2, [pc, #20]	; (8003560 <_sbrk+0x64>)
 800354c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800354e:	68fb      	ldr	r3, [r7, #12]
}
 8003550:	4618      	mov	r0, r3
 8003552:	3718      	adds	r7, #24
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	20030000 	.word	0x20030000
 800355c:	00001000 	.word	0x00001000
 8003560:	200006a0 	.word	0x200006a0
 8003564:	20001b68 	.word	0x20001b68

08003568 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8003568:	b480      	push	{r7}
 800356a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800356c:	4b03      	ldr	r3, [pc, #12]	; (800357c <LL_FLASH_GetUDN+0x14>)
 800356e:	681b      	ldr	r3, [r3, #0]
}
 8003570:	4618      	mov	r0, r3
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	1fff7580 	.word	0x1fff7580

08003580 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8003580:	b480      	push	{r7}
 8003582:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8003584:	4b03      	ldr	r3, [pc, #12]	; (8003594 <LL_FLASH_GetDeviceID+0x14>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	b2db      	uxtb	r3, r3
}
 800358a:	4618      	mov	r0, r3
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr
 8003594:	1fff7584 	.word	0x1fff7584

08003598 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8003598:	b480      	push	{r7}
 800359a:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800359c:	4b03      	ldr	r3, [pc, #12]	; (80035ac <LL_FLASH_GetSTCompanyID+0x14>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	0a1b      	lsrs	r3, r3, #8
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr
 80035ac:	1fff7584 	.word	0x1fff7584

080035b0 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init( void )
{
 80035b0:	b5b0      	push	{r4, r5, r7, lr}
 80035b2:	b090      	sub	sp, #64	; 0x40
 80035b4:	af00      	add	r7, sp, #0
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 80035b6:	4b33      	ldr	r3, [pc, #204]	; (8003684 <APP_BLE_Init+0xd4>)
 80035b8:	1d3c      	adds	r4, r7, #4
 80035ba:	461d      	mov	r5, r3
 80035bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80035cc:	c403      	stmia	r4!, {r0, r1}
 80035ce:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 80035d0:	f000 fbbc 	bl	8003d4c <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 80035d4:	2101      	movs	r1, #1
 80035d6:	2002      	movs	r0, #2
 80035d8:	f00a f880 	bl	800d6dc <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 80035dc:	4a2a      	ldr	r2, [pc, #168]	; (8003688 <APP_BLE_Init+0xd8>)
 80035de:	2100      	movs	r1, #0
 80035e0:	2010      	movs	r0, #16
 80035e2:	f00a f9a7 	bl	800d934 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 80035e6:	1d3b      	adds	r3, r7, #4
 80035e8:	4618      	mov	r0, r3
 80035ea:	f008 fcb9 	bl	800bf60 <SHCI_C2_BLE_Init>
 80035ee:	4603      	mov	r3, r0
 80035f0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (status != SHCI_Success)
 80035f4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d008      	beq.n	800360e <APP_BLE_Init+0x5e>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 80035fc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003600:	4619      	mov	r1, r3
 8003602:	4822      	ldr	r0, [pc, #136]	; (800368c <APP_BLE_Init+0xdc>)
 8003604:	f00b f800 	bl	800e608 <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 8003608:	f7ff fc66 	bl	8002ed8 <Error_Handler>
 800360c:	e002      	b.n	8003614 <APP_BLE_Init+0x64>
  }
  else
  {
    APP_DBG_MSG("  Success: SHCI_C2_BLE_Init command\n\r");
 800360e:	4820      	ldr	r0, [pc, #128]	; (8003690 <APP_BLE_Init+0xe0>)
 8003610:	f00a fffa 	bl	800e608 <iprintf>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8003614:	f000 fbb0 	bl	8003d78 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8003618:	f007 f8ea 	bl	800a7f0 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800361c:	4b1d      	ldr	r3, [pc, #116]	; (8003694 <APP_BLE_Init+0xe4>)
 800361e:	2200      	movs	r2, #0
 8003620:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8003624:	4b1b      	ldr	r3, [pc, #108]	; (8003694 <APP_BLE_Init+0xe4>)
 8003626:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800362a:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */
#if(BLE_CFG_PERIPHERAL != 0)
  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_UPDATE_ID, UTIL_SEQ_RFU, Adv_Update);
 800362c:	4a1a      	ldr	r2, [pc, #104]	; (8003698 <APP_BLE_Init+0xe8>)
 800362e:	2100      	movs	r1, #0
 8003630:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003634:	f00a f97e 	bl	800d934 <UTIL_SEQ_RegTask>
#if(BLE_CFG_CENTRAL != 0)
  UTIL_SEQ_RegTask( 1<<CFG_TASK_SCAN_REQ_ID, UTIL_SEQ_RFU, Scan_Request);
  UTIL_SEQ_RegTask( 1<<CFG_TASK_CONN_REQ_ID, UTIL_SEQ_RFU, Connect_Request);
#endif

  UTIL_SEQ_RegTask( 1<<CFG_TASK_LINK_CONFIG_ID, UTIL_SEQ_RFU, LinkConfiguration);
 8003638:	4a18      	ldr	r2, [pc, #96]	; (800369c <APP_BLE_Init+0xec>)
 800363a:	2100      	movs	r1, #0
 800363c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003640:	f00a f978 	bl	800d934 <UTIL_SEQ_RegTask>

  BleApplicationContext.DeviceServerFound = NO_DEVICE_FOUND;
 8003644:	4b13      	ldr	r3, [pc, #76]	; (8003694 <APP_BLE_Init+0xe4>)
 8003646:	2200      	movs	r2, #0
 8003648:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82

#if (BLE_CFG_PERIPHERAL == 1)
  /**
   * Initialize CRS Application
   */
  CRSAPP_Init();
 800364c:	f000 feb0 	bl	80043b0 <CRSAPP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8003650:	4b10      	ldr	r3, [pc, #64]	; (8003694 <APP_BLE_Init+0xe4>)
 8003652:	2200      	movs	r2, #0
 8003654:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8003656:	4b0f      	ldr	r3, [pc, #60]	; (8003694 <APP_BLE_Init+0xe4>)
 8003658:	2200      	movs	r2, #0
 800365a:	761a      	strb	r2, [r3, #24]
#if(BLE_CFG_PERIPHERAL != 0)
  /**
   * Create timer to handle the connection state machine
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Mgr);
 800365c:	4b10      	ldr	r3, [pc, #64]	; (80036a0 <APP_BLE_Init+0xf0>)
 800365e:	2200      	movs	r2, #0
 8003660:	4910      	ldr	r1, [pc, #64]	; (80036a4 <APP_BLE_Init+0xf4>)
 8003662:	2000      	movs	r0, #0
 8003664:	f7fe ff3e 	bl	80024e4 <HW_TS_Create>

  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 8003668:	4b0f      	ldr	r3, [pc, #60]	; (80036a8 <APP_BLE_Init+0xf8>)
 800366a:	2280      	movs	r2, #128	; 0x80
 800366c:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 800366e:	4b0f      	ldr	r3, [pc, #60]	; (80036ac <APP_BLE_Init+0xfc>)
 8003670:	22a0      	movs	r2, #160	; 0xa0
 8003672:	801a      	strh	r2, [r3, #0]

  /**
   * Start to Advertise to be connected by CR Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 8003674:	2001      	movs	r0, #1
 8003676:	f000 fd2f 	bl	80040d8 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 800367a:	bf00      	nop
}
 800367c:	3740      	adds	r7, #64	; 0x40
 800367e:	46bd      	mov	sp, r7
 8003680:	bdb0      	pop	{r4, r5, r7, pc}
 8003682:	bf00      	nop
 8003684:	08010dc8 	.word	0x08010dc8
 8003688:	0800c17d 	.word	0x0800c17d
 800368c:	08010d68 	.word	0x08010d68
 8003690:	08010da0 	.word	0x08010da0
 8003694:	200006ac 	.word	0x200006ac
 8003698:	08004243 	.word	0x08004243
 800369c:	080036b1 	.word	0x080036b1
 80036a0:	08004231 	.word	0x08004231
 80036a4:	2000072d 	.word	0x2000072d
 80036a8:	20000730 	.word	0x20000730
 80036ac:	20000732 	.word	0x20000732

080036b0 <LinkConfiguration>:

static void LinkConfiguration(void)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	af00      	add	r7, sp, #0
  CRCAPP_LinkReadyNotification(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 80036b4:	4b03      	ldr	r3, [pc, #12]	; (80036c4 <LinkConfiguration+0x14>)
 80036b6:	8adb      	ldrh	r3, [r3, #22]
 80036b8:	4618      	mov	r0, r3
 80036ba:	f000 fe69 	bl	8004390 <CRCAPP_LinkReadyNotification>

  return;
 80036be:	bf00      	nop
}
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	200006ac 	.word	0x200006ac

080036c8 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *p_Pckt )
{
 80036c8:	b5b0      	push	{r4, r5, r7, lr}
 80036ca:	b098      	sub	sp, #96	; 0x60
 80036cc:	af04      	add	r7, sp, #16
 80036ce:	6078      	str	r0, [r7, #4]
  hci_event_pckt *p_event_pckt;

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	3301      	adds	r3, #1
 80036d4:	64bb      	str	r3, [r7, #72]	; 0x48

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  switch (p_event_pckt->evt)
 80036d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	2bff      	cmp	r3, #255	; 0xff
 80036dc:	f000 826a 	beq.w	8003bb4 <SVCCTL_App_Notification+0x4ec>
 80036e0:	2bff      	cmp	r3, #255	; 0xff
 80036e2:	f300 830c 	bgt.w	8003cfe <SVCCTL_App_Notification+0x636>
 80036e6:	2b05      	cmp	r3, #5
 80036e8:	d002      	beq.n	80036f0 <SVCCTL_App_Notification+0x28>
 80036ea:	2b3e      	cmp	r3, #62	; 0x3e
 80036ec:	d024      	beq.n	8003738 <SVCCTL_App_Notification+0x70>
      {
        /* USER CODE BEGIN ECODE_DEFAULT*/

        /* USER CODE END ECODE_DEFAULT*/
      }
      break;
 80036ee:	e306      	b.n	8003cfe <SVCCTL_App_Notification+0x636>
        p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 80036f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036f2:	3302      	adds	r3, #2
 80036f4:	60fb      	str	r3, [r7, #12]
        if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80036fc:	b29a      	uxth	r2, r3
 80036fe:	4ba9      	ldr	r3, [pc, #676]	; (80039a4 <SVCCTL_App_Notification+0x2dc>)
 8003700:	8adb      	ldrh	r3, [r3, #22]
 8003702:	429a      	cmp	r2, r3
 8003704:	d114      	bne.n	8003730 <SVCCTL_App_Notification+0x68>
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8003706:	4ba7      	ldr	r3, [pc, #668]	; (80039a4 <SVCCTL_App_Notification+0x2dc>)
 8003708:	2200      	movs	r2, #0
 800370a:	82da      	strh	r2, [r3, #22]
          BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800370c:	4ba5      	ldr	r3, [pc, #660]	; (80039a4 <SVCCTL_App_Notification+0x2dc>)
 800370e:	2200      	movs	r2, #0
 8003710:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          APP_DBG_MSG(">>== HCI_DISCONNECTION_COMPLETE_EVT_CODE\n");
 8003714:	48a4      	ldr	r0, [pc, #656]	; (80039a8 <SVCCTL_App_Notification+0x2e0>)
 8003716:	f00a ffdd 	bl	800e6d4 <puts>
                      p_disconnection_complete_event->Connection_Handle,
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8003720:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 8003722:	4619      	mov	r1, r3
                      p_disconnection_complete_event->Reason);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	78db      	ldrb	r3, [r3, #3]
          APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 8003728:	461a      	mov	r2, r3
 800372a:	48a0      	ldr	r0, [pc, #640]	; (80039ac <SVCCTL_App_Notification+0x2e4>)
 800372c:	f00a ff6c 	bl	800e608 <iprintf>
        Adv_Request(APP_BLE_FAST_ADV);
 8003730:	2001      	movs	r0, #1
 8003732:	f000 fcd1 	bl	80040d8 <Adv_Request>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8003736:	e2e3      	b.n	8003d00 <SVCCTL_App_Notification+0x638>
        p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 8003738:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800373a:	3302      	adds	r3, #2
 800373c:	63fb      	str	r3, [r7, #60]	; 0x3c
        switch (p_meta_evt->subevent)
 800373e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	3b01      	subs	r3, #1
 8003744:	2b0b      	cmp	r3, #11
 8003746:	f200 8231 	bhi.w	8003bac <SVCCTL_App_Notification+0x4e4>
 800374a:	a201      	add	r2, pc, #4	; (adr r2, 8003750 <SVCCTL_App_Notification+0x88>)
 800374c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003750:	08003861 	.word	0x08003861
 8003754:	08003ab7 	.word	0x08003ab7
 8003758:	08003781 	.word	0x08003781
 800375c:	08003bad 	.word	0x08003bad
 8003760:	08003bad 	.word	0x08003bad
 8003764:	08003bad 	.word	0x08003bad
 8003768:	08003bad 	.word	0x08003bad
 800376c:	08003bad 	.word	0x08003bad
 8003770:	08003bad 	.word	0x08003bad
 8003774:	080039ed 	.word	0x080039ed
 8003778:	08003bad 	.word	0x08003bad
 800377c:	080037d9 	.word	0x080037d9
              p_connection_update_complete_event = (hci_le_connection_update_complete_event_rp0 *) p_meta_evt->data;
 8003780:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003782:	3301      	adds	r3, #1
 8003784:	62fb      	str	r3, [r7, #44]	; 0x2c
              APP_DBG_MSG(">>== HCI_LE_CONNECTION_UPDATE_COMPLETE_SUBEVT_CODE\n");
 8003786:	488a      	ldr	r0, [pc, #552]	; (80039b0 <SVCCTL_App_Notification+0x2e8>)
 8003788:	f00a ffa4 	bl	800e6d4 <puts>
                           p_connection_update_complete_event->Conn_Interval*1.25,
 800378c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800378e:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8003792:	b29b      	uxth	r3, r3
              APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 8003794:	4618      	mov	r0, r3
 8003796:	f7fc fead 	bl	80004f4 <__aeabi_i2d>
 800379a:	f04f 0200 	mov.w	r2, #0
 800379e:	4b85      	ldr	r3, [pc, #532]	; (80039b4 <SVCCTL_App_Notification+0x2ec>)
 80037a0:	f7fc ff12 	bl	80005c8 <__aeabi_dmul>
 80037a4:	4602      	mov	r2, r0
 80037a6:	460b      	mov	r3, r1
 80037a8:	4610      	mov	r0, r2
 80037aa:	4619      	mov	r1, r3
                           p_connection_update_complete_event->Conn_Latency,
 80037ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ae:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80037b2:	b29b      	uxth	r3, r3
              APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 80037b4:	461c      	mov	r4, r3
                           p_connection_update_complete_event->Supervision_Timeout*10);
 80037b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037b8:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 80037bc:	b29b      	uxth	r3, r3
 80037be:	461a      	mov	r2, r3
              APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 80037c0:	4613      	mov	r3, r2
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	4413      	add	r3, r2
 80037c6:	005b      	lsls	r3, r3, #1
 80037c8:	9301      	str	r3, [sp, #4]
 80037ca:	9400      	str	r4, [sp, #0]
 80037cc:	4602      	mov	r2, r0
 80037ce:	460b      	mov	r3, r1
 80037d0:	4879      	ldr	r0, [pc, #484]	; (80039b8 <SVCCTL_App_Notification+0x2f0>)
 80037d2:	f00a ff19 	bl	800e608 <iprintf>
            break;
 80037d6:	e1ec      	b.n	8003bb2 <SVCCTL_App_Notification+0x4ea>
              tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80037d8:	2392      	movs	r3, #146	; 0x92
 80037da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
              p_evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)p_meta_evt->data;
 80037de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037e0:	3301      	adds	r3, #1
 80037e2:	637b      	str	r3, [r7, #52]	; 0x34
              APP_DBG_MSG("==>> HCI_LE_PHY_UPDATE_COMPLETE_SUBEVT_CODE - ");
 80037e4:	4875      	ldr	r0, [pc, #468]	; (80039bc <SVCCTL_App_Notification+0x2f4>)
 80037e6:	f00a ff0f 	bl	800e608 <iprintf>
              if (p_evt_le_phy_update_complete->Status == 0)
 80037ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d103      	bne.n	80037fa <SVCCTL_App_Notification+0x132>
                APP_DBG_MSG("status ok \n");
 80037f2:	4873      	ldr	r0, [pc, #460]	; (80039c0 <SVCCTL_App_Notification+0x2f8>)
 80037f4:	f00a ff6e 	bl	800e6d4 <puts>
 80037f8:	e002      	b.n	8003800 <SVCCTL_App_Notification+0x138>
                APP_DBG_MSG("status nok \n");
 80037fa:	4872      	ldr	r0, [pc, #456]	; (80039c4 <SVCCTL_App_Notification+0x2fc>)
 80037fc:	f00a ff6a 	bl	800e6d4 <puts>
              ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,&Tx_phy,&Rx_phy);
 8003800:	4b68      	ldr	r3, [pc, #416]	; (80039a4 <SVCCTL_App_Notification+0x2dc>)
 8003802:	8adb      	ldrh	r3, [r3, #22]
 8003804:	f107 020a 	add.w	r2, r7, #10
 8003808:	f107 010b 	add.w	r1, r7, #11
 800380c:	4618      	mov	r0, r3
 800380e:	f008 f908 	bl	800ba22 <hci_le_read_phy>
 8003812:	4603      	mov	r3, r0
 8003814:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
              if (ret != BLE_STATUS_SUCCESS)
 8003818:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800381c:	2b00      	cmp	r3, #0
 800381e:	d003      	beq.n	8003828 <SVCCTL_App_Notification+0x160>
                APP_DBG_MSG("==>> hci_le_read_phy : fail\n\r");
 8003820:	4869      	ldr	r0, [pc, #420]	; (80039c8 <SVCCTL_App_Notification+0x300>)
 8003822:	f00a fef1 	bl	800e608 <iprintf>
 8003826:	e017      	b.n	8003858 <SVCCTL_App_Notification+0x190>
                APP_DBG_MSG("==>> hci_le_read_phy - Success \n");
 8003828:	4868      	ldr	r0, [pc, #416]	; (80039cc <SVCCTL_App_Notification+0x304>)
 800382a:	f00a ff53 	bl	800e6d4 <puts>
                if ((Tx_phy == TX_2M) && (Rx_phy == RX_2M))
 800382e:	7afb      	ldrb	r3, [r7, #11]
 8003830:	2b02      	cmp	r3, #2
 8003832:	d10a      	bne.n	800384a <SVCCTL_App_Notification+0x182>
 8003834:	7abb      	ldrb	r3, [r7, #10]
 8003836:	2b02      	cmp	r3, #2
 8003838:	d107      	bne.n	800384a <SVCCTL_App_Notification+0x182>
                  APP_DBG_MSG("==>> PHY Param  TX= %d, RX= %d \n\r", Tx_phy, Rx_phy);
 800383a:	7afb      	ldrb	r3, [r7, #11]
 800383c:	4619      	mov	r1, r3
 800383e:	7abb      	ldrb	r3, [r7, #10]
 8003840:	461a      	mov	r2, r3
 8003842:	4863      	ldr	r0, [pc, #396]	; (80039d0 <SVCCTL_App_Notification+0x308>)
 8003844:	f00a fee0 	bl	800e608 <iprintf>
 8003848:	e006      	b.n	8003858 <SVCCTL_App_Notification+0x190>
                  APP_DBG_MSG("==>> PHY Param  TX= %d, RX= %d \n\r", Tx_phy, Rx_phy);
 800384a:	7afb      	ldrb	r3, [r7, #11]
 800384c:	4619      	mov	r1, r3
 800384e:	7abb      	ldrb	r3, [r7, #10]
 8003850:	461a      	mov	r2, r3
 8003852:	485f      	ldr	r0, [pc, #380]	; (80039d0 <SVCCTL_App_Notification+0x308>)
 8003854:	f00a fed8 	bl	800e608 <iprintf>
              UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_GAP_PROC_COMPLETE);
 8003858:	2004      	movs	r0, #4
 800385a:	f00a f8f9 	bl	800da50 <UTIL_SEQ_SetEvt>
            break;
 800385e:	e1a8      	b.n	8003bb2 <SVCCTL_App_Notification+0x4ea>
              p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 8003860:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003862:	3301      	adds	r3, #1
 8003864:	61bb      	str	r3, [r7, #24]
              APP_DBG_MSG(">>== HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE - Connection handle: 0x%x\n", p_connection_complete_event->Connection_Handle);
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800386c:	b29b      	uxth	r3, r3
 800386e:	4619      	mov	r1, r3
 8003870:	4858      	ldr	r0, [pc, #352]	; (80039d4 <SVCCTL_App_Notification+0x30c>)
 8003872:	f00a fec9 	bl	800e608 <iprintf>
                          p_connection_complete_event->Peer_Address[5],
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	7a9b      	ldrb	r3, [r3, #10]
              APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800387a:	4618      	mov	r0, r3
                          p_connection_complete_event->Peer_Address[4],
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	7a5b      	ldrb	r3, [r3, #9]
              APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 8003880:	461c      	mov	r4, r3
                          p_connection_complete_event->Peer_Address[3],
 8003882:	69bb      	ldr	r3, [r7, #24]
 8003884:	7a1b      	ldrb	r3, [r3, #8]
              APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 8003886:	461d      	mov	r5, r3
                          p_connection_complete_event->Peer_Address[2],
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	79db      	ldrb	r3, [r3, #7]
              APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800388c:	461a      	mov	r2, r3
                          p_connection_complete_event->Peer_Address[1],
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	799b      	ldrb	r3, [r3, #6]
              APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 8003892:	4619      	mov	r1, r3
                          p_connection_complete_event->Peer_Address[0]);
 8003894:	69bb      	ldr	r3, [r7, #24]
 8003896:	795b      	ldrb	r3, [r3, #5]
              APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 8003898:	9302      	str	r3, [sp, #8]
 800389a:	9101      	str	r1, [sp, #4]
 800389c:	9200      	str	r2, [sp, #0]
 800389e:	462b      	mov	r3, r5
 80038a0:	4622      	mov	r2, r4
 80038a2:	4601      	mov	r1, r0
 80038a4:	484c      	ldr	r0, [pc, #304]	; (80039d8 <SVCCTL_App_Notification+0x310>)
 80038a6:	f00a feaf 	bl	800e608 <iprintf>
                          p_connection_complete_event->Conn_Interval*1.25,
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 80038b0:	b29b      	uxth	r3, r3
              APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 80038b2:	4618      	mov	r0, r3
 80038b4:	f7fc fe1e 	bl	80004f4 <__aeabi_i2d>
 80038b8:	f04f 0200 	mov.w	r2, #0
 80038bc:	4b3d      	ldr	r3, [pc, #244]	; (80039b4 <SVCCTL_App_Notification+0x2ec>)
 80038be:	f7fc fe83 	bl	80005c8 <__aeabi_dmul>
 80038c2:	4602      	mov	r2, r0
 80038c4:	460b      	mov	r3, r1
 80038c6:	4610      	mov	r0, r2
 80038c8:	4619      	mov	r1, r3
                          p_connection_complete_event->Conn_Latency,
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 80038d0:	b29b      	uxth	r3, r3
              APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 80038d2:	461c      	mov	r4, r3
                          p_connection_complete_event->Supervision_Timeout*10
 80038d4:	69bb      	ldr	r3, [r7, #24]
 80038d6:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 80038da:	b29b      	uxth	r3, r3
 80038dc:	461a      	mov	r2, r3
              APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 80038de:	4613      	mov	r3, r2
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	4413      	add	r3, r2
 80038e4:	005b      	lsls	r3, r3, #1
 80038e6:	9301      	str	r3, [sp, #4]
 80038e8:	9400      	str	r4, [sp, #0]
 80038ea:	4602      	mov	r2, r0
 80038ec:	460b      	mov	r3, r1
 80038ee:	4832      	ldr	r0, [pc, #200]	; (80039b8 <SVCCTL_App_Notification+0x2f0>)
 80038f0:	f00a fe8a 	bl	800e608 <iprintf>
              if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 80038f4:	4b2b      	ldr	r3, [pc, #172]	; (80039a4 <SVCCTL_App_Notification+0x2dc>)
 80038f6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80038fa:	2b04      	cmp	r3, #4
 80038fc:	d104      	bne.n	8003908 <SVCCTL_App_Notification+0x240>
                BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 80038fe:	4b29      	ldr	r3, [pc, #164]	; (80039a4 <SVCCTL_App_Notification+0x2dc>)
 8003900:	2206      	movs	r2, #6
 8003902:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8003906:	e003      	b.n	8003910 <SVCCTL_App_Notification+0x248>
                BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8003908:	4b26      	ldr	r3, [pc, #152]	; (80039a4 <SVCCTL_App_Notification+0x2dc>)
 800390a:	2205      	movs	r2, #5
 800390c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
              BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 8003910:	69bb      	ldr	r3, [r7, #24]
 8003912:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8003916:	b29a      	uxth	r2, r3
 8003918:	4b22      	ldr	r3, [pc, #136]	; (80039a4 <SVCCTL_App_Notification+0x2dc>)
 800391a:	82da      	strh	r2, [r3, #22]
              Connection_Interval = p_connection_complete_event->Conn_Interval * 1.25;
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 8003922:	b29b      	uxth	r3, r3
 8003924:	4618      	mov	r0, r3
 8003926:	f7fc fde5 	bl	80004f4 <__aeabi_i2d>
 800392a:	f04f 0200 	mov.w	r2, #0
 800392e:	4b21      	ldr	r3, [pc, #132]	; (80039b4 <SVCCTL_App_Notification+0x2ec>)
 8003930:	f7fc fe4a 	bl	80005c8 <__aeabi_dmul>
 8003934:	4602      	mov	r2, r0
 8003936:	460b      	mov	r3, r1
 8003938:	4610      	mov	r0, r2
 800393a:	4619      	mov	r1, r3
 800393c:	f7fd f91c 	bl	8000b78 <__aeabi_d2f>
 8003940:	4603      	mov	r3, r0
 8003942:	617b      	str	r3, [r7, #20]
              APP_DBG_MSG("**INTERVAL = %.2f ms \n",Connection_Interval);
 8003944:	6978      	ldr	r0, [r7, #20]
 8003946:	f7fc fde7 	bl	8000518 <__aeabi_f2d>
 800394a:	4602      	mov	r2, r0
 800394c:	460b      	mov	r3, r1
 800394e:	4823      	ldr	r0, [pc, #140]	; (80039dc <SVCCTL_App_Notification+0x314>)
 8003950:	f00a fe5a 	bl	800e608 <iprintf>
              APP_DBG_MSG("**LATENCY = 0x%x \n",p_connection_complete_event->Conn_Latency);
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 800395a:	b29b      	uxth	r3, r3
 800395c:	4619      	mov	r1, r3
 800395e:	4820      	ldr	r0, [pc, #128]	; (80039e0 <SVCCTL_App_Notification+0x318>)
 8003960:	f00a fe52 	bl	800e608 <iprintf>
              Supervision_Timeout = p_connection_complete_event->Supervision_Timeout * 10;
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 800396a:	b29b      	uxth	r3, r3
 800396c:	461a      	mov	r2, r3
 800396e:	4613      	mov	r3, r2
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	4413      	add	r3, r2
 8003974:	005b      	lsls	r3, r3, #1
 8003976:	ee07 3a90 	vmov	s15, r3
 800397a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800397e:	edc7 7a04 	vstr	s15, [r7, #16]
              APP_DBG_MSG("**SUPERVISION_TIMEOUT = %.2f ms \n",Supervision_Timeout);
 8003982:	6938      	ldr	r0, [r7, #16]
 8003984:	f7fc fdc8 	bl	8000518 <__aeabi_f2d>
 8003988:	4602      	mov	r2, r0
 800398a:	460b      	mov	r3, r1
 800398c:	4815      	ldr	r0, [pc, #84]	; (80039e4 <SVCCTL_App_Notification+0x31c>)
 800398e:	f00a fe3b 	bl	800e608 <iprintf>
              APP_DBG_MSG("\r\n\r");
 8003992:	4815      	ldr	r0, [pc, #84]	; (80039e8 <SVCCTL_App_Notification+0x320>)
 8003994:	f00a fe38 	bl	800e608 <iprintf>
              UTIL_SEQ_SetTask(1 << CFG_TASK_LINK_CONFIG_ID, CFG_SCH_PRIO_0);
 8003998:	2100      	movs	r1, #0
 800399a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800399e:	f009 ffeb 	bl	800d978 <UTIL_SEQ_SetTask>
            break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 80039a2:	e106      	b.n	8003bb2 <SVCCTL_App_Notification+0x4ea>
 80039a4:	200006ac 	.word	0x200006ac
 80039a8:	08010e04 	.word	0x08010e04
 80039ac:	08010e30 	.word	0x08010e30
 80039b0:	08010e6c 	.word	0x08010e6c
 80039b4:	3ff40000 	.word	0x3ff40000
 80039b8:	08010ea0 	.word	0x08010ea0
 80039bc:	08010f0c 	.word	0x08010f0c
 80039c0:	08010f3c 	.word	0x08010f3c
 80039c4:	08010f48 	.word	0x08010f48
 80039c8:	08010f54 	.word	0x08010f54
 80039cc:	08010f74 	.word	0x08010f74
 80039d0:	08010f94 	.word	0x08010f94
 80039d4:	08010fb8 	.word	0x08010fb8
 80039d8:	08011000 	.word	0x08011000
 80039dc:	08011050 	.word	0x08011050
 80039e0:	08011068 	.word	0x08011068
 80039e4:	0801107c 	.word	0x0801107c
 80039e8:	080110a0 	.word	0x080110a0
              p_enhanced_connection_complete_event = (hci_le_enhanced_connection_complete_event_rp0 *) p_meta_evt->data;
 80039ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039ee:	3301      	adds	r3, #1
 80039f0:	633b      	str	r3, [r7, #48]	; 0x30
              HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 80039f2:	4ba2      	ldr	r3, [pc, #648]	; (8003c7c <SVCCTL_App_Notification+0x5b4>)
 80039f4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80039f8:	4618      	mov	r0, r3
 80039fa:	f7fe fded 	bl	80025d8 <HW_TS_Stop>
              APP_DBG_MSG(">>== HCI_LE_ENHANCED_CONNECTION_COMPLETE_SUBEVT_CODE - Connection handle: 0x%x\n", p_enhanced_connection_complete_event->Connection_Handle);
 80039fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a00:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	4619      	mov	r1, r3
 8003a08:	489d      	ldr	r0, [pc, #628]	; (8003c80 <SVCCTL_App_Notification+0x5b8>)
 8003a0a:	f00a fdfd 	bl	800e608 <iprintf>
                          p_enhanced_connection_complete_event->Peer_Address[5],
 8003a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a10:	7a9b      	ldrb	r3, [r3, #10]
              APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 8003a12:	4618      	mov	r0, r3
                          p_enhanced_connection_complete_event->Peer_Address[4],
 8003a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a16:	7a5b      	ldrb	r3, [r3, #9]
              APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 8003a18:	461c      	mov	r4, r3
                          p_enhanced_connection_complete_event->Peer_Address[3],
 8003a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a1c:	7a1b      	ldrb	r3, [r3, #8]
              APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 8003a1e:	461d      	mov	r5, r3
                          p_enhanced_connection_complete_event->Peer_Address[2],
 8003a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a22:	79db      	ldrb	r3, [r3, #7]
              APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 8003a24:	461a      	mov	r2, r3
                          p_enhanced_connection_complete_event->Peer_Address[1],
 8003a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a28:	799b      	ldrb	r3, [r3, #6]
              APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 8003a2a:	4619      	mov	r1, r3
                          p_enhanced_connection_complete_event->Peer_Address[0]);
 8003a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a2e:	795b      	ldrb	r3, [r3, #5]
              APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 8003a30:	9302      	str	r3, [sp, #8]
 8003a32:	9101      	str	r1, [sp, #4]
 8003a34:	9200      	str	r2, [sp, #0]
 8003a36:	462b      	mov	r3, r5
 8003a38:	4622      	mov	r2, r4
 8003a3a:	4601      	mov	r1, r0
 8003a3c:	4891      	ldr	r0, [pc, #580]	; (8003c84 <SVCCTL_App_Notification+0x5bc>)
 8003a3e:	f00a fde3 	bl	800e608 <iprintf>
                          p_enhanced_connection_complete_event->Conn_Interval*1.25,
 8003a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a44:	f8b3 3017 	ldrh.w	r3, [r3, #23]
 8003a48:	b29b      	uxth	r3, r3
              APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f7fc fd52 	bl	80004f4 <__aeabi_i2d>
 8003a50:	f04f 0200 	mov.w	r2, #0
 8003a54:	4b8c      	ldr	r3, [pc, #560]	; (8003c88 <SVCCTL_App_Notification+0x5c0>)
 8003a56:	f7fc fdb7 	bl	80005c8 <__aeabi_dmul>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	460b      	mov	r3, r1
 8003a5e:	4610      	mov	r0, r2
 8003a60:	4619      	mov	r1, r3
                          p_enhanced_connection_complete_event->Conn_Latency,
 8003a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a64:	f8b3 3019 	ldrh.w	r3, [r3, #25]
 8003a68:	b29b      	uxth	r3, r3
              APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 8003a6a:	461c      	mov	r4, r3
                          p_enhanced_connection_complete_event->Supervision_Timeout*10
 8003a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a6e:	f8b3 301b 	ldrh.w	r3, [r3, #27]
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	461a      	mov	r2, r3
              APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 8003a76:	4613      	mov	r3, r2
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	4413      	add	r3, r2
 8003a7c:	005b      	lsls	r3, r3, #1
 8003a7e:	9301      	str	r3, [sp, #4]
 8003a80:	9400      	str	r4, [sp, #0]
 8003a82:	4602      	mov	r2, r0
 8003a84:	460b      	mov	r3, r1
 8003a86:	4881      	ldr	r0, [pc, #516]	; (8003c8c <SVCCTL_App_Notification+0x5c4>)
 8003a88:	f00a fdbe 	bl	800e608 <iprintf>
              if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8003a8c:	4b7b      	ldr	r3, [pc, #492]	; (8003c7c <SVCCTL_App_Notification+0x5b4>)
 8003a8e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003a92:	2b04      	cmp	r3, #4
 8003a94:	d104      	bne.n	8003aa0 <SVCCTL_App_Notification+0x3d8>
                BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8003a96:	4b79      	ldr	r3, [pc, #484]	; (8003c7c <SVCCTL_App_Notification+0x5b4>)
 8003a98:	2206      	movs	r2, #6
 8003a9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8003a9e:	e003      	b.n	8003aa8 <SVCCTL_App_Notification+0x3e0>
                BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8003aa0:	4b76      	ldr	r3, [pc, #472]	; (8003c7c <SVCCTL_App_Notification+0x5b4>)
 8003aa2:	2205      	movs	r2, #5
 8003aa4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
              BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_enhanced_connection_complete_event->Connection_Handle;
 8003aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aaa:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8003aae:	b29a      	uxth	r2, r3
 8003ab0:	4b72      	ldr	r3, [pc, #456]	; (8003c7c <SVCCTL_App_Notification+0x5b4>)
 8003ab2:	82da      	strh	r2, [r3, #22]
              break; /* HCI_LE_ENHANCED_CONNECTION_COMPLETE_SUBEVT_CODE */
 8003ab4:	e07d      	b.n	8003bb2 <SVCCTL_App_Notification+0x4ea>
              int k = 0;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	64fb      	str	r3, [r7, #76]	; 0x4c
              p_le_advertising_event = (hci_le_advertising_report_event_rp0 *) p_meta_evt->data;
 8003aba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003abc:	3301      	adds	r3, #1
 8003abe:	62bb      	str	r3, [r7, #40]	; 0x28
              event_type = p_le_advertising_event->Advertising_Report[0].Event_Type;
 8003ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ac2:	785b      	ldrb	r3, [r3, #1]
 8003ac4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              event_data_size = p_le_advertising_event->Advertising_Report[0].Length_Data;
 8003ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aca:	7a5b      	ldrb	r3, [r3, #9]
 8003acc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
              adv_report_data = (uint8_t*)(&p_le_advertising_event->Advertising_Report[0].Length_Data) + 1;
 8003ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad2:	3309      	adds	r3, #9
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	623b      	str	r3, [r7, #32]
              k = 0;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	64fb      	str	r3, [r7, #76]	; 0x4c
              if (event_type == ADV_IND)
 8003adc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d165      	bne.n	8003bb0 <SVCCTL_App_Notification+0x4e8>
                while(k < event_data_size)
 8003ae4:	e05c      	b.n	8003ba0 <SVCCTL_App_Notification+0x4d8>
                  adlength = adv_report_data[k];
 8003ae6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ae8:	6a3a      	ldr	r2, [r7, #32]
 8003aea:	4413      	add	r3, r2
 8003aec:	781b      	ldrb	r3, [r3, #0]
 8003aee:	77fb      	strb	r3, [r7, #31]
                  adtype = adv_report_data[k + 1];
 8003af0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003af2:	3301      	adds	r3, #1
 8003af4:	6a3a      	ldr	r2, [r7, #32]
 8003af6:	4413      	add	r3, r2
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	77bb      	strb	r3, [r7, #30]
                  switch (adtype)
 8003afc:	7fbb      	ldrb	r3, [r7, #30]
 8003afe:	2bff      	cmp	r3, #255	; 0xff
 8003b00:	d009      	beq.n	8003b16 <SVCCTL_App_Notification+0x44e>
 8003b02:	2bff      	cmp	r3, #255	; 0xff
 8003b04:	dc40      	bgt.n	8003b88 <SVCCTL_App_Notification+0x4c0>
 8003b06:	2b16      	cmp	r3, #22
 8003b08:	d040      	beq.n	8003b8c <SVCCTL_App_Notification+0x4c4>
 8003b0a:	2b16      	cmp	r3, #22
 8003b0c:	dc3c      	bgt.n	8003b88 <SVCCTL_App_Notification+0x4c0>
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d03e      	beq.n	8003b90 <SVCCTL_App_Notification+0x4c8>
 8003b12:	2b0a      	cmp	r3, #10
                      break;
 8003b14:	e03f      	b.n	8003b96 <SVCCTL_App_Notification+0x4ce>
                        if (adlength >= 7 && adv_report_data[k + 2] == 0x01)
 8003b16:	7ffb      	ldrb	r3, [r7, #31]
 8003b18:	2b06      	cmp	r3, #6
 8003b1a:	d93b      	bls.n	8003b94 <SVCCTL_App_Notification+0x4cc>
 8003b1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b1e:	3302      	adds	r3, #2
 8003b20:	6a3a      	ldr	r2, [r7, #32]
 8003b22:	4413      	add	r3, r2
 8003b24:	781b      	ldrb	r3, [r3, #0]
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d134      	bne.n	8003b94 <SVCCTL_App_Notification+0x4cc>
                          APP_DBG_MSG("--- ST MANUFACTURER ID --- \n");
 8003b2a:	4859      	ldr	r0, [pc, #356]	; (8003c90 <SVCCTL_App_Notification+0x5c8>)
 8003b2c:	f00a fdd2 	bl	800e6d4 <puts>
                          switch (adv_report_data[k + 3])
 8003b30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b32:	3303      	adds	r3, #3
 8003b34:	6a3a      	ldr	r2, [r7, #32]
 8003b36:	4413      	add	r3, r2
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	2b88      	cmp	r3, #136	; 0x88
 8003b3c:	d122      	bne.n	8003b84 <SVCCTL_App_Notification+0x4bc>
                                APP_DBG_MSG("-- SERVER DETECTED -- VIA MAN ID\n");
 8003b3e:	4855      	ldr	r0, [pc, #340]	; (8003c94 <SVCCTL_App_Notification+0x5cc>)
 8003b40:	f00a fdc8 	bl	800e6d4 <puts>
                                BleApplicationContext.DeviceServerFound = AT_LEAST_ONE_DEVICE_FOUND;
 8003b44:	4b4d      	ldr	r3, [pc, #308]	; (8003c7c <SVCCTL_App_Notification+0x5b4>)
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
                                SERVER_REMOTE_BDADDR[0] = p_le_advertising_event->Advertising_Report[0].Address[0];
 8003b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b4e:	78da      	ldrb	r2, [r3, #3]
 8003b50:	4b51      	ldr	r3, [pc, #324]	; (8003c98 <SVCCTL_App_Notification+0x5d0>)
 8003b52:	701a      	strb	r2, [r3, #0]
                                SERVER_REMOTE_BDADDR[1] = p_le_advertising_event->Advertising_Report[0].Address[1];
 8003b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b56:	791a      	ldrb	r2, [r3, #4]
 8003b58:	4b4f      	ldr	r3, [pc, #316]	; (8003c98 <SVCCTL_App_Notification+0x5d0>)
 8003b5a:	705a      	strb	r2, [r3, #1]
                                SERVER_REMOTE_BDADDR[2] = p_le_advertising_event->Advertising_Report[0].Address[2];
 8003b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b5e:	795a      	ldrb	r2, [r3, #5]
 8003b60:	4b4d      	ldr	r3, [pc, #308]	; (8003c98 <SVCCTL_App_Notification+0x5d0>)
 8003b62:	709a      	strb	r2, [r3, #2]
                                SERVER_REMOTE_BDADDR[3] = p_le_advertising_event->Advertising_Report[0].Address[3];
 8003b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b66:	799a      	ldrb	r2, [r3, #6]
 8003b68:	4b4b      	ldr	r3, [pc, #300]	; (8003c98 <SVCCTL_App_Notification+0x5d0>)
 8003b6a:	70da      	strb	r2, [r3, #3]
                                SERVER_REMOTE_BDADDR[4] = p_le_advertising_event->Advertising_Report[0].Address[4];
 8003b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b6e:	79da      	ldrb	r2, [r3, #7]
 8003b70:	4b49      	ldr	r3, [pc, #292]	; (8003c98 <SVCCTL_App_Notification+0x5d0>)
 8003b72:	711a      	strb	r2, [r3, #4]
                                SERVER_REMOTE_BDADDR[5] = p_le_advertising_event->Advertising_Report[0].Address[5];
 8003b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b76:	7a1a      	ldrb	r2, [r3, #8]
 8003b78:	4b47      	ldr	r3, [pc, #284]	; (8003c98 <SVCCTL_App_Notification+0x5d0>)
 8003b7a:	715a      	strb	r2, [r3, #5]
                                aci_gap_terminate_gap_proc(GAP_GENERAL_DISCOVERY_PROC);
 8003b7c:	2002      	movs	r0, #2
 8003b7e:	f007 fad9 	bl	800b134 <aci_gap_terminate_gap_proc>
                              break;
 8003b82:	e000      	b.n	8003b86 <SVCCTL_App_Notification+0x4be>
                              break;
 8003b84:	bf00      	nop
                      break;
 8003b86:	e005      	b.n	8003b94 <SVCCTL_App_Notification+0x4cc>
                      break;
 8003b88:	bf00      	nop
 8003b8a:	e004      	b.n	8003b96 <SVCCTL_App_Notification+0x4ce>
                      break;
 8003b8c:	bf00      	nop
 8003b8e:	e002      	b.n	8003b96 <SVCCTL_App_Notification+0x4ce>
                      break;
 8003b90:	bf00      	nop
 8003b92:	e000      	b.n	8003b96 <SVCCTL_App_Notification+0x4ce>
                      break;
 8003b94:	bf00      	nop
                  k += adlength + 1;
 8003b96:	7ffb      	ldrb	r3, [r7, #31]
 8003b98:	3301      	adds	r3, #1
 8003b9a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b9c:	4413      	add	r3, r2
 8003b9e:	64fb      	str	r3, [r7, #76]	; 0x4c
                while(k < event_data_size)
 8003ba0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003ba4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	db9d      	blt.n	8003ae6 <SVCCTL_App_Notification+0x41e>
            break;
 8003baa:	e001      	b.n	8003bb0 <SVCCTL_App_Notification+0x4e8>
            break;
 8003bac:	bf00      	nop
 8003bae:	e0a7      	b.n	8003d00 <SVCCTL_App_Notification+0x638>
            break;
 8003bb0:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 8003bb2:	e0a5      	b.n	8003d00 <SVCCTL_App_Notification+0x638>
        p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 8003bb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bb6:	3302      	adds	r3, #2
 8003bb8:	647b      	str	r3, [r7, #68]	; 0x44
        switch (p_blecore_evt->ecode)
 8003bba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bbc:	881b      	ldrh	r3, [r3, #0]
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	f240 4209 	movw	r2, #1033	; 0x409
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	dc1d      	bgt.n	8003c04 <SVCCTL_App_Notification+0x53c>
 8003bc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bcc:	f340 8093 	ble.w	8003cf6 <SVCCTL_App_Notification+0x62e>
 8003bd0:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 8003bd4:	2b08      	cmp	r3, #8
 8003bd6:	f200 808e 	bhi.w	8003cf6 <SVCCTL_App_Notification+0x62e>
 8003bda:	a201      	add	r2, pc, #4	; (adr r2, 8003be0 <SVCCTL_App_Notification+0x518>)
 8003bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003be0:	08003c59 	.word	0x08003c59
 8003be4:	08003c67 	.word	0x08003c67
 8003be8:	08003cf7 	.word	0x08003cf7
 8003bec:	08003cf7 	.word	0x08003cf7
 8003bf0:	08003cf7 	.word	0x08003cf7
 8003bf4:	08003cf7 	.word	0x08003cf7
 8003bf8:	08003c0d 	.word	0x08003c0d
 8003bfc:	08003cf7 	.word	0x08003cf7
 8003c00:	08003cb5 	.word	0x08003cb5
 8003c04:	f5b3 6f41 	cmp.w	r3, #3088	; 0xc10
 8003c08:	d071      	beq.n	8003cee <SVCCTL_App_Notification+0x626>
            break;
 8003c0a:	e074      	b.n	8003cf6 <SVCCTL_App_Notification+0x62e>
            aci_gap_proc_complete_event_rp0 *p_gap_evt_proc_complete = (void*) p_blecore_evt->data;
 8003c0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c0e:	3302      	adds	r3, #2
 8003c10:	643b      	str	r3, [r7, #64]	; 0x40
            if (p_gap_evt_proc_complete->Procedure_Code == GAP_GENERAL_DISCOVERY_PROC)
 8003c12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d16f      	bne.n	8003cfa <SVCCTL_App_Notification+0x632>
              if( p_gap_evt_proc_complete->Status != BLE_STATUS_SUCCESS )
 8003c1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c1c:	785b      	ldrb	r3, [r3, #1]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d006      	beq.n	8003c30 <SVCCTL_App_Notification+0x568>
                             p_gap_evt_proc_complete->Status);
 8003c22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c24:	785b      	ldrb	r3, [r3, #1]
                APP_DBG_MSG("-- GAP GENERAL DISCOVERY PROCEDURE FAILED 0x%x\n",
 8003c26:	4619      	mov	r1, r3
 8003c28:	481c      	ldr	r0, [pc, #112]	; (8003c9c <SVCCTL_App_Notification+0x5d4>)
 8003c2a:	f00a fced 	bl	800e608 <iprintf>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8003c2e:	e064      	b.n	8003cfa <SVCCTL_App_Notification+0x632>
                BSP_LED_Off(LED_BLUE);
 8003c30:	2000      	movs	r0, #0
 8003c32:	f001 f867 	bl	8004d04 <BSP_LED_Off>
                if (BleApplicationContext.DeviceServerFound != NO_DEVICE_FOUND)
 8003c36:	4b11      	ldr	r3, [pc, #68]	; (8003c7c <SVCCTL_App_Notification+0x5b4>)
 8003c38:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d007      	beq.n	8003c50 <SVCCTL_App_Notification+0x588>
                  APP_DBG_MSG("-- GAP GENERAL DISCOVERY PROCEDURE COMPLETED\n");
 8003c40:	4817      	ldr	r0, [pc, #92]	; (8003ca0 <SVCCTL_App_Notification+0x5d8>)
 8003c42:	f00a fd47 	bl	800e6d4 <puts>
                  UTIL_SEQ_SetTask(1 << CFG_TASK_CONN_REQ_ID, CFG_SCH_PRIO_0);
 8003c46:	2100      	movs	r1, #0
 8003c48:	2004      	movs	r0, #4
 8003c4a:	f009 fe95 	bl	800d978 <UTIL_SEQ_SetTask>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8003c4e:	e054      	b.n	8003cfa <SVCCTL_App_Notification+0x632>
                  APP_DBG_MSG("-- GAP GENERAL DISCOVERY PROCEDURE COMPLETED WITH NO DEVICE FOUND\n");
 8003c50:	4814      	ldr	r0, [pc, #80]	; (8003ca4 <SVCCTL_App_Notification+0x5dc>)
 8003c52:	f00a fd3f 	bl	800e6d4 <puts>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8003c56:	e050      	b.n	8003cfa <SVCCTL_App_Notification+0x632>
            APP_DBG_MSG("Pairing complete \n");
 8003c58:	4813      	ldr	r0, [pc, #76]	; (8003ca8 <SVCCTL_App_Notification+0x5e0>)
 8003c5a:	f00a fd3b 	bl	800e6d4 <puts>
            UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_GAP_PROC_COMPLETE);
 8003c5e:	2004      	movs	r0, #4
 8003c60:	f009 fef6 	bl	800da50 <UTIL_SEQ_SetEvt>
          break;
 8003c64:	e04a      	b.n	8003cfc <SVCCTL_App_Notification+0x634>
            APP_DBG_MSG("PAIRING PHASE - PASSKEY REQUEST 111111 \n");
 8003c66:	4811      	ldr	r0, [pc, #68]	; (8003cac <SVCCTL_App_Notification+0x5e4>)
 8003c68:	f00a fd34 	bl	800e6d4 <puts>
            aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, 111111);
 8003c6c:	4b03      	ldr	r3, [pc, #12]	; (8003c7c <SVCCTL_App_Notification+0x5b4>)
 8003c6e:	8adb      	ldrh	r3, [r3, #22]
 8003c70:	490f      	ldr	r1, [pc, #60]	; (8003cb0 <SVCCTL_App_Notification+0x5e8>)
 8003c72:	4618      	mov	r0, r3
 8003c74:	f007 f8b4 	bl	800ade0 <aci_gap_pass_key_resp>
          break;
 8003c78:	e040      	b.n	8003cfc <SVCCTL_App_Notification+0x634>
 8003c7a:	bf00      	nop
 8003c7c:	200006ac 	.word	0x200006ac
 8003c80:	080110a4 	.word	0x080110a4
 8003c84:	08011000 	.word	0x08011000
 8003c88:	3ff40000 	.word	0x3ff40000
 8003c8c:	08010ea0 	.word	0x08010ea0
 8003c90:	080110f4 	.word	0x080110f4
 8003c94:	08011110 	.word	0x08011110
 8003c98:	20000734 	.word	0x20000734
 8003c9c:	08011134 	.word	0x08011134
 8003ca0:	08011164 	.word	0x08011164
 8003ca4:	08011194 	.word	0x08011194
 8003ca8:	080111d8 	.word	0x080111d8
 8003cac:	080111ec 	.word	0x080111ec
 8003cb0:	0001b207 	.word	0x0001b207
            APP_DBG_MSG("PAIRING PHASE - NUMERIC COMPARISON \r\n");
 8003cb4:	4815      	ldr	r0, [pc, #84]	; (8003d0c <SVCCTL_App_Notification+0x644>)
 8003cb6:	f00a fd0d 	bl	800e6d4 <puts>
                        ((aci_gap_numeric_comparison_value_event_rp0 *)(p_blecore_evt->data))->Numeric_Value);
 8003cba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cbc:	3302      	adds	r3, #2
            APP_DBG_MSG("numeric_value = %ld\n",
 8003cbe:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	4812      	ldr	r0, [pc, #72]	; (8003d10 <SVCCTL_App_Notification+0x648>)
 8003cc6:	f00a fc9f 	bl	800e608 <iprintf>
                        ((aci_gap_numeric_comparison_value_event_rp0 *)(p_blecore_evt->data))->Numeric_Value);
 8003cca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ccc:	3302      	adds	r3, #2
            APP_DBG_MSG("Hex_value = %lx\n",
 8003cce:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8003cd2:	4619      	mov	r1, r3
 8003cd4:	480f      	ldr	r0, [pc, #60]	; (8003d14 <SVCCTL_App_Notification+0x64c>)
 8003cd6:	f00a fc97 	bl	800e608 <iprintf>
            aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES); /* CONFIRM_YES = 1 */
 8003cda:	4b0f      	ldr	r3, [pc, #60]	; (8003d18 <SVCCTL_App_Notification+0x650>)
 8003cdc:	8adb      	ldrh	r3, [r3, #22]
 8003cde:	2101      	movs	r1, #1
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f007 fa7b 	bl	800b1dc <aci_gap_numeric_comparison_value_confirm_yesno>
            APP_DBG_MSG("\r\n\r** CONFIRM YES \n");
 8003ce6:	480d      	ldr	r0, [pc, #52]	; (8003d1c <SVCCTL_App_Notification+0x654>)
 8003ce8:	f00a fcf4 	bl	800e6d4 <puts>
          break;
 8003cec:	e006      	b.n	8003cfc <SVCCTL_App_Notification+0x634>
            UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_GATT_PROC_COMPLETE);
 8003cee:	2008      	movs	r0, #8
 8003cf0:	f009 feae 	bl	800da50 <UTIL_SEQ_SetEvt>
          break; /*ACI_GATT_PROC_COMPLETE_VSEVT_CODE*/
 8003cf4:	e002      	b.n	8003cfc <SVCCTL_App_Notification+0x634>
            break;
 8003cf6:	bf00      	nop
 8003cf8:	e002      	b.n	8003d00 <SVCCTL_App_Notification+0x638>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8003cfa:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8003cfc:	e000      	b.n	8003d00 <SVCCTL_App_Notification+0x638>
      break;
 8003cfe:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8003d00:	2301      	movs	r3, #1
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3750      	adds	r7, #80	; 0x50
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bdb0      	pop	{r4, r5, r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	08011214 	.word	0x08011214
 8003d10:	0801123c 	.word	0x0801123c
 8003d14:	08011254 	.word	0x08011254
 8003d18:	200006ac 	.word	0x200006ac
 8003d1c:	08011268 	.word	0x08011268

08003d20 <APP_BLE_Key_Button1_Action>:
  return BleApplicationContext.Device_Connection_Status;
}

/* USER CODE BEGIN FD*/
void APP_BLE_Key_Button1_Action(void)
{
 8003d20:	b480      	push	{r7}
 8003d22:	af00      	add	r7, sp, #0
}
 8003d24:	bf00      	nop
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr

08003d2e <APP_BLE_Key_Button2_Action>:

void APP_BLE_Key_Button2_Action(void)
{
 8003d2e:	b480      	push	{r7}
 8003d30:	af00      	add	r7, sp, #0
}
 8003d32:	bf00      	nop
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <APP_BLE_Key_Button3_Action>:

void APP_BLE_Key_Button3_Action(void)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	af00      	add	r7, sp, #0
}
 8003d40:	bf00      	nop
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr
	...

08003d4c <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8003d52:	4b06      	ldr	r3, [pc, #24]	; (8003d6c <Ble_Tl_Init+0x20>)
 8003d54:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8003d56:	4b06      	ldr	r3, [pc, #24]	; (8003d70 <Ble_Tl_Init+0x24>)
 8003d58:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8003d5a:	463b      	mov	r3, r7
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	4805      	ldr	r0, [pc, #20]	; (8003d74 <Ble_Tl_Init+0x28>)
 8003d60:	f008 f9f0 	bl	800c144 <hci_init>

  return;
 8003d64:	bf00      	nop
}
 8003d66:	3708      	adds	r7, #8
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	20030028 	.word	0x20030028
 8003d70:	08004355 	.word	0x08004355
 8003d74:	0800431d 	.word	0x0800431d

08003d78 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 8003d78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d7a:	b08d      	sub	sp, #52	; 0x34
 8003d7c:	af06      	add	r7, sp, #24
  const uint8_t *p_bd_addr;

#if (CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR)
  uint32_t a_srd_bd_addr[2] = {0,0};
#endif
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 8003d7e:	2300      	movs	r3, #0
 8003d80:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8003d82:	2392      	movs	r3, #146	; 0x92
 8003d84:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init*/

  APP_DBG_MSG("==>> Start Ble_Hci_Gap_Gatt_Init function\n");
 8003d86:	48a5      	ldr	r0, [pc, #660]	; (800401c <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8003d88:	f00a fca4 	bl	800e6d4 <puts>

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 8003d8c:	f007 fe25 	bl	800b9da <hci_reset>
 8003d90:	4603      	mov	r3, r0
 8003d92:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8003d94:	7dfb      	ldrb	r3, [r7, #23]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d005      	beq.n	8003da6 <Ble_Hci_Gap_Gatt_Init+0x2e>
  {
    APP_DBG_MSG("  Fail   : hci_reset command, result: 0x%x \n", ret);
 8003d9a:	7dfb      	ldrb	r3, [r7, #23]
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	48a0      	ldr	r0, [pc, #640]	; (8004020 <Ble_Hci_Gap_Gatt_Init+0x2a8>)
 8003da0:	f00a fc32 	bl	800e608 <iprintf>
 8003da4:	e002      	b.n	8003dac <Ble_Hci_Gap_Gatt_Init+0x34>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_reset command\n");
 8003da6:	489f      	ldr	r0, [pc, #636]	; (8004024 <Ble_Hci_Gap_Gatt_Init+0x2ac>)
 8003da8:	f00a fc94 	bl	800e6d4 <puts>
  }
 
  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 8003dac:	f000 fa50 	bl	8004250 <BleGetBdAddress>
 8003db0:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, 
 8003db2:	693a      	ldr	r2, [r7, #16]
 8003db4:	2106      	movs	r1, #6
 8003db6:	2000      	movs	r0, #0
 8003db8:	f007 fd23 	bl	800b802 <aci_hal_write_config_data>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	75fb      	strb	r3, [r7, #23]
                                  CONFIG_DATA_PUBADDR_LEN, 
                                  (uint8_t*) p_bd_addr);
  if (ret != BLE_STATUS_SUCCESS)
 8003dc0:	7dfb      	ldrb	r3, [r7, #23]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d005      	beq.n	8003dd2 <Ble_Hci_Gap_Gatt_Init+0x5a>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET, result: 0x%x \n", ret);
 8003dc6:	7dfb      	ldrb	r3, [r7, #23]
 8003dc8:	4619      	mov	r1, r3
 8003dca:	4897      	ldr	r0, [pc, #604]	; (8004028 <Ble_Hci_Gap_Gatt_Init+0x2b0>)
 8003dcc:	f00a fc1c 	bl	800e608 <iprintf>
 8003dd0:	e021      	b.n	8003e16 <Ble_Hci_Gap_Gatt_Init+0x9e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET\n");
 8003dd2:	4896      	ldr	r0, [pc, #600]	; (800402c <Ble_Hci_Gap_Gatt_Init+0x2b4>)
 8003dd4:	f00a fc7e 	bl	800e6d4 <puts>
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	3305      	adds	r3, #5
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	4618      	mov	r0, r3
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	3304      	adds	r3, #4
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	461c      	mov	r4, r3
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	3303      	adds	r3, #3
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	461d      	mov	r5, r3
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	3302      	adds	r3, #2
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	461a      	mov	r2, r3
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	3301      	adds	r3, #1
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	4619      	mov	r1, r3
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	9302      	str	r3, [sp, #8]
 8003e06:	9101      	str	r1, [sp, #4]
 8003e08:	9200      	str	r2, [sp, #0]
 8003e0a:	462b      	mov	r3, r5
 8003e0c:	4622      	mov	r2, r4
 8003e0e:	4601      	mov	r1, r0
 8003e10:	4887      	ldr	r0, [pc, #540]	; (8004030 <Ble_Hci_Gap_Gatt_Init+0x2b8>)
 8003e12:	f00a fbf9 	bl	800e608 <iprintf>
  }

#if (CFG_BLE_ADDRESS_TYPE == GAP_PUBLIC_ADDR)
  /* BLE MAC in ADV Packet */
  a_ManufData[ sizeof(a_ManufData)-6] = p_bd_addr[5];
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	3305      	adds	r3, #5
 8003e1a:	781a      	ldrb	r2, [r3, #0]
 8003e1c:	4b85      	ldr	r3, [pc, #532]	; (8004034 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 8003e1e:	721a      	strb	r2, [r3, #8]
  a_ManufData[ sizeof(a_ManufData)-5] = p_bd_addr[4];
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	3304      	adds	r3, #4
 8003e24:	781a      	ldrb	r2, [r3, #0]
 8003e26:	4b83      	ldr	r3, [pc, #524]	; (8004034 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 8003e28:	725a      	strb	r2, [r3, #9]
  a_ManufData[ sizeof(a_ManufData)-4] = p_bd_addr[3];
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	3303      	adds	r3, #3
 8003e2e:	781a      	ldrb	r2, [r3, #0]
 8003e30:	4b80      	ldr	r3, [pc, #512]	; (8004034 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 8003e32:	729a      	strb	r2, [r3, #10]
  a_ManufData[ sizeof(a_ManufData)-3] = p_bd_addr[2];
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	3302      	adds	r3, #2
 8003e38:	781a      	ldrb	r2, [r3, #0]
 8003e3a:	4b7e      	ldr	r3, [pc, #504]	; (8004034 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 8003e3c:	72da      	strb	r2, [r3, #11]
  a_ManufData[ sizeof(a_ManufData)-2] = p_bd_addr[1];
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	3301      	adds	r3, #1
 8003e42:	781a      	ldrb	r2, [r3, #0]
 8003e44:	4b7b      	ldr	r3, [pc, #492]	; (8004034 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 8003e46:	731a      	strb	r2, [r3, #12]
  a_ManufData[ sizeof(a_ManufData)-1] = p_bd_addr[0];
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	781a      	ldrb	r2, [r3, #0]
 8003e4c:	4b79      	ldr	r3, [pc, #484]	; (8004034 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 8003e4e:	735a      	strb	r2, [r3, #13]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive LTK and CSRK 
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 8003e50:	4a79      	ldr	r2, [pc, #484]	; (8004038 <Ble_Hci_Gap_Gatt_Init+0x2c0>)
 8003e52:	2110      	movs	r1, #16
 8003e54:	2018      	movs	r0, #24
 8003e56:	f007 fcd4 	bl	800b802 <aci_hal_write_config_data>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8003e5e:	7dfb      	ldrb	r3, [r7, #23]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d005      	beq.n	8003e70 <Ble_Hci_Gap_Gatt_Init+0xf8>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET, result: 0x%x \n", ret);
 8003e64:	7dfb      	ldrb	r3, [r7, #23]
 8003e66:	4619      	mov	r1, r3
 8003e68:	4874      	ldr	r0, [pc, #464]	; (800403c <Ble_Hci_Gap_Gatt_Init+0x2c4>)
 8003e6a:	f00a fbcd 	bl	800e608 <iprintf>
 8003e6e:	e002      	b.n	8003e76 <Ble_Hci_Gap_Gatt_Init+0xfe>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET\n");
 8003e70:	4873      	ldr	r0, [pc, #460]	; (8004040 <Ble_Hci_Gap_Gatt_Init+0x2c8>)
 8003e72:	f00a fc2f 	bl	800e6d4 <puts>
  }
    
   /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8003e76:	4a73      	ldr	r2, [pc, #460]	; (8004044 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 8003e78:	2110      	movs	r1, #16
 8003e7a:	2008      	movs	r0, #8
 8003e7c:	f007 fcc1 	bl	800b802 <aci_hal_write_config_data>
 8003e80:	4603      	mov	r3, r0
 8003e82:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8003e84:	7dfb      	ldrb	r3, [r7, #23]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d005      	beq.n	8003e96 <Ble_Hci_Gap_Gatt_Init+0x11e>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET, result: 0x%x \n", ret);
 8003e8a:	7dfb      	ldrb	r3, [r7, #23]
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	486e      	ldr	r0, [pc, #440]	; (8004048 <Ble_Hci_Gap_Gatt_Init+0x2d0>)
 8003e90:	f00a fbba 	bl	800e608 <iprintf>
 8003e94:	e002      	b.n	8003e9c <Ble_Hci_Gap_Gatt_Init+0x124>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET\n");
 8003e96:	486d      	ldr	r0, [pc, #436]	; (800404c <Ble_Hci_Gap_Gatt_Init+0x2d4>)
 8003e98:	f00a fc1c 	bl	800e6d4 <puts>
  }
  
  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8003e9c:	2118      	movs	r1, #24
 8003e9e:	2001      	movs	r0, #1
 8003ea0:	f007 fd34 	bl	800b90c <aci_hal_set_tx_power_level>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8003ea8:	7dfb      	ldrb	r3, [r7, #23]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d005      	beq.n	8003eba <Ble_Hci_Gap_Gatt_Init+0x142>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%x \n", ret);
 8003eae:	7dfb      	ldrb	r3, [r7, #23]
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	4867      	ldr	r0, [pc, #412]	; (8004050 <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 8003eb4:	f00a fba8 	bl	800e608 <iprintf>
 8003eb8:	e002      	b.n	8003ec0 <Ble_Hci_Gap_Gatt_Init+0x148>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n");
 8003eba:	4866      	ldr	r0, [pc, #408]	; (8004054 <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 8003ebc:	f00a fc0a 	bl	800e6d4 <puts>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 8003ec0:	f007 f9f3 	bl	800b2aa <aci_gatt_init>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8003ec8:	7dfb      	ldrb	r3, [r7, #23]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d005      	beq.n	8003eda <Ble_Hci_Gap_Gatt_Init+0x162>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_init command, result: 0x%x \n", ret);
 8003ece:	7dfb      	ldrb	r3, [r7, #23]
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	4861      	ldr	r0, [pc, #388]	; (8004058 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 8003ed4:	f00a fb98 	bl	800e608 <iprintf>
 8003ed8:	e002      	b.n	8003ee0 <Ble_Hci_Gap_Gatt_Init+0x168>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_init command\n");
 8003eda:	4860      	ldr	r0, [pc, #384]	; (800405c <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 8003edc:	f00a fbfa 	bl	800e6d4 <puts>
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8003ee4:	7bfb      	ldrb	r3, [r7, #15]
 8003ee6:	f043 0301 	orr.w	r3, r3, #1
 8003eea:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 8003eec:	7bfb      	ldrb	r3, [r7, #15]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d02b      	beq.n	8003f4a <Ble_Hci_Gap_Gatt_Init+0x1d2>
  {
    const char *name = "CM-200";
 8003ef2:	4b5b      	ldr	r3, [pc, #364]	; (8004060 <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 8003ef4:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 8003ef6:	1dba      	adds	r2, r7, #6
 8003ef8:	7bf8      	ldrb	r0, [r7, #15]
 8003efa:	1cbb      	adds	r3, r7, #2
 8003efc:	9301      	str	r3, [sp, #4]
 8003efe:	1d3b      	adds	r3, r7, #4
 8003f00:	9300      	str	r3, [sp, #0]
 8003f02:	4613      	mov	r3, r2
 8003f04:	2207      	movs	r2, #7
 8003f06:	2100      	movs	r1, #0
 8003f08:	f006 ffd1 	bl	800aeae <aci_gap_init>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	75fb      	strb	r3, [r7, #23]
                       APPBLE_GAP_DEVICE_NAME_LENGTH,
                       &gap_service_handle,
                       &gap_dev_name_char_handle,
                       &gap_appearance_char_handle);

    if (ret != BLE_STATUS_SUCCESS)
 8003f10:	7dfb      	ldrb	r3, [r7, #23]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d005      	beq.n	8003f22 <Ble_Hci_Gap_Gatt_Init+0x1aa>
    {
      APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%x \n", ret);
 8003f16:	7dfb      	ldrb	r3, [r7, #23]
 8003f18:	4619      	mov	r1, r3
 8003f1a:	4852      	ldr	r0, [pc, #328]	; (8004064 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 8003f1c:	f00a fb74 	bl	800e608 <iprintf>
 8003f20:	e002      	b.n	8003f28 <Ble_Hci_Gap_Gatt_Init+0x1b0>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
 8003f22:	4851      	ldr	r0, [pc, #324]	; (8004068 <Ble_Hci_Gap_Gatt_Init+0x2f0>)
 8003f24:	f00a fbd6 	bl	800e6d4 <puts>
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8003f28:	88fc      	ldrh	r4, [r7, #6]
 8003f2a:	88bd      	ldrh	r5, [r7, #4]
 8003f2c:	68b8      	ldr	r0, [r7, #8]
 8003f2e:	f7fc f987 	bl	8000240 <strlen>
 8003f32:	4603      	mov	r3, r0
 8003f34:	b2da      	uxtb	r2, r3
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	9300      	str	r3, [sp, #0]
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	4629      	mov	r1, r5
 8003f40:	4620      	mov	r0, r4
 8003f42:	f007 fbb5 	bl	800b6b0 <aci_gatt_update_char_value>
 8003f46:	4603      	mov	r3, r0
 8003f48:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 8003f4a:	88f8      	ldrh	r0, [r7, #6]
 8003f4c:	8879      	ldrh	r1, [r7, #2]
 8003f4e:	463b      	mov	r3, r7
 8003f50:	9300      	str	r3, [sp, #0]
 8003f52:	2302      	movs	r3, #2
 8003f54:	2200      	movs	r2, #0
 8003f56:	f007 fbab 	bl	800b6b0 <aci_gatt_update_char_value>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,
 8003f5e:	2202      	movs	r2, #2
 8003f60:	2102      	movs	r1, #2
 8003f62:	2000      	movs	r0, #0
 8003f64:	f007 fddb 	bl	800bb1e <hci_le_set_default_phy>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	75fb      	strb	r3, [r7, #23]
                               TX_2M_PREFERRED,
                               RX_2M_PREFERRED);
  if (ret != BLE_STATUS_SUCCESS)
 8003f6c:	7dfb      	ldrb	r3, [r7, #23]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d005      	beq.n	8003f7e <Ble_Hci_Gap_Gatt_Init+0x206>
  {
    APP_DBG_MSG("  Fail   : hci_le_set_default_phy command, result: 0x%x \n", ret);
 8003f72:	7dfb      	ldrb	r3, [r7, #23]
 8003f74:	4619      	mov	r1, r3
 8003f76:	483d      	ldr	r0, [pc, #244]	; (800406c <Ble_Hci_Gap_Gatt_Init+0x2f4>)
 8003f78:	f00a fb46 	bl	800e608 <iprintf>
 8003f7c:	e002      	b.n	8003f84 <Ble_Hci_Gap_Gatt_Init+0x20c>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_le_set_default_phy command\n");
 8003f7e:	483c      	ldr	r0, [pc, #240]	; (8004070 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 8003f80:	f00a fba8 	bl	800e6d4 <puts>
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8003f84:	4b3b      	ldr	r3, [pc, #236]	; (8004074 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8003f86:	2201      	movs	r2, #1
 8003f88:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8003f8a:	4b3a      	ldr	r3, [pc, #232]	; (8004074 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f006 fe0e 	bl	800abb0 <aci_gap_set_io_capability>
 8003f94:	4603      	mov	r3, r0
 8003f96:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8003f98:	7dfb      	ldrb	r3, [r7, #23]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d005      	beq.n	8003faa <Ble_Hci_Gap_Gatt_Init+0x232>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_io_capability command, result: 0x%x \n", ret);
 8003f9e:	7dfb      	ldrb	r3, [r7, #23]
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	4835      	ldr	r0, [pc, #212]	; (8004078 <Ble_Hci_Gap_Gatt_Init+0x300>)
 8003fa4:	f00a fb30 	bl	800e608 <iprintf>
 8003fa8:	e002      	b.n	8003fb0 <Ble_Hci_Gap_Gatt_Init+0x238>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_io_capability command\n");
 8003faa:	4834      	ldr	r0, [pc, #208]	; (800407c <Ble_Hci_Gap_Gatt_Init+0x304>)
 8003fac:	f00a fb92 	bl	800e6d4 <puts>
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8003fb0:	4b30      	ldr	r3, [pc, #192]	; (8004074 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8003fb6:	4b2f      	ldr	r3, [pc, #188]	; (8004074 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8003fb8:	2208      	movs	r2, #8
 8003fba:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8003fbc:	4b2d      	ldr	r3, [pc, #180]	; (8004074 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8003fbe:	2210      	movs	r2, #16
 8003fc0:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8003fc2:	4b2c      	ldr	r3, [pc, #176]	; (8004074 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8003fc8:	4b2a      	ldr	r3, [pc, #168]	; (8004074 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8003fca:	4a2d      	ldr	r2, [pc, #180]	; (8004080 <Ble_Hci_Gap_Gatt_Init+0x308>)
 8003fcc:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8003fce:	4b29      	ldr	r3, [pc, #164]	; (8004074 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8003fd4:	4b27      	ldr	r3, [pc, #156]	; (8004074 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8003fd6:	789c      	ldrb	r4, [r3, #2]
 8003fd8:	4b26      	ldr	r3, [pc, #152]	; (8004074 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8003fda:	785d      	ldrb	r5, [r3, #1]
 8003fdc:	4b25      	ldr	r3, [pc, #148]	; (8004074 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8003fde:	791b      	ldrb	r3, [r3, #4]
 8003fe0:	4a24      	ldr	r2, [pc, #144]	; (8004074 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8003fe2:	7952      	ldrb	r2, [r2, #5]
 8003fe4:	4923      	ldr	r1, [pc, #140]	; (8004074 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8003fe6:	78c9      	ldrb	r1, [r1, #3]
 8003fe8:	4822      	ldr	r0, [pc, #136]	; (8004074 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8003fea:	6880      	ldr	r0, [r0, #8]
 8003fec:	2600      	movs	r6, #0
 8003fee:	9604      	str	r6, [sp, #16]
 8003ff0:	9003      	str	r0, [sp, #12]
 8003ff2:	9102      	str	r1, [sp, #8]
 8003ff4:	9201      	str	r2, [sp, #4]
 8003ff6:	9300      	str	r3, [sp, #0]
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	4629      	mov	r1, r5
 8003ffe:	4620      	mov	r0, r4
 8004000:	f006 fe2a 	bl	800ac58 <aci_gap_set_authentication_requirement>
 8004004:	4603      	mov	r3, r0
 8004006:	75fb      	strb	r3, [r7, #23]
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin,
                                               CFG_IDENTITY_ADDRESS);

  if (ret != BLE_STATUS_SUCCESS)
 8004008:	7dfb      	ldrb	r3, [r7, #23]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d03c      	beq.n	8004088 <Ble_Hci_Gap_Gatt_Init+0x310>
{
    APP_DBG_MSG("  Fail   : aci_gap_set_authentication_requirement command, result: 0x%x \n", ret);
 800400e:	7dfb      	ldrb	r3, [r7, #23]
 8004010:	4619      	mov	r1, r3
 8004012:	481c      	ldr	r0, [pc, #112]	; (8004084 <Ble_Hci_Gap_Gatt_Init+0x30c>)
 8004014:	f00a faf8 	bl	800e608 <iprintf>
 8004018:	e039      	b.n	800408e <Ble_Hci_Gap_Gatt_Init+0x316>
 800401a:	bf00      	nop
 800401c:	0801127c 	.word	0x0801127c
 8004020:	080112a8 	.word	0x080112a8
 8004024:	080112d8 	.word	0x080112d8
 8004028:	080112f8 	.word	0x080112f8
 800402c:	08011354 	.word	0x08011354
 8004030:	080113a0 	.word	0x080113a0
 8004034:	20000008 	.word	0x20000008
 8004038:	08012008 	.word	0x08012008
 800403c:	080113dc 	.word	0x080113dc
 8004040:	08011434 	.word	0x08011434
 8004044:	08012018 	.word	0x08012018
 8004048:	0801147c 	.word	0x0801147c
 800404c:	080114d4 	.word	0x080114d4
 8004050:	0801151c 	.word	0x0801151c
 8004054:	0801155c 	.word	0x0801155c
 8004058:	0801158c 	.word	0x0801158c
 800405c:	080115c0 	.word	0x080115c0
 8004060:	080115e4 	.word	0x080115e4
 8004064:	080115ec 	.word	0x080115ec
 8004068:	0801161c 	.word	0x0801161c
 800406c:	0801163c 	.word	0x0801163c
 8004070:	08011678 	.word	0x08011678
 8004074:	200006ac 	.word	0x200006ac
 8004078:	080116a4 	.word	0x080116a4
 800407c:	080116e4 	.word	0x080116e4
 8004080:	0001b207 	.word	0x0001b207
 8004084:	08011714 	.word	0x08011714
    }
    else
    {
    APP_DBG_MSG("  Success: aci_gap_set_authentication_requirement command\n");
 8004088:	480e      	ldr	r0, [pc, #56]	; (80040c4 <Ble_Hci_Gap_Gatt_Init+0x34c>)
 800408a:	f00a fb23 	bl	800e6d4 <puts>
}

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800408e:	4b0e      	ldr	r3, [pc, #56]	; (80040c8 <Ble_Hci_Gap_Gatt_Init+0x350>)
 8004090:	789b      	ldrb	r3, [r3, #2]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d00f      	beq.n	80040b6 <Ble_Hci_Gap_Gatt_Init+0x33e>
{
    ret = aci_gap_configure_whitelist();
 8004096:	f007 f829 	bl	800b0ec <aci_gap_configure_filter_accept_list>
 800409a:	4603      	mov	r3, r0
 800409c:	75fb      	strb	r3, [r7, #23]
    if (ret != BLE_STATUS_SUCCESS)
 800409e:	7dfb      	ldrb	r3, [r7, #23]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d005      	beq.n	80040b0 <Ble_Hci_Gap_Gatt_Init+0x338>
  {
      APP_DBG_MSG("  Fail   : aci_gap_configure_whitelist command, result: 0x%x \n", ret);
 80040a4:	7dfb      	ldrb	r3, [r7, #23]
 80040a6:	4619      	mov	r1, r3
 80040a8:	4808      	ldr	r0, [pc, #32]	; (80040cc <Ble_Hci_Gap_Gatt_Init+0x354>)
 80040aa:	f00a faad 	bl	800e608 <iprintf>
 80040ae:	e002      	b.n	80040b6 <Ble_Hci_Gap_Gatt_Init+0x33e>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
 80040b0:	4807      	ldr	r0, [pc, #28]	; (80040d0 <Ble_Hci_Gap_Gatt_Init+0x358>)
 80040b2:	f00a fb0f 	bl	800e6d4 <puts>
  }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
 80040b6:	4807      	ldr	r0, [pc, #28]	; (80040d4 <Ble_Hci_Gap_Gatt_Init+0x35c>)
 80040b8:	f00a faa6 	bl	800e608 <iprintf>
}
 80040bc:	bf00      	nop
 80040be:	371c      	adds	r7, #28
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040c4:	08011760 	.word	0x08011760
 80040c8:	200006ac 	.word	0x200006ac
 80040cc:	0801179c 	.word	0x0801179c
 80040d0:	080117dc 	.word	0x080117dc
 80040d4:	0801180c 	.word	0x0801180c

080040d8 <Adv_Request>:


#if (BLE_CFG_PERIPHERAL != 0)
static void Adv_Request( APP_BLE_ConnStatus_t NewStatus )
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b08c      	sub	sp, #48	; 0x30
 80040dc:	af08      	add	r7, sp, #32
 80040de:	4603      	mov	r3, r0
 80040e0:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80040e2:	2392      	movs	r3, #146	; 0x92
 80040e4:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;

  if (NewStatus == APP_BLE_FAST_ADV)
 80040e6:	79fb      	ldrb	r3, [r7, #7]
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d106      	bne.n	80040fa <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 80040ec:	4b41      	ldr	r3, [pc, #260]	; (80041f4 <Adv_Request+0x11c>)
 80040ee:	881b      	ldrh	r3, [r3, #0]
 80040f0:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 80040f2:	4b41      	ldr	r3, [pc, #260]	; (80041f8 <Adv_Request+0x120>)
 80040f4:	881b      	ldrh	r3, [r3, #0]
 80040f6:	81bb      	strh	r3, [r7, #12]
 80040f8:	e005      	b.n	8004106 <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 80040fa:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 80040fe:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 8004100:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8004104:	81bb      	strh	r3, [r7, #12]

    /**
     * Stop the timer, it will be restarted for a new shot
     * It does not hurt if the timer was not running
     */
  HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 8004106:	4b3d      	ldr	r3, [pc, #244]	; (80041fc <Adv_Request+0x124>)
 8004108:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800410c:	4618      	mov	r0, r3
 800410e:	f7fe fa63 	bl	80025d8 <HW_TS_Stop>

  if ((NewStatus == APP_BLE_LP_ADV)
 8004112:	79fb      	ldrb	r3, [r7, #7]
 8004114:	2b02      	cmp	r3, #2
 8004116:	d119      	bne.n	800414c <Adv_Request+0x74>
      && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 8004118:	4b38      	ldr	r3, [pc, #224]	; (80041fc <Adv_Request+0x124>)
 800411a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800411e:	2b01      	cmp	r3, #1
 8004120:	d004      	beq.n	800412c <Adv_Request+0x54>
          || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 8004122:	4b36      	ldr	r3, [pc, #216]	; (80041fc <Adv_Request+0x124>)
 8004124:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004128:	2b02      	cmp	r3, #2
 800412a:	d10f      	bne.n	800414c <Adv_Request+0x74>
    {
      /* Connection in ADVERTISE mode have to stop the current advertising */
      ret = aci_gap_set_non_discoverable();
 800412c:	f006 fc22 	bl	800a974 <aci_gap_set_non_discoverable>
 8004130:	4603      	mov	r3, r0
 8004132:	72fb      	strb	r3, [r7, #11]
    if (ret != BLE_STATUS_SUCCESS)
 8004134:	7afb      	ldrb	r3, [r7, #11]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d005      	beq.n	8004146 <Adv_Request+0x6e>
      {
      APP_DBG_MSG("==>> aci_gap_set_non_discoverable - Stop Advertising Failed , result: %d \n", ret);
 800413a:	7afb      	ldrb	r3, [r7, #11]
 800413c:	4619      	mov	r1, r3
 800413e:	4830      	ldr	r0, [pc, #192]	; (8004200 <Adv_Request+0x128>)
 8004140:	f00a fa62 	bl	800e608 <iprintf>
 8004144:	e002      	b.n	800414c <Adv_Request+0x74>
      }
      else
      {
      APP_DBG_MSG("==>> aci_gap_set_non_discoverable - Successfully Stopped Advertising \n");
 8004146:	482f      	ldr	r0, [pc, #188]	; (8004204 <Adv_Request+0x12c>)
 8004148:	f00a fac4 	bl	800e6d4 <puts>
      }
    }

  BleApplicationContext.Device_Connection_Status = NewStatus;
 800414c:	4a2b      	ldr	r2, [pc, #172]	; (80041fc <Adv_Request+0x124>)
 800414e:	79fb      	ldrb	r3, [r7, #7]
 8004150:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
    /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_IND,
 8004154:	4b29      	ldr	r3, [pc, #164]	; (80041fc <Adv_Request+0x124>)
 8004156:	7e1b      	ldrb	r3, [r3, #24]
 8004158:	89ba      	ldrh	r2, [r7, #12]
 800415a:	89f9      	ldrh	r1, [r7, #14]
 800415c:	2000      	movs	r0, #0
 800415e:	9006      	str	r0, [sp, #24]
 8004160:	2000      	movs	r0, #0
 8004162:	9005      	str	r0, [sp, #20]
 8004164:	4828      	ldr	r0, [pc, #160]	; (8004208 <Adv_Request+0x130>)
 8004166:	9004      	str	r0, [sp, #16]
 8004168:	9303      	str	r3, [sp, #12]
 800416a:	4b28      	ldr	r3, [pc, #160]	; (800420c <Adv_Request+0x134>)
 800416c:	9302      	str	r3, [sp, #8]
 800416e:	2307      	movs	r3, #7
 8004170:	9301      	str	r3, [sp, #4]
 8004172:	2300      	movs	r3, #0
 8004174:	9300      	str	r3, [sp, #0]
 8004176:	2300      	movs	r3, #0
 8004178:	2000      	movs	r0, #0
 800417a:	f006 fc1f 	bl	800a9bc <aci_gap_set_discoverable>
 800417e:	4603      	mov	r3, r0
 8004180:	72fb      	strb	r3, [r7, #11]
                                 (uint8_t*) &a_LocalName,
                                 BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen,
                                 BleApplicationContext.BleApplicationContext_legacy.advtServUUID,
                                 0,
                                 0);
  if (ret != BLE_STATUS_SUCCESS)
 8004182:	7afb      	ldrb	r3, [r7, #11]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d005      	beq.n	8004194 <Adv_Request+0xbc>
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - fail, result: 0x%x \n", ret);
 8004188:	7afb      	ldrb	r3, [r7, #11]
 800418a:	4619      	mov	r1, r3
 800418c:	4820      	ldr	r0, [pc, #128]	; (8004210 <Adv_Request+0x138>)
 800418e:	f00a fa3b 	bl	800e608 <iprintf>
 8004192:	e002      	b.n	800419a <Adv_Request+0xc2>
  }
  else
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
 8004194:	481f      	ldr	r0, [pc, #124]	; (8004214 <Adv_Request+0x13c>)
 8004196:	f00a fa9d 	bl	800e6d4 <puts>
  }

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_ManufData), (uint8_t*) a_ManufData);
 800419a:	491f      	ldr	r1, [pc, #124]	; (8004218 <Adv_Request+0x140>)
 800419c:	200e      	movs	r0, #14
 800419e:	f006 ff33 	bl	800b008 <aci_gap_update_adv_data>
 80041a2:	4603      	mov	r3, r0
 80041a4:	72fb      	strb	r3, [r7, #11]
  if (ret != BLE_STATUS_SUCCESS)
 80041a6:	7afb      	ldrb	r3, [r7, #11]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d00e      	beq.n	80041ca <Adv_Request+0xf2>
  {
    if (NewStatus == APP_BLE_FAST_ADV)
 80041ac:	79fb      	ldrb	r3, [r7, #7]
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d105      	bne.n	80041be <Adv_Request+0xe6>
    {
      APP_DBG_MSG("==>> Start Fast Advertising Failed , result: %d \n\r", ret);
 80041b2:	7afb      	ldrb	r3, [r7, #11]
 80041b4:	4619      	mov	r1, r3
 80041b6:	4819      	ldr	r0, [pc, #100]	; (800421c <Adv_Request+0x144>)
 80041b8:	f00a fa26 	bl	800e608 <iprintf>
    {
      APP_DBG_MSG("==>> Success: Start Low Power Advertising \n\r");
    }
  }
  
  return;
 80041bc:	e017      	b.n	80041ee <Adv_Request+0x116>
      APP_DBG_MSG("==>> Start Low Power Advertising Failed , result: %d \n\r", ret);
 80041be:	7afb      	ldrb	r3, [r7, #11]
 80041c0:	4619      	mov	r1, r3
 80041c2:	4817      	ldr	r0, [pc, #92]	; (8004220 <Adv_Request+0x148>)
 80041c4:	f00a fa20 	bl	800e608 <iprintf>
  return;
 80041c8:	e011      	b.n	80041ee <Adv_Request+0x116>
    if (NewStatus == APP_BLE_FAST_ADV)
 80041ca:	79fb      	ldrb	r3, [r7, #7]
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d10a      	bne.n	80041e6 <Adv_Request+0x10e>
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
 80041d0:	4814      	ldr	r0, [pc, #80]	; (8004224 <Adv_Request+0x14c>)
 80041d2:	f00a fa19 	bl	800e608 <iprintf>
      HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 80041d6:	4b09      	ldr	r3, [pc, #36]	; (80041fc <Adv_Request+0x124>)
 80041d8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80041dc:	4912      	ldr	r1, [pc, #72]	; (8004228 <Adv_Request+0x150>)
 80041de:	4618      	mov	r0, r3
 80041e0:	f7fe fa7e 	bl	80026e0 <HW_TS_Start>
  return;
 80041e4:	e003      	b.n	80041ee <Adv_Request+0x116>
      APP_DBG_MSG("==>> Success: Start Low Power Advertising \n\r");
 80041e6:	4811      	ldr	r0, [pc, #68]	; (800422c <Adv_Request+0x154>)
 80041e8:	f00a fa0e 	bl	800e608 <iprintf>
  return;
 80041ec:	bf00      	nop
}
 80041ee:	3710      	adds	r7, #16
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	20000730 	.word	0x20000730
 80041f8:	20000732 	.word	0x20000732
 80041fc:	200006ac 	.word	0x200006ac
 8004200:	08011838 	.word	0x08011838
 8004204:	08011884 	.word	0x08011884
 8004208:	200006c5 	.word	0x200006c5
 800420c:	08012028 	.word	0x08012028
 8004210:	080118cc 	.word	0x080118cc
 8004214:	08011904 	.word	0x08011904
 8004218:	20000008 	.word	0x20000008
 800421c:	0801192c 	.word	0x0801192c
 8004220:	08011960 	.word	0x08011960
 8004224:	08011998 	.word	0x08011998
 8004228:	0001e046 	.word	0x0001e046
 800422c:	080119c0 	.word	0x080119c0

08004230 <Adv_Mgr>:

static void Adv_Mgr(void)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	af00      	add	r7, sp, #0
  /**
   * The code shall be executed in the background as an aci command may be sent
   * The background is the only place where the application can make sure a new aci command
   * is not sent if there is a pending one
   */
  UTIL_SEQ_SetTask(1 << CFG_TASK_ADV_UPDATE_ID, CFG_SCH_PRIO_0);
 8004234:	2100      	movs	r1, #0
 8004236:	f44f 7000 	mov.w	r0, #512	; 0x200
 800423a:	f009 fb9d 	bl	800d978 <UTIL_SEQ_SetTask>

  return;
 800423e:	bf00      	nop
}
 8004240:	bd80      	pop	{r7, pc}

08004242 <Adv_Update>:

static void Adv_Update(void)
{
 8004242:	b580      	push	{r7, lr}
 8004244:	af00      	add	r7, sp, #0
  Adv_Request(APP_BLE_LP_ADV);
 8004246:	2002      	movs	r0, #2
 8004248:	f7ff ff46 	bl	80040d8 <Adv_Request>

  return;
 800424c:	bf00      	nop
}
 800424e:	bd80      	pop	{r7, pc}

08004250 <BleGetBdAddress>:
#endif

const uint8_t* BleGetBdAddress( void )
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b086      	sub	sp, #24
 8004254:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8004256:	f7ff f987 	bl	8003568 <LL_FLASH_GetUDN>
 800425a:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004262:	d023      	beq.n	80042ac <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8004264:	f7ff f998 	bl	8003598 <LL_FLASH_GetSTCompanyID>
 8004268:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800426a:	f7ff f989 	bl	8003580 <LL_FLASH_GetDeviceID>
 800426e:	6078      	str	r0, [r7, #4]
 * bit[23:16] : Device ID.
 * bit[15:0] : The last 16bits from the UDN
 * Note: In order to use the Public Address in a final product, a dedicated
 * 24bits company ID (OUI) shall be bought.
 */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	b2da      	uxtb	r2, r3
 8004274:	4b16      	ldr	r3, [pc, #88]	; (80042d0 <BleGetBdAddress+0x80>)
 8004276:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	0a1b      	lsrs	r3, r3, #8
 800427c:	b2da      	uxtb	r2, r3
 800427e:	4b14      	ldr	r3, [pc, #80]	; (80042d0 <BleGetBdAddress+0x80>)
 8004280:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	b2da      	uxtb	r2, r3
 8004286:	4b12      	ldr	r3, [pc, #72]	; (80042d0 <BleGetBdAddress+0x80>)
 8004288:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	b2da      	uxtb	r2, r3
 800428e:	4b10      	ldr	r3, [pc, #64]	; (80042d0 <BleGetBdAddress+0x80>)
 8004290:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	0a1b      	lsrs	r3, r3, #8
 8004296:	b2da      	uxtb	r2, r3
 8004298:	4b0d      	ldr	r3, [pc, #52]	; (80042d0 <BleGetBdAddress+0x80>)
 800429a:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	0c1b      	lsrs	r3, r3, #16
 80042a0:	b2da      	uxtb	r2, r3
 80042a2:	4b0b      	ldr	r3, [pc, #44]	; (80042d0 <BleGetBdAddress+0x80>)
 80042a4:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 80042a6:	4b0a      	ldr	r3, [pc, #40]	; (80042d0 <BleGetBdAddress+0x80>)
 80042a8:	617b      	str	r3, [r7, #20]
 80042aa:	e00b      	b.n	80042c4 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 80042ac:	2000      	movs	r0, #0
 80042ae:	f008 fd1b 	bl	800cce8 <OTP_Read>
 80042b2:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d002      	beq.n	80042c0 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	617b      	str	r3, [r7, #20]
 80042be:	e001      	b.n	80042c4 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 80042c0:	4b04      	ldr	r3, [pc, #16]	; (80042d4 <BleGetBdAddress+0x84>)
 80042c2:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 80042c4:	697b      	ldr	r3, [r7, #20]
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3718      	adds	r7, #24
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	200006a4 	.word	0x200006a4
 80042d4:	08012000 	.word	0x08012000

080042d8 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80042e0:	2100      	movs	r1, #0
 80042e2:	2010      	movs	r0, #16
 80042e4:	f009 fb48 	bl	800d978 <UTIL_SEQ_SetTask>

  return;
 80042e8:	bf00      	nop
}
 80042ea:	3708      	adds	r7, #8
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b082      	sub	sp, #8
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80042f8:	2001      	movs	r0, #1
 80042fa:	f009 fba9 	bl	800da50 <UTIL_SEQ_SetEvt>

  return;
 80042fe:	bf00      	nop
}
 8004300:	3708      	adds	r7, #8
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}

08004306 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 8004306:	b580      	push	{r7, lr}
 8004308:	b082      	sub	sp, #8
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800430e:	2001      	movs	r0, #1
 8004310:	f009 fbbe 	bl	800da90 <UTIL_SEQ_WaitEvt>

  return;
 8004314:	bf00      	nop
}
 8004316:	3708      	adds	r7, #8
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	3308      	adds	r3, #8
 800432e:	4618      	mov	r0, r3
 8004330:	f006 fab0 	bl	800a894 <SVCCTL_UserEvtRx>
 8004334:	4603      	mov	r3, r0
 8004336:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8004338:	7afb      	ldrb	r3, [r7, #11]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d003      	beq.n	8004346 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2201      	movs	r2, #1
 8004342:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8004344:	e003      	b.n	800434e <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2200      	movs	r2, #0
 800434a:	701a      	strb	r2, [r3, #0]
  return;
 800434c:	bf00      	nop
}
 800434e:	3710      	adds	r7, #16
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}

08004354 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	4603      	mov	r3, r0
 800435c:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800435e:	79fb      	ldrb	r3, [r7, #7]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d002      	beq.n	800436a <BLE_StatusNot+0x16>
 8004364:	2b01      	cmp	r3, #1
 8004366:	d007      	beq.n	8004378 <BLE_StatusNot+0x24>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 8004368:	e00d      	b.n	8004386 <BLE_StatusNot+0x32>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800436a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800436e:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8004370:	68f8      	ldr	r0, [r7, #12]
 8004372:	f009 fb2d 	bl	800d9d0 <UTIL_SEQ_PauseTask>
      break;
 8004376:	e006      	b.n	8004386 <BLE_StatusNot+0x32>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8004378:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800437c:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800437e:	68f8      	ldr	r0, [r7, #12]
 8004380:	f009 fb46 	bl	800da10 <UTIL_SEQ_ResumeTask>
      break;
 8004384:	bf00      	nop
  }

  return;
 8004386:	bf00      	nop
}
 8004388:	3710      	adds	r7, #16
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
	...

08004390 <CRCAPP_LinkReadyNotification>:
  }
}
#endif

void CRCAPP_LinkReadyNotification(uint16_t ConnectionHandle)
{
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 8004396:	4603      	mov	r3, r0
 8004398:	80fb      	strh	r3, [r7, #6]
  CRC_Context.connHandle = ConnectionHandle;
 800439a:	4a04      	ldr	r2, [pc, #16]	; (80043ac <CRCAPP_LinkReadyNotification+0x1c>)
 800439c:	88fb      	ldrh	r3, [r7, #6]
 800439e:	8053      	strh	r3, [r2, #2]
  GattProcReq(CRC_DISCOVER_CHARACS);
  GattProcReq(CRC_DISCOVER_DESC);
  GattProcReq(CRC_ENABLE_RX_NOTIFICATION);
#endif

  return;
 80043a0:	bf00      	nop
}
 80043a2:	370c      	adds	r7, #12
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr
 80043ac:	2000073c 	.word	0x2000073c

080043b0 <CRSAPP_Init>:
static void CRSAPP_Transmit(void);
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void CRSAPP_Init(void)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	af00      	add	r7, sp, #0
  UTIL_SEQ_RegTask( 1<< CFG_TASK_CRS_TX_REQ_ID, UTIL_SEQ_RFU, CRSAPP_Transmit );
 80043b4:	4a0c      	ldr	r2, [pc, #48]	; (80043e8 <CRSAPP_Init+0x38>)
 80043b6:	2100      	movs	r1, #0
 80043b8:	2020      	movs	r0, #32
 80043ba:	f009 fabb 	bl	800d934 <UTIL_SEQ_RegTask>

/* USER CODE BEGIN CRSAPP_Init */
  PosXRx = POSXRX;
 80043be:	4b0b      	ldr	r3, [pc, #44]	; (80043ec <CRSAPP_Init+0x3c>)
 80043c0:	220a      	movs	r2, #10
 80043c2:	701a      	strb	r2, [r3, #0]
  PosYRx = POSYRX + 2;
 80043c4:	4b0a      	ldr	r3, [pc, #40]	; (80043f0 <CRSAPP_Init+0x40>)
 80043c6:	220c      	movs	r2, #12
 80043c8:	701a      	strb	r2, [r3, #0]
  PosXTx = POSXTX;
 80043ca:	4b0a      	ldr	r3, [pc, #40]	; (80043f4 <CRSAPP_Init+0x44>)
 80043cc:	220a      	movs	r2, #10
 80043ce:	701a      	strb	r2, [r3, #0]
  PosYTx = POSYTX + 2;
 80043d0:	4b09      	ldr	r3, [pc, #36]	; (80043f8 <CRSAPP_Init+0x48>)
 80043d2:	2220      	movs	r2, #32
 80043d4:	701a      	strb	r2, [r3, #0]
  idx = 0;
 80043d6:	4b09      	ldr	r3, [pc, #36]	; (80043fc <CRSAPP_Init+0x4c>)
 80043d8:	2200      	movs	r2, #0
 80043da:	701a      	strb	r2, [r3, #0]
  
  CRSAPP_Terminal_Init();
 80043dc:	f000 f986 	bl	80046ec <CRSAPP_Terminal_Init>

  ClearScreen();
 80043e0:	f007 fc76 	bl	800bcd0 <ClearScreen>

/* USER CODE END HRSAPP_Init */
  return;
 80043e4:	bf00      	nop
}
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	080044fd 	.word	0x080044fd
 80043ec:	200007ae 	.word	0x200007ae
 80043f0:	200007af 	.word	0x200007af
 80043f4:	200007ac 	.word	0x200007ac
 80043f8:	200007ad 	.word	0x200007ad
 80043fc:	200007c5 	.word	0x200007c5

08004400 <CRS_STM_Notification>:

void CRS_STM_Notification(CRS_STM_Notification_evt_t *p_Notification)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b082      	sub	sp, #8
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN CRS_STM_Notification */

/* USER CODE END CRS_STM_Notification */
  switch(p_Notification->CRS_Evt_Opcode)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	2b03      	cmp	r3, #3
 800440e:	d006      	beq.n	800441e <CRS_STM_Notification+0x1e>
 8004410:	2b03      	cmp	r3, #3
 8004412:	dc58      	bgt.n	80044c6 <CRS_STM_Notification+0xc6>
 8004414:	2b00      	cmp	r3, #0
 8004416:	d038      	beq.n	800448a <CRS_STM_Notification+0x8a>
 8004418:	2b01      	cmp	r3, #1
 800441a:	d04e      	beq.n	80044ba <CRS_STM_Notification+0xba>
/* USER CODE END CRS_NOTIFY_DISABLED_EVT */
      }
      break;

   default:
      break;
 800441c:	e053      	b.n	80044c6 <CRS_STM_Notification+0xc6>
        APP_DBG_MSG("CRS_WRITE_EVT: Data received: %s \n", p_Notification->DataTransfered.pPayload);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	4619      	mov	r1, r3
 8004424:	482b      	ldr	r0, [pc, #172]	; (80044d4 <CRS_STM_Notification+0xd4>)
 8004426:	f00a f8ef 	bl	800e608 <iprintf>
        p_Notification->DataTransfered.pPayload[p_Notification->DataTransfered.Length] = '\0';
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	7a12      	ldrb	r2, [r2, #8]
 8004432:	4413      	add	r3, r2
 8004434:	2200      	movs	r2, #0
 8004436:	701a      	strb	r2, [r3, #0]
        UartTransmitStrSz(p_Notification->DataTransfered.pPayload, p_Notification->DataTransfered.Length);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	685a      	ldr	r2, [r3, #4]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	7a1b      	ldrb	r3, [r3, #8]
 8004440:	4619      	mov	r1, r3
 8004442:	4610      	mov	r0, r2
 8004444:	f007 fc26 	bl	800bc94 <UartTransmitStrSz>
        PosXRx += p_Notification->DataTransfered.Length;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	7a1a      	ldrb	r2, [r3, #8]
 800444c:	4b22      	ldr	r3, [pc, #136]	; (80044d8 <CRS_STM_Notification+0xd8>)
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	4413      	add	r3, r2
 8004452:	b2da      	uxtb	r2, r3
 8004454:	4b20      	ldr	r3, [pc, #128]	; (80044d8 <CRS_STM_Notification+0xd8>)
 8004456:	701a      	strb	r2, [r3, #0]
        if((PosXRx >= XSIZE) || (p_Notification->DataTransfered.Length < MAX_STRING_SIZE))
 8004458:	4b1f      	ldr	r3, [pc, #124]	; (80044d8 <CRS_STM_Notification+0xd8>)
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	2b09      	cmp	r3, #9
 800445e:	d803      	bhi.n	8004468 <CRS_STM_Notification+0x68>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	7a1b      	ldrb	r3, [r3, #8]
 8004464:	2b13      	cmp	r3, #19
 8004466:	d830      	bhi.n	80044ca <CRS_STM_Notification+0xca>
          PosXRx = POSXRX;
 8004468:	4b1b      	ldr	r3, [pc, #108]	; (80044d8 <CRS_STM_Notification+0xd8>)
 800446a:	220a      	movs	r2, #10
 800446c:	701a      	strb	r2, [r3, #0]
          PosYRx++;
 800446e:	4b1b      	ldr	r3, [pc, #108]	; (80044dc <CRS_STM_Notification+0xdc>)
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	3301      	adds	r3, #1
 8004474:	b2da      	uxtb	r2, r3
 8004476:	4b19      	ldr	r3, [pc, #100]	; (80044dc <CRS_STM_Notification+0xdc>)
 8004478:	701a      	strb	r2, [r3, #0]
          if(PosYRx > POSYRX + YSIZE + 2)
 800447a:	4b18      	ldr	r3, [pc, #96]	; (80044dc <CRS_STM_Notification+0xdc>)
 800447c:	781b      	ldrb	r3, [r3, #0]
 800447e:	2b16      	cmp	r3, #22
 8004480:	d923      	bls.n	80044ca <CRS_STM_Notification+0xca>
          PosYRx = POSYRX + 2;
 8004482:	4b16      	ldr	r3, [pc, #88]	; (80044dc <CRS_STM_Notification+0xdc>)
 8004484:	220c      	movs	r2, #12
 8004486:	701a      	strb	r2, [r3, #0]
      break;
 8004488:	e01f      	b.n	80044ca <CRS_STM_Notification+0xca>
        APP_DBG_MSG("CRS_NOTIFY_ENABLED_EVT\n");
 800448a:	4815      	ldr	r0, [pc, #84]	; (80044e0 <CRS_STM_Notification+0xe0>)
 800448c:	f00a f922 	bl	800e6d4 <puts>
        ClearScreen();
 8004490:	f007 fc1e 	bl	800bcd0 <ClearScreen>
        PrintPcCrt(POSXRX, POSXRX, "Receive:");
 8004494:	4a13      	ldr	r2, [pc, #76]	; (80044e4 <CRS_STM_Notification+0xe4>)
 8004496:	210a      	movs	r1, #10
 8004498:	200a      	movs	r0, #10
 800449a:	f007 fc79 	bl	800bd90 <PrintPcCrt>
        PrintPcCrt(POSXTX, POSYTX, "Transmit:");
 800449e:	4a12      	ldr	r2, [pc, #72]	; (80044e8 <CRS_STM_Notification+0xe8>)
 80044a0:	211e      	movs	r1, #30
 80044a2:	200a      	movs	r0, #10
 80044a4:	f007 fc74 	bl	800bd90 <PrintPcCrt>
        PrintPcCrt(PosXTx, PosYTx, "");
 80044a8:	4b10      	ldr	r3, [pc, #64]	; (80044ec <CRS_STM_Notification+0xec>)
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	4a10      	ldr	r2, [pc, #64]	; (80044f0 <CRS_STM_Notification+0xf0>)
 80044ae:	7811      	ldrb	r1, [r2, #0]
 80044b0:	4a10      	ldr	r2, [pc, #64]	; (80044f4 <CRS_STM_Notification+0xf4>)
 80044b2:	4618      	mov	r0, r3
 80044b4:	f007 fc6c 	bl	800bd90 <PrintPcCrt>
      break;
 80044b8:	e008      	b.n	80044cc <CRS_STM_Notification+0xcc>
        APP_DBG_MSG("CRS_NOTIFY_DISABLED_EVT\n");
 80044ba:	480f      	ldr	r0, [pc, #60]	; (80044f8 <CRS_STM_Notification+0xf8>)
 80044bc:	f00a f90a 	bl	800e6d4 <puts>
        ClearScreen();
 80044c0:	f007 fc06 	bl	800bcd0 <ClearScreen>
      break;
 80044c4:	e002      	b.n	80044cc <CRS_STM_Notification+0xcc>
      break;
 80044c6:	bf00      	nop
 80044c8:	e000      	b.n	80044cc <CRS_STM_Notification+0xcc>
      break;
 80044ca:	bf00      	nop
  }
/* USER CODE BEGIN CRS_Notification_2 */

/* USER CODE END CRS_Notification_2 */
  return;
 80044cc:	bf00      	nop
}
 80044ce:	3708      	adds	r7, #8
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}
 80044d4:	080119f0 	.word	0x080119f0
 80044d8:	200007ae 	.word	0x200007ae
 80044dc:	200007af 	.word	0x200007af
 80044e0:	08011a14 	.word	0x08011a14
 80044e4:	08011a2c 	.word	0x08011a2c
 80044e8:	08011a38 	.word	0x08011a38
 80044ec:	200007ac 	.word	0x200007ac
 80044f0:	200007ad 	.word	0x200007ad
 80044f4:	08011a44 	.word	0x08011a44
 80044f8:	08011a48 	.word	0x08011a48

080044fc <CRSAPP_Transmit>:

static void CRSAPP_Transmit()
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	af00      	add	r7, sp, #0
  //CRS_STM_Update_Char(CRS_RX_CHAR_UUID, (uint8_t *)&a_SzString[0]);
	CRS_STM_Update_Char_Len(CRS_RX_CHAR_UUID, (uint8_t *)&a_SzString[0], idx);
 8004500:	4b08      	ldr	r3, [pc, #32]	; (8004524 <CRSAPP_Transmit+0x28>)
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	461a      	mov	r2, r3
 8004506:	4908      	ldr	r1, [pc, #32]	; (8004528 <CRSAPP_Transmit+0x2c>)
 8004508:	f64f 6062 	movw	r0, #65122	; 0xfe62
 800450c:	f006 f8c6 	bl	800a69c <CRS_STM_Update_Char_Len>
	memset(a_SzString, 0, sizeof(a_SzString));
 8004510:	2215      	movs	r2, #21
 8004512:	2100      	movs	r1, #0
 8004514:	4804      	ldr	r0, [pc, #16]	; (8004528 <CRSAPP_Transmit+0x2c>)
 8004516:	f00a f9dd 	bl	800e8d4 <memset>
	idx = 0;
 800451a:	4b02      	ldr	r3, [pc, #8]	; (8004524 <CRSAPP_Transmit+0x28>)
 800451c:	2200      	movs	r2, #0
 800451e:	701a      	strb	r2, [r3, #0]
}
 8004520:	bf00      	nop
 8004522:	bd80      	pop	{r7, pc}
 8004524:	200007c5 	.word	0x200007c5
 8004528:	200007b0 	.word	0x200007b0

0800452c <ModRTU_CRC>:

// Compute the MODBUS RTU CRC
uint16_t ModRTU_CRC(const unsigned char * buf, int len)
{
 800452c:	b480      	push	{r7}
 800452e:	b087      	sub	sp, #28
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
	uint16_t crc = 0xFFFF;
 8004536:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800453a:	82fb      	strh	r3, [r7, #22]

  for (int pos = 0; pos < len; pos++) {
 800453c:	2300      	movs	r3, #0
 800453e:	613b      	str	r3, [r7, #16]
 8004540:	e027      	b.n	8004592 <ModRTU_CRC+0x66>
	uint16_t nbyte = (uint16_t)buf[pos];          // XOR byte into least sig. byte of crc
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	4413      	add	r3, r2
 8004548:	781b      	ldrb	r3, [r3, #0]
 800454a:	817b      	strh	r3, [r7, #10]
    crc ^= nbyte;
 800454c:	8afa      	ldrh	r2, [r7, #22]
 800454e:	897b      	ldrh	r3, [r7, #10]
 8004550:	4053      	eors	r3, r2
 8004552:	82fb      	strh	r3, [r7, #22]

    for (int i = 8; i != 0; i--) {    // Loop over each bit
 8004554:	2308      	movs	r3, #8
 8004556:	60fb      	str	r3, [r7, #12]
 8004558:	e015      	b.n	8004586 <ModRTU_CRC+0x5a>
      if ((crc & 0x0001) != 0) {      // If the LSB is set
 800455a:	8afb      	ldrh	r3, [r7, #22]
 800455c:	f003 0301 	and.w	r3, r3, #1
 8004560:	2b00      	cmp	r3, #0
 8004562:	d00a      	beq.n	800457a <ModRTU_CRC+0x4e>
        crc >>= 1;                    // Shift right and XOR 0xA001
 8004564:	8afb      	ldrh	r3, [r7, #22]
 8004566:	085b      	lsrs	r3, r3, #1
 8004568:	82fb      	strh	r3, [r7, #22]
        crc ^= 0xA001;
 800456a:	8afb      	ldrh	r3, [r7, #22]
 800456c:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 8004570:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 8004574:	43db      	mvns	r3, r3
 8004576:	82fb      	strh	r3, [r7, #22]
 8004578:	e002      	b.n	8004580 <ModRTU_CRC+0x54>
      }
      else                            // Else LSB is not set
        crc >>= 1;                    // Just shift right
 800457a:	8afb      	ldrh	r3, [r7, #22]
 800457c:	085b      	lsrs	r3, r3, #1
 800457e:	82fb      	strh	r3, [r7, #22]
    for (int i = 8; i != 0; i--) {    // Loop over each bit
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	3b01      	subs	r3, #1
 8004584:	60fb      	str	r3, [r7, #12]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d1e6      	bne.n	800455a <ModRTU_CRC+0x2e>
  for (int pos = 0; pos < len; pos++) {
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	3301      	adds	r3, #1
 8004590:	613b      	str	r3, [r7, #16]
 8004592:	693a      	ldr	r2, [r7, #16]
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	429a      	cmp	r2, r3
 8004598:	dbd3      	blt.n	8004542 <ModRTU_CRC+0x16>
    }
  }
  // Note, this number has low and high bytes swapped, so use it accordingly (or swap bytes)
  return crc;
 800459a:	8afb      	ldrh	r3, [r7, #22]
}
 800459c:	4618      	mov	r0, r3
 800459e:	371c      	adds	r7, #28
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr

080045a8 <check_crc>:

static uint8_t check_crc()
{
 80045a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045ac:	b084      	sub	sp, #16
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	466b      	mov	r3, sp
 80045b2:	4698      	mov	r8, r3
	if (idx < 7)
 80045b4:	4b2d      	ldr	r3, [pc, #180]	; (800466c <check_crc+0xc4>)
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	2b06      	cmp	r3, #6
 80045ba:	d801      	bhi.n	80045c0 <check_crc+0x18>
		return 0;
 80045bc:	2300      	movs	r3, #0
 80045be:	e04f      	b.n	8004660 <check_crc+0xb8>

	unsigned char a_SzString_CPY[idx - 2];
 80045c0:	4b2a      	ldr	r3, [pc, #168]	; (800466c <check_crc+0xc4>)
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	1e9e      	subs	r6, r3, #2
 80045c6:	1e73      	subs	r3, r6, #1
 80045c8:	60fb      	str	r3, [r7, #12]
 80045ca:	4632      	mov	r2, r6
 80045cc:	2300      	movs	r3, #0
 80045ce:	4614      	mov	r4, r2
 80045d0:	461d      	mov	r5, r3
 80045d2:	f04f 0200 	mov.w	r2, #0
 80045d6:	f04f 0300 	mov.w	r3, #0
 80045da:	00eb      	lsls	r3, r5, #3
 80045dc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045e0:	00e2      	lsls	r2, r4, #3
 80045e2:	4632      	mov	r2, r6
 80045e4:	2300      	movs	r3, #0
 80045e6:	4610      	mov	r0, r2
 80045e8:	4619      	mov	r1, r3
 80045ea:	f04f 0200 	mov.w	r2, #0
 80045ee:	f04f 0300 	mov.w	r3, #0
 80045f2:	00cb      	lsls	r3, r1, #3
 80045f4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80045f8:	00c2      	lsls	r2, r0, #3
 80045fa:	4633      	mov	r3, r6
 80045fc:	3307      	adds	r3, #7
 80045fe:	08db      	lsrs	r3, r3, #3
 8004600:	00db      	lsls	r3, r3, #3
 8004602:	ebad 0d03 	sub.w	sp, sp, r3
 8004606:	466b      	mov	r3, sp
 8004608:	3300      	adds	r3, #0
 800460a:	60bb      	str	r3, [r7, #8]
	memcpy(a_SzString_CPY, a_SzString, idx - 2);
 800460c:	4b17      	ldr	r3, [pc, #92]	; (800466c <check_crc+0xc4>)
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	3b02      	subs	r3, #2
 8004612:	461a      	mov	r2, r3
 8004614:	4916      	ldr	r1, [pc, #88]	; (8004670 <check_crc+0xc8>)
 8004616:	68b8      	ldr	r0, [r7, #8]
 8004618:	f00a f9db 	bl	800e9d2 <memcpy>
	uint16_t modbus_crc = ModRTU_CRC(a_SzString_CPY, idx - 2);
 800461c:	4b13      	ldr	r3, [pc, #76]	; (800466c <check_crc+0xc4>)
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	3b02      	subs	r3, #2
 8004622:	4619      	mov	r1, r3
 8004624:	68b8      	ldr	r0, [r7, #8]
 8004626:	f7ff ff81 	bl	800452c <ModRTU_CRC>
 800462a:	4603      	mov	r3, r0
 800462c:	80fb      	strh	r3, [r7, #6]
	uint8_t modbus_crc_lo = (uint8_t)((modbus_crc & 0xff00) >> 8);
 800462e:	88fb      	ldrh	r3, [r7, #6]
 8004630:	0a1b      	lsrs	r3, r3, #8
 8004632:	b29b      	uxth	r3, r3
 8004634:	717b      	strb	r3, [r7, #5]
	uint8_t modbus_crc_hi = (uint8_t)(modbus_crc & 0xff);
 8004636:	88fb      	ldrh	r3, [r7, #6]
 8004638:	713b      	strb	r3, [r7, #4]

	if (a_SzString[idx - 2] == modbus_crc_hi && a_SzString[idx - 1] == modbus_crc_lo)
 800463a:	4b0c      	ldr	r3, [pc, #48]	; (800466c <check_crc+0xc4>)
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	3b02      	subs	r3, #2
 8004640:	4a0b      	ldr	r2, [pc, #44]	; (8004670 <check_crc+0xc8>)
 8004642:	5cd3      	ldrb	r3, [r2, r3]
 8004644:	793a      	ldrb	r2, [r7, #4]
 8004646:	429a      	cmp	r2, r3
 8004648:	d109      	bne.n	800465e <check_crc+0xb6>
 800464a:	4b08      	ldr	r3, [pc, #32]	; (800466c <check_crc+0xc4>)
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	3b01      	subs	r3, #1
 8004650:	4a07      	ldr	r2, [pc, #28]	; (8004670 <check_crc+0xc8>)
 8004652:	5cd3      	ldrb	r3, [r2, r3]
 8004654:	797a      	ldrb	r2, [r7, #5]
 8004656:	429a      	cmp	r2, r3
 8004658:	d101      	bne.n	800465e <check_crc+0xb6>
		return 1;
 800465a:	2301      	movs	r3, #1
 800465c:	e000      	b.n	8004660 <check_crc+0xb8>

	return 0;
 800465e:	2300      	movs	r3, #0
 8004660:	46c5      	mov	sp, r8
}
 8004662:	4618      	mov	r0, r3
 8004664:	3710      	adds	r7, #16
 8004666:	46bd      	mov	sp, r7
 8004668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800466c:	200007c5 	.word	0x200007c5
 8004670:	200007b0 	.word	0x200007b0

08004674 <CRSAPP_Terminal_UART_RxCpltCallback>:
  * @brief  This function handles USARTx interrupt request.
  * @param  None
  * @retval None
  */
static void CRSAPP_Terminal_UART_RxCpltCallback( void )
{
 8004674:	b580      	push	{r7, lr}
 8004676:	af00      	add	r7, sp, #0
	a_SzString[idx++] = InputCharFromUart;
 8004678:	4b18      	ldr	r3, [pc, #96]	; (80046dc <CRSAPP_Terminal_UART_RxCpltCallback+0x68>)
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	1c5a      	adds	r2, r3, #1
 800467e:	b2d1      	uxtb	r1, r2
 8004680:	4a16      	ldr	r2, [pc, #88]	; (80046dc <CRSAPP_Terminal_UART_RxCpltCallback+0x68>)
 8004682:	7011      	strb	r1, [r2, #0]
 8004684:	461a      	mov	r2, r3
 8004686:	4b16      	ldr	r3, [pc, #88]	; (80046e0 <CRSAPP_Terminal_UART_RxCpltCallback+0x6c>)
 8004688:	7819      	ldrb	r1, [r3, #0]
 800468a:	4b16      	ldr	r3, [pc, #88]	; (80046e4 <CRSAPP_Terminal_UART_RxCpltCallback+0x70>)
 800468c:	5499      	strb	r1, [r3, r2]
	if(InputCharFromUart == LF && a_SzString[0] != 0xFE)
 800468e:	4b14      	ldr	r3, [pc, #80]	; (80046e0 <CRSAPP_Terminal_UART_RxCpltCallback+0x6c>)
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	2b0a      	cmp	r3, #10
 8004694:	d108      	bne.n	80046a8 <CRSAPP_Terminal_UART_RxCpltCallback+0x34>
 8004696:	4b13      	ldr	r3, [pc, #76]	; (80046e4 <CRSAPP_Terminal_UART_RxCpltCallback+0x70>)
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	2bfe      	cmp	r3, #254	; 0xfe
 800469c:	d004      	beq.n	80046a8 <CRSAPP_Terminal_UART_RxCpltCallback+0x34>
	{
		UTIL_SEQ_SetTask(1 << CFG_TASK_CRS_TX_REQ_ID, CFG_SCH_PRIO_0);
 800469e:	2100      	movs	r1, #0
 80046a0:	2020      	movs	r0, #32
 80046a2:	f009 f969 	bl	800d978 <UTIL_SEQ_SetTask>
 80046a6:	e011      	b.n	80046cc <CRSAPP_Terminal_UART_RxCpltCallback+0x58>
	}
	else if (check_crc() == 1)
 80046a8:	f7ff ff7e 	bl	80045a8 <check_crc>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d104      	bne.n	80046bc <CRSAPP_Terminal_UART_RxCpltCallback+0x48>
	{
		UTIL_SEQ_SetTask(1 << CFG_TASK_CRS_TX_REQ_ID, CFG_SCH_PRIO_0);
 80046b2:	2100      	movs	r1, #0
 80046b4:	2020      	movs	r0, #32
 80046b6:	f009 f95f 	bl	800d978 <UTIL_SEQ_SetTask>
 80046ba:	e007      	b.n	80046cc <CRSAPP_Terminal_UART_RxCpltCallback+0x58>
	}
	else
	{
		if(idx > MAX_STRING_SIZE - 1)
 80046bc:	4b07      	ldr	r3, [pc, #28]	; (80046dc <CRSAPP_Terminal_UART_RxCpltCallback+0x68>)
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	2b13      	cmp	r3, #19
 80046c2:	d903      	bls.n	80046cc <CRSAPP_Terminal_UART_RxCpltCallback+0x58>
		{
			UTIL_SEQ_SetTask(1 << CFG_TASK_CRS_TX_REQ_ID, CFG_SCH_PRIO_0);
 80046c4:	2100      	movs	r1, #0
 80046c6:	2020      	movs	r0, #32
 80046c8:	f009 f956 	bl	800d978 <UTIL_SEQ_SetTask>
		}
	}

	HW_UART_Receive_IT(CFG_CONSOLE_MENU, &InputCharFromUart, 1, CRSAPP_Terminal_UART_RxCpltCallback);
 80046cc:	4b06      	ldr	r3, [pc, #24]	; (80046e8 <CRSAPP_Terminal_UART_RxCpltCallback+0x74>)
 80046ce:	2201      	movs	r2, #1
 80046d0:	4903      	ldr	r1, [pc, #12]	; (80046e0 <CRSAPP_Terminal_UART_RxCpltCallback+0x6c>)
 80046d2:	2000      	movs	r0, #0
 80046d4:	f7fe f8ac 	bl	8002830 <HW_UART_Receive_IT>
	return;
 80046d8:	bf00      	nop
}
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	200007c5 	.word	0x200007c5
 80046e0:	2000074a 	.word	0x2000074a
 80046e4:	200007b0 	.word	0x200007b0
 80046e8:	08004675 	.word	0x08004675

080046ec <CRSAPP_Terminal_Init>:
  * @brief  This function initialize terminal
  * @param  None
  * @retval None
  */
static void CRSAPP_Terminal_Init(void)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b082      	sub	sp, #8
 80046f0:	af02      	add	r7, sp, #8
  HW_UART_Init(CFG_CONSOLE_MENU);
 80046f2:	2000      	movs	r0, #0
 80046f4:	f7fe f887 	bl	8002806 <HW_UART_Init>

  CircularQueue_Init(&RxQueue, a_RxQueueBuffer, RX_BUFFER_SIZE, 1, CIRCULAR_QUEUE_NO_WRAP_FLAG); 
 80046f8:	2301      	movs	r3, #1
 80046fa:	9300      	str	r3, [sp, #0]
 80046fc:	2301      	movs	r3, #1
 80046fe:	2240      	movs	r2, #64	; 0x40
 8004700:	4906      	ldr	r1, [pc, #24]	; (800471c <CRSAPP_Terminal_Init+0x30>)
 8004702:	4807      	ldr	r0, [pc, #28]	; (8004720 <CRSAPP_Terminal_Init+0x34>)
 8004704:	f008 fbd6 	bl	800ceb4 <CircularQueue_Init>
  
  HW_UART_Receive_IT(CFG_CONSOLE_MENU, &InputCharFromUart, 1, CRSAPP_Terminal_UART_RxCpltCallback);
 8004708:	4b06      	ldr	r3, [pc, #24]	; (8004724 <CRSAPP_Terminal_Init+0x38>)
 800470a:	2201      	movs	r2, #1
 800470c:	4906      	ldr	r1, [pc, #24]	; (8004728 <CRSAPP_Terminal_Init+0x3c>)
 800470e:	2000      	movs	r0, #0
 8004710:	f7fe f88e 	bl	8002830 <HW_UART_Receive_IT>

  return;
 8004714:	bf00      	nop
}
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	2000076c 	.word	0x2000076c
 8004720:	2000074c 	.word	0x2000074c
 8004724:	08004675 	.word	0x08004675
 8004728:	2000074a 	.word	0x2000074a

0800472c <LL_C2_EXTI_EnableEvent_32_63>:
{
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8004734:	4b06      	ldr	r3, [pc, #24]	; (8004750 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8004736:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800473a:	4905      	ldr	r1, [pc, #20]	; (8004750 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4313      	orrs	r3, r2
 8004740:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8004744:	bf00      	nop
 8004746:	370c      	adds	r7, #12
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr
 8004750:	58000800 	.word	0x58000800

08004754 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8004754:	b480      	push	{r7}
 8004756:	b083      	sub	sp, #12
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800475c:	4b05      	ldr	r3, [pc, #20]	; (8004774 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800475e:	6a1a      	ldr	r2, [r3, #32]
 8004760:	4904      	ldr	r1, [pc, #16]	; (8004774 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4313      	orrs	r3, r2
 8004766:	620b      	str	r3, [r1, #32]
}
 8004768:	bf00      	nop
 800476a:	370c      	adds	r7, #12
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr
 8004774:	58000800 	.word	0x58000800

08004778 <LL_PWR_EnableBootC2>:
{
 8004778:	b480      	push	{r7}
 800477a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800477c:	4b05      	ldr	r3, [pc, #20]	; (8004794 <LL_PWR_EnableBootC2+0x1c>)
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	4a04      	ldr	r2, [pc, #16]	; (8004794 <LL_PWR_EnableBootC2+0x1c>)
 8004782:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004786:	60d3      	str	r3, [r2, #12]
}
 8004788:	bf00      	nop
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	58000400 	.word	0x58000400

08004798 <LL_AHB3_GRP1_EnableClock>:
{
 8004798:	b480      	push	{r7}
 800479a:	b085      	sub	sp, #20
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80047a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80047a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80047b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4013      	ands	r3, r2
 80047ba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80047bc:	68fb      	ldr	r3, [r7, #12]
}
 80047be:	bf00      	nop
 80047c0:	3714      	adds	r7, #20
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr

080047ca <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80047ca:	b480      	push	{r7}
 80047cc:	b085      	sub	sp, #20
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 80047d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047d6:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 80047da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 80047e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047ea:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4013      	ands	r3, r2
 80047f2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80047f4:	68fb      	ldr	r3, [r7, #12]
}
 80047f6:	bf00      	nop
 80047f8:	3714      	adds	r7, #20
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr

08004802 <LL_C1_IPCC_EnableIT_TXF>:
{
 8004802:	b480      	push	{r7}
 8004804:	b083      	sub	sp, #12
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	601a      	str	r2, [r3, #0]
}
 8004816:	bf00      	nop
 8004818:	370c      	adds	r7, #12
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr

08004822 <LL_C1_IPCC_EnableIT_RXO>:
{
 8004822:	b480      	push	{r7}
 8004824:	b083      	sub	sp, #12
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f043 0201 	orr.w	r2, r3, #1
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	601a      	str	r2, [r3, #0]
}
 8004836:	bf00      	nop
 8004838:	370c      	adds	r7, #12
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr

08004842 <LL_C1_IPCC_EnableTransmitChannel>:
{
 8004842:	b480      	push	{r7}
 8004844:	b083      	sub	sp, #12
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
 800484a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	685a      	ldr	r2, [r3, #4]
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	041b      	lsls	r3, r3, #16
 8004854:	43db      	mvns	r3, r3
 8004856:	401a      	ands	r2, r3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	605a      	str	r2, [r3, #4]
}
 800485c:	bf00      	nop
 800485e:	370c      	adds	r7, #12
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <LL_C1_IPCC_DisableTransmitChannel>:
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	685a      	ldr	r2, [r3, #4]
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	041b      	lsls	r3, r3, #16
 800487a:	431a      	orrs	r2, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	605a      	str	r2, [r3, #4]
}
 8004880:	bf00      	nop
 8004882:	370c      	adds	r7, #12
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr

0800488c <LL_C1_IPCC_EnableReceiveChannel>:
{
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	685a      	ldr	r2, [r3, #4]
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	43db      	mvns	r3, r3
 800489e:	401a      	ands	r2, r3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	605a      	str	r2, [r3, #4]
}
 80048a4:	bf00      	nop
 80048a6:	370c      	adds	r7, #12
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr

080048b0 <LL_C1_IPCC_ClearFlag_CHx>:
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	683a      	ldr	r2, [r7, #0]
 80048be:	609a      	str	r2, [r3, #8]
}
 80048c0:	bf00      	nop
 80048c2:	370c      	adds	r7, #12
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <LL_C1_IPCC_SetFlag_CHx>:
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	041a      	lsls	r2, r3, #16
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	609a      	str	r2, [r3, #8]
}
 80048de:	bf00      	nop
 80048e0:	370c      	adds	r7, #12
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr

080048ea <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 80048ea:	b480      	push	{r7}
 80048ec:	b083      	sub	sp, #12
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
 80048f2:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	68da      	ldr	r2, [r3, #12]
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	4013      	ands	r3, r2
 80048fc:	683a      	ldr	r2, [r7, #0]
 80048fe:	429a      	cmp	r2, r3
 8004900:	d101      	bne.n	8004906 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8004902:	2301      	movs	r3, #1
 8004904:	e000      	b.n	8004908 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8004906:	2300      	movs	r3, #0
}
 8004908:	4618      	mov	r0, r3
 800490a:	370c      	adds	r7, #12
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8004914:	b480      	push	{r7}
 8004916:	b083      	sub	sp, #12
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	69da      	ldr	r2, [r3, #28]
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	4013      	ands	r3, r2
 8004926:	683a      	ldr	r2, [r7, #0]
 8004928:	429a      	cmp	r2, r3
 800492a:	d101      	bne.n	8004930 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800492c:	2301      	movs	r3, #1
 800492e:	e000      	b.n	8004932 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8004930:	2300      	movs	r3, #0
}
 8004932:	4618      	mov	r0, r3
 8004934:	370c      	adds	r7, #12
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr
	...

08004940 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8004940:	b580      	push	{r7, lr}
 8004942:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8004944:	2102      	movs	r1, #2
 8004946:	4818      	ldr	r0, [pc, #96]	; (80049a8 <HW_IPCC_Rx_Handler+0x68>)
 8004948:	f7ff ffe4 	bl	8004914 <LL_C2_IPCC_IsActiveFlag_CHx>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d008      	beq.n	8004964 <HW_IPCC_Rx_Handler+0x24>
 8004952:	4b15      	ldr	r3, [pc, #84]	; (80049a8 <HW_IPCC_Rx_Handler+0x68>)
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	f003 0302 	and.w	r3, r3, #2
 800495a:	2b00      	cmp	r3, #0
 800495c:	d102      	bne.n	8004964 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 800495e:	f000 f8d5 	bl	8004b0c <HW_IPCC_SYS_EvtHandler>
 8004962:	e01e      	b.n	80049a2 <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8004964:	2101      	movs	r1, #1
 8004966:	4810      	ldr	r0, [pc, #64]	; (80049a8 <HW_IPCC_Rx_Handler+0x68>)
 8004968:	f7ff ffd4 	bl	8004914 <LL_C2_IPCC_IsActiveFlag_CHx>
 800496c:	4603      	mov	r3, r0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d008      	beq.n	8004984 <HW_IPCC_Rx_Handler+0x44>
 8004972:	4b0d      	ldr	r3, [pc, #52]	; (80049a8 <HW_IPCC_Rx_Handler+0x68>)
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	f003 0301 	and.w	r3, r3, #1
 800497a:	2b00      	cmp	r3, #0
 800497c:	d102      	bne.n	8004984 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 800497e:	f000 f889 	bl	8004a94 <HW_IPCC_BLE_EvtHandler>
 8004982:	e00e      	b.n	80049a2 <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8004984:	2108      	movs	r1, #8
 8004986:	4808      	ldr	r0, [pc, #32]	; (80049a8 <HW_IPCC_Rx_Handler+0x68>)
 8004988:	f7ff ffc4 	bl	8004914 <LL_C2_IPCC_IsActiveFlag_CHx>
 800498c:	4603      	mov	r3, r0
 800498e:	2b00      	cmp	r3, #0
 8004990:	d008      	beq.n	80049a4 <HW_IPCC_Rx_Handler+0x64>
 8004992:	4b05      	ldr	r3, [pc, #20]	; (80049a8 <HW_IPCC_Rx_Handler+0x68>)
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	f003 0308 	and.w	r3, r3, #8
 800499a:	2b00      	cmp	r3, #0
 800499c:	d102      	bne.n	80049a4 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 800499e:	f000 f901 	bl	8004ba4 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 80049a2:	bf00      	nop
 80049a4:	bf00      	nop
}
 80049a6:	bd80      	pop	{r7, pc}
 80049a8:	58000c00 	.word	0x58000c00

080049ac <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 80049b0:	2102      	movs	r1, #2
 80049b2:	4818      	ldr	r0, [pc, #96]	; (8004a14 <HW_IPCC_Tx_Handler+0x68>)
 80049b4:	f7ff ff99 	bl	80048ea <LL_C1_IPCC_IsActiveFlag_CHx>
 80049b8:	4603      	mov	r3, r0
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d108      	bne.n	80049d0 <HW_IPCC_Tx_Handler+0x24>
 80049be:	4b15      	ldr	r3, [pc, #84]	; (8004a14 <HW_IPCC_Tx_Handler+0x68>)
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d102      	bne.n	80049d0 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 80049ca:	f000 f893 	bl	8004af4 <HW_IPCC_SYS_CmdEvtHandler>
 80049ce:	e01e      	b.n	8004a0e <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 80049d0:	2108      	movs	r1, #8
 80049d2:	4810      	ldr	r0, [pc, #64]	; (8004a14 <HW_IPCC_Tx_Handler+0x68>)
 80049d4:	f7ff ff89 	bl	80048ea <LL_C1_IPCC_IsActiveFlag_CHx>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d108      	bne.n	80049f0 <HW_IPCC_Tx_Handler+0x44>
 80049de:	4b0d      	ldr	r3, [pc, #52]	; (8004a14 <HW_IPCC_Tx_Handler+0x68>)
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d102      	bne.n	80049f0 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 80049ea:	f000 f8bd 	bl	8004b68 <HW_IPCC_MM_FreeBufHandler>
 80049ee:	e00e      	b.n	8004a0e <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 80049f0:	2120      	movs	r1, #32
 80049f2:	4808      	ldr	r0, [pc, #32]	; (8004a14 <HW_IPCC_Tx_Handler+0x68>)
 80049f4:	f7ff ff79 	bl	80048ea <LL_C1_IPCC_IsActiveFlag_CHx>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d108      	bne.n	8004a10 <HW_IPCC_Tx_Handler+0x64>
 80049fe:	4b05      	ldr	r3, [pc, #20]	; (8004a14 <HW_IPCC_Tx_Handler+0x68>)
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d102      	bne.n	8004a10 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8004a0a:	f000 f84f 	bl	8004aac <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8004a0e:	bf00      	nop
 8004a10:	bf00      	nop
}
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	58000c00 	.word	0x58000c00

08004a18 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8004a1c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8004a20:	f7ff fed3 	bl	80047ca <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8004a24:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004a28:	f7ff fe94 	bl	8004754 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8004a2c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004a30:	f7ff fe7c 	bl	800472c <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8004a34:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8004a36:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8004a38:	f7ff fe9e 	bl	8004778 <LL_PWR_EnableBootC2>

  return;
 8004a3c:	bf00      	nop
}
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8004a44:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8004a48:	f7ff fea6 	bl	8004798 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8004a4c:	4806      	ldr	r0, [pc, #24]	; (8004a68 <HW_IPCC_Init+0x28>)
 8004a4e:	f7ff fee8 	bl	8004822 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8004a52:	4805      	ldr	r0, [pc, #20]	; (8004a68 <HW_IPCC_Init+0x28>)
 8004a54:	f7ff fed5 	bl	8004802 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8004a58:	202c      	movs	r0, #44	; 0x2c
 8004a5a:	f000 fcbc 	bl	80053d6 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8004a5e:	202d      	movs	r0, #45	; 0x2d
 8004a60:	f000 fcb9 	bl	80053d6 <HAL_NVIC_EnableIRQ>

  return;
 8004a64:	bf00      	nop
}
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	58000c00 	.word	0x58000c00

08004a6c <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8004a70:	2101      	movs	r1, #1
 8004a72:	4802      	ldr	r0, [pc, #8]	; (8004a7c <HW_IPCC_BLE_Init+0x10>)
 8004a74:	f7ff ff0a 	bl	800488c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8004a78:	bf00      	nop
}
 8004a7a:	bd80      	pop	{r7, pc}
 8004a7c:	58000c00 	.word	0x58000c00

08004a80 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8004a84:	2101      	movs	r1, #1
 8004a86:	4802      	ldr	r0, [pc, #8]	; (8004a90 <HW_IPCC_BLE_SendCmd+0x10>)
 8004a88:	f7ff ff20 	bl	80048cc <LL_C1_IPCC_SetFlag_CHx>

  return;
 8004a8c:	bf00      	nop
}
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	58000c00 	.word	0x58000c00

08004a94 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8004a98:	f007 feb8 	bl	800c80c <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8004a9c:	2101      	movs	r1, #1
 8004a9e:	4802      	ldr	r0, [pc, #8]	; (8004aa8 <HW_IPCC_BLE_EvtHandler+0x14>)
 8004aa0:	f7ff ff06 	bl	80048b0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8004aa4:	bf00      	nop
}
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	58000c00 	.word	0x58000c00

08004aac <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8004ab0:	2120      	movs	r1, #32
 8004ab2:	4803      	ldr	r0, [pc, #12]	; (8004ac0 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8004ab4:	f7ff fed8 	bl	8004868 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8004ab8:	f007 fed8 	bl	800c86c <HW_IPCC_BLE_AclDataAckNot>

  return;
 8004abc:	bf00      	nop
}
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	58000c00 	.word	0x58000c00

08004ac4 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8004ac8:	2102      	movs	r1, #2
 8004aca:	4802      	ldr	r0, [pc, #8]	; (8004ad4 <HW_IPCC_SYS_Init+0x10>)
 8004acc:	f7ff fede 	bl	800488c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8004ad0:	bf00      	nop
}
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	58000c00 	.word	0x58000c00

08004ad8 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8004adc:	2102      	movs	r1, #2
 8004ade:	4804      	ldr	r0, [pc, #16]	; (8004af0 <HW_IPCC_SYS_SendCmd+0x18>)
 8004ae0:	f7ff fef4 	bl	80048cc <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8004ae4:	2102      	movs	r1, #2
 8004ae6:	4802      	ldr	r0, [pc, #8]	; (8004af0 <HW_IPCC_SYS_SendCmd+0x18>)
 8004ae8:	f7ff feab 	bl	8004842 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8004aec:	bf00      	nop
}
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	58000c00 	.word	0x58000c00

08004af4 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8004af8:	2102      	movs	r1, #2
 8004afa:	4803      	ldr	r0, [pc, #12]	; (8004b08 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8004afc:	f7ff feb4 	bl	8004868 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8004b00:	f007 ff04 	bl	800c90c <HW_IPCC_SYS_CmdEvtNot>

  return;
 8004b04:	bf00      	nop
}
 8004b06:	bd80      	pop	{r7, pc}
 8004b08:	58000c00 	.word	0x58000c00

08004b0c <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8004b10:	f007 ff12 	bl	800c938 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8004b14:	2102      	movs	r1, #2
 8004b16:	4802      	ldr	r0, [pc, #8]	; (8004b20 <HW_IPCC_SYS_EvtHandler+0x14>)
 8004b18:	f7ff feca 	bl	80048b0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8004b1c:	bf00      	nop
}
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	58000c00 	.word	0x58000c00

08004b24 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b082      	sub	sp, #8
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8004b2c:	2108      	movs	r1, #8
 8004b2e:	480c      	ldr	r0, [pc, #48]	; (8004b60 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8004b30:	f7ff fedb 	bl	80048ea <LL_C1_IPCC_IsActiveFlag_CHx>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d007      	beq.n	8004b4a <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8004b3a:	4a0a      	ldr	r2, [pc, #40]	; (8004b64 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8004b40:	2108      	movs	r1, #8
 8004b42:	4807      	ldr	r0, [pc, #28]	; (8004b60 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8004b44:	f7ff fe7d 	bl	8004842 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8004b48:	e006      	b.n	8004b58 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8004b4e:	2108      	movs	r1, #8
 8004b50:	4803      	ldr	r0, [pc, #12]	; (8004b60 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8004b52:	f7ff febb 	bl	80048cc <LL_C1_IPCC_SetFlag_CHx>
  return;
 8004b56:	bf00      	nop
}
 8004b58:	3708      	adds	r7, #8
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
 8004b5e:	bf00      	nop
 8004b60:	58000c00 	.word	0x58000c00
 8004b64:	200007c8 	.word	0x200007c8

08004b68 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8004b6c:	2108      	movs	r1, #8
 8004b6e:	4806      	ldr	r0, [pc, #24]	; (8004b88 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8004b70:	f7ff fe7a 	bl	8004868 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8004b74:	4b05      	ldr	r3, [pc, #20]	; (8004b8c <HW_IPCC_MM_FreeBufHandler+0x24>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8004b7a:	2108      	movs	r1, #8
 8004b7c:	4802      	ldr	r0, [pc, #8]	; (8004b88 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8004b7e:	f7ff fea5 	bl	80048cc <LL_C1_IPCC_SetFlag_CHx>

  return;
 8004b82:	bf00      	nop
}
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	58000c00 	.word	0x58000c00
 8004b8c:	200007c8 	.word	0x200007c8

08004b90 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8004b94:	2108      	movs	r1, #8
 8004b96:	4802      	ldr	r0, [pc, #8]	; (8004ba0 <HW_IPCC_TRACES_Init+0x10>)
 8004b98:	f7ff fe78 	bl	800488c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8004b9c:	bf00      	nop
}
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	58000c00 	.word	0x58000c00

08004ba4 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8004ba8:	f007 ff6e 	bl	800ca88 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8004bac:	2108      	movs	r1, #8
 8004bae:	4802      	ldr	r0, [pc, #8]	; (8004bb8 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8004bb0:	f7ff fe7e 	bl	80048b0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8004bb4:	bf00      	nop
}
 8004bb6:	bd80      	pop	{r7, pc}
 8004bb8:	58000c00 	.word	0x58000c00

08004bbc <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8004bbc:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004bbe:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004bc0:	3304      	adds	r3, #4

08004bc2 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004bc2:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004bc4:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8004bc6:	d3f9      	bcc.n	8004bbc <CopyDataInit>
  bx lr
 8004bc8:	4770      	bx	lr

08004bca <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8004bca:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8004bcc:	3004      	adds	r0, #4

08004bce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8004bce:	4288      	cmp	r0, r1
  bcc FillZerobss
 8004bd0:	d3fb      	bcc.n	8004bca <FillZerobss>
  bx lr
 8004bd2:	4770      	bx	lr

08004bd4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004bd4:	480c      	ldr	r0, [pc, #48]	; (8004c08 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8004bd6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004bd8:	f000 f9b0 	bl	8004f3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8004bdc:	480b      	ldr	r0, [pc, #44]	; (8004c0c <LoopForever+0x8>)
 8004bde:	490c      	ldr	r1, [pc, #48]	; (8004c10 <LoopForever+0xc>)
 8004be0:	4a0c      	ldr	r2, [pc, #48]	; (8004c14 <LoopForever+0x10>)
 8004be2:	2300      	movs	r3, #0
 8004be4:	f7ff ffed 	bl	8004bc2 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8004be8:	480b      	ldr	r0, [pc, #44]	; (8004c18 <LoopForever+0x14>)
 8004bea:	490c      	ldr	r1, [pc, #48]	; (8004c1c <LoopForever+0x18>)
 8004bec:	2300      	movs	r3, #0
 8004bee:	f7ff ffee 	bl	8004bce <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8004bf2:	480b      	ldr	r0, [pc, #44]	; (8004c20 <LoopForever+0x1c>)
 8004bf4:	490b      	ldr	r1, [pc, #44]	; (8004c24 <LoopForever+0x20>)
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	f7ff ffe9 	bl	8004bce <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004bfc:	f009 fec2 	bl	800e984 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8004c00:	f7fd ffa6 	bl	8002b50 <main>

08004c04 <LoopForever>:

LoopForever:
  b LoopForever
 8004c04:	e7fe      	b.n	8004c04 <LoopForever>
 8004c06:	0000      	.short	0x0000
  ldr   r0, =_estack
 8004c08:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8004c0c:	20000008 	.word	0x20000008
 8004c10:	2000020c 	.word	0x2000020c
 8004c14:	0801249c 	.word	0x0801249c
  INIT_BSS _sbss, _ebss
 8004c18:	20000264 	.word	0x20000264
 8004c1c:	20001b68 	.word	0x20001b68
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8004c20:	200301e4 	.word	0x200301e4
 8004c24:	20030a67 	.word	0x20030a67

08004c28 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004c28:	e7fe      	b.n	8004c28 <ADC1_IRQHandler>

08004c2a <LL_AHB2_GRP1_EnableClock>:
{
 8004c2a:	b480      	push	{r7}
 8004c2c:	b085      	sub	sp, #20
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004c32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004c38:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004c42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
}
 8004c50:	bf00      	nop
 8004c52:	3714      	adds	r7, #20
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr

08004c5c <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b088      	sub	sp, #32
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	4603      	mov	r3, r0
 8004c64:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8004c66:	f107 030c 	add.w	r3, r7, #12
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	601a      	str	r2, [r3, #0]
 8004c6e:	605a      	str	r2, [r3, #4]
 8004c70:	609a      	str	r2, [r3, #8]
 8004c72:	60da      	str	r2, [r3, #12]
 8004c74:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8004c76:	2002      	movs	r0, #2
 8004c78:	f7ff ffd7 	bl	8004c2a <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 8004c7c:	79fb      	ldrb	r3, [r7, #7]
 8004c7e:	4a12      	ldr	r2, [pc, #72]	; (8004cc8 <BSP_LED_Init+0x6c>)
 8004c80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c84:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c86:	2301      	movs	r3, #1
 8004c88:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004c8e:	2302      	movs	r3, #2
 8004c90:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 8004c92:	79fb      	ldrb	r3, [r7, #7]
 8004c94:	4a0d      	ldr	r2, [pc, #52]	; (8004ccc <BSP_LED_Init+0x70>)
 8004c96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c9a:	f107 020c 	add.w	r2, r7, #12
 8004c9e:	4611      	mov	r1, r2
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f000 ff71 	bl	8005b88 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8004ca6:	79fb      	ldrb	r3, [r7, #7]
 8004ca8:	4a08      	ldr	r2, [pc, #32]	; (8004ccc <BSP_LED_Init+0x70>)
 8004caa:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004cae:	79fb      	ldrb	r3, [r7, #7]
 8004cb0:	4a05      	ldr	r2, [pc, #20]	; (8004cc8 <BSP_LED_Init+0x6c>)
 8004cb2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	4619      	mov	r1, r3
 8004cba:	f001 f8d5 	bl	8005e68 <HAL_GPIO_WritePin>
}
 8004cbe:	bf00      	nop
 8004cc0:	3720      	adds	r7, #32
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	bf00      	nop
 8004cc8:	08012030 	.word	0x08012030
 8004ccc:	20000018 	.word	0x20000018

08004cd0 <BSP_LED_On>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b082      	sub	sp, #8
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8004cda:	79fb      	ldrb	r3, [r7, #7]
 8004cdc:	4a07      	ldr	r2, [pc, #28]	; (8004cfc <BSP_LED_On+0x2c>)
 8004cde:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004ce2:	79fb      	ldrb	r3, [r7, #7]
 8004ce4:	4a06      	ldr	r2, [pc, #24]	; (8004d00 <BSP_LED_On+0x30>)
 8004ce6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004cea:	2201      	movs	r2, #1
 8004cec:	4619      	mov	r1, r3
 8004cee:	f001 f8bb 	bl	8005e68 <HAL_GPIO_WritePin>
}
 8004cf2:	bf00      	nop
 8004cf4:	3708      	adds	r7, #8
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
 8004cfa:	bf00      	nop
 8004cfc:	20000018 	.word	0x20000018
 8004d00:	08012030 	.word	0x08012030

08004d04 <BSP_LED_Off>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b082      	sub	sp, #8
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8004d0e:	79fb      	ldrb	r3, [r7, #7]
 8004d10:	4a07      	ldr	r2, [pc, #28]	; (8004d30 <BSP_LED_Off+0x2c>)
 8004d12:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004d16:	79fb      	ldrb	r3, [r7, #7]
 8004d18:	4a06      	ldr	r2, [pc, #24]	; (8004d34 <BSP_LED_Off+0x30>)
 8004d1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	4619      	mov	r1, r3
 8004d22:	f001 f8a1 	bl	8005e68 <HAL_GPIO_WritePin>
}
 8004d26:	bf00      	nop
 8004d28:	3708      	adds	r7, #8
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}
 8004d2e:	bf00      	nop
 8004d30:	20000018 	.word	0x20000018
 8004d34:	08012030 	.word	0x08012030

08004d38 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b088      	sub	sp, #32
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	4603      	mov	r3, r0
 8004d40:	460a      	mov	r2, r1
 8004d42:	71fb      	strb	r3, [r7, #7]
 8004d44:	4613      	mov	r3, r2
 8004d46:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpioinitstruct = {0};
 8004d48:	f107 030c 	add.w	r3, r7, #12
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	601a      	str	r2, [r3, #0]
 8004d50:	605a      	str	r2, [r3, #4]
 8004d52:	609a      	str	r2, [r3, #8]
 8004d54:	60da      	str	r2, [r3, #12]
 8004d56:	611a      	str	r2, [r3, #16]
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8004d58:	79fb      	ldrb	r3, [r7, #7]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d103      	bne.n	8004d66 <BSP_PB_Init+0x2e>
 8004d5e:	2004      	movs	r0, #4
 8004d60:	f7ff ff63 	bl	8004c2a <LL_AHB2_GRP1_EnableClock>
 8004d64:	e00c      	b.n	8004d80 <BSP_PB_Init+0x48>
 8004d66:	79fb      	ldrb	r3, [r7, #7]
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d103      	bne.n	8004d74 <BSP_PB_Init+0x3c>
 8004d6c:	2008      	movs	r0, #8
 8004d6e:	f7ff ff5c 	bl	8004c2a <LL_AHB2_GRP1_EnableClock>
 8004d72:	e005      	b.n	8004d80 <BSP_PB_Init+0x48>
 8004d74:	79fb      	ldrb	r3, [r7, #7]
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d102      	bne.n	8004d80 <BSP_PB_Init+0x48>
 8004d7a:	2008      	movs	r0, #8
 8004d7c:	f7ff ff55 	bl	8004c2a <LL_AHB2_GRP1_EnableClock>
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8004d80:	79bb      	ldrb	r3, [r7, #6]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d117      	bne.n	8004db6 <BSP_PB_Init+0x7e>
  {
    /* Configure Button pin as input */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8004d86:	79fb      	ldrb	r3, [r7, #7]
 8004d88:	4a20      	ldr	r2, [pc, #128]	; (8004e0c <BSP_PB_Init+0xd4>)
 8004d8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d8e:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
 8004d90:	2300      	movs	r3, #0
 8004d92:	613b      	str	r3, [r7, #16]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8004d94:	2301      	movs	r3, #1
 8004d96:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004d98:	2302      	movs	r3, #2
 8004d9a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8004d9c:	79fb      	ldrb	r3, [r7, #7]
 8004d9e:	4a1c      	ldr	r2, [pc, #112]	; (8004e10 <BSP_PB_Init+0xd8>)
 8004da0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004da4:	f107 020c 	add.w	r2, r7, #12
 8004da8:	4611      	mov	r1, r2
 8004daa:	4618      	mov	r0, r3
 8004dac:	f000 feec 	bl	8005b88 <HAL_GPIO_Init>
    
    /* Wait Button pin startup stability */
    HAL_Delay(1);
 8004db0:	2001      	movs	r0, #1
 8004db2:	f7fc fd8f 	bl	80018d4 <HAL_Delay>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8004db6:	79bb      	ldrb	r3, [r7, #6]
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d123      	bne.n	8004e04 <BSP_PB_Init+0xcc>
  {
    /* Configure Button pin as input with External interrupt */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8004dbc:	79fb      	ldrb	r3, [r7, #7]
 8004dbe:	4a13      	ldr	r2, [pc, #76]	; (8004e0c <BSP_PB_Init+0xd4>)
 8004dc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004dc4:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Mode = GPIO_MODE_IT_FALLING; 
 8004dca:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8004dce:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8004dd0:	79fb      	ldrb	r3, [r7, #7]
 8004dd2:	4a0f      	ldr	r2, [pc, #60]	; (8004e10 <BSP_PB_Init+0xd8>)
 8004dd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dd8:	f107 020c 	add.w	r2, r7, #12
 8004ddc:	4611      	mov	r1, r2
 8004dde:	4618      	mov	r0, r3
 8004de0:	f000 fed2 	bl	8005b88 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8004de4:	79fb      	ldrb	r3, [r7, #7]
 8004de6:	4a0b      	ldr	r2, [pc, #44]	; (8004e14 <BSP_PB_Init+0xdc>)
 8004de8:	5cd3      	ldrb	r3, [r2, r3]
 8004dea:	b25b      	sxtb	r3, r3
 8004dec:	2200      	movs	r2, #0
 8004dee:	210f      	movs	r1, #15
 8004df0:	4618      	mov	r0, r3
 8004df2:	f000 fad6 	bl	80053a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8004df6:	79fb      	ldrb	r3, [r7, #7]
 8004df8:	4a06      	ldr	r2, [pc, #24]	; (8004e14 <BSP_PB_Init+0xdc>)
 8004dfa:	5cd3      	ldrb	r3, [r2, r3]
 8004dfc:	b25b      	sxtb	r3, r3
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f000 fae9 	bl	80053d6 <HAL_NVIC_EnableIRQ>
  }
}
 8004e04:	bf00      	nop
 8004e06:	3720      	adds	r7, #32
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}
 8004e0c:	08012038 	.word	0x08012038
 8004e10:	20000024 	.word	0x20000024
 8004e14:	08012040 	.word	0x08012040

08004e18 <LL_RCC_HSE_Enable>:
{
 8004e18:	b480      	push	{r7}
 8004e1a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004e1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e2a:	6013      	str	r3, [r2, #0]
}
 8004e2c:	bf00      	nop
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr

08004e36 <LL_RCC_HSE_IsReady>:
{
 8004e36:	b480      	push	{r7}
 8004e38:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004e3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e48:	d101      	bne.n	8004e4e <LL_RCC_HSE_IsReady+0x18>
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e000      	b.n	8004e50 <LL_RCC_HSE_IsReady+0x1a>
 8004e4e:	2300      	movs	r3, #0
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr
	...

08004e5c <LL_RCC_HSE_SetCapacitorTuning>:
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8004e64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e68:	4a0a      	ldr	r2, [pc, #40]	; (8004e94 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8004e6a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8004e6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e72:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e76:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	021b      	lsls	r3, r3, #8
 8004e7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e82:	4313      	orrs	r3, r2
 8004e84:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8004e88:	bf00      	nop
 8004e8a:	370c      	adds	r7, #12
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr
 8004e94:	cafecafe 	.word	0xcafecafe

08004e98 <LL_RCC_MSI_Disable>:
{
 8004e98:	b480      	push	{r7}
 8004e9a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004e9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ea6:	f023 0301 	bic.w	r3, r3, #1
 8004eaa:	6013      	str	r3, [r2, #0]
}
 8004eac:	bf00      	nop
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr

08004eb6 <LL_RCC_SetSysClkSource>:
{
 8004eb6:	b480      	push	{r7}
 8004eb8:	b083      	sub	sp, #12
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004ebe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	f023 0203 	bic.w	r2, r3, #3
 8004ec8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	608b      	str	r3, [r1, #8]
}
 8004ed2:	bf00      	nop
 8004ed4:	370c      	adds	r7, #12
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr

08004ede <LL_RCC_GetSysClkSource>:
{
 8004ede:	b480      	push	{r7}
 8004ee0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004ee2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	f003 030c 	and.w	r3, r3, #12
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr
	...

08004ef8 <LL_FLASH_SetLatency>:
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b083      	sub	sp, #12
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8004f00:	4b06      	ldr	r3, [pc, #24]	; (8004f1c <LL_FLASH_SetLatency+0x24>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f023 0207 	bic.w	r2, r3, #7
 8004f08:	4904      	ldr	r1, [pc, #16]	; (8004f1c <LL_FLASH_SetLatency+0x24>)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	600b      	str	r3, [r1, #0]
}
 8004f10:	bf00      	nop
 8004f12:	370c      	adds	r7, #12
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr
 8004f1c:	58004000 	.word	0x58004000

08004f20 <LL_FLASH_GetLatency>:
{
 8004f20:	b480      	push	{r7}
 8004f22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8004f24:	4b04      	ldr	r3, [pc, #16]	; (8004f38 <LL_FLASH_GetLatency+0x18>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 0307 	and.w	r3, r3, #7
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr
 8004f36:	bf00      	nop
 8004f38:	58004000 	.word	0x58004000

08004f3c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b082      	sub	sp, #8
 8004f40:	af00      	add	r7, sp, #0
	OTP_ID0_t * p_otp;

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8004f42:	4b1a      	ldr	r3, [pc, #104]	; (8004fac <SystemInit+0x70>)
 8004f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f48:	4a18      	ldr	r2, [pc, #96]	; (8004fac <SystemInit+0x70>)
 8004f4a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004f4e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

	/**
	 * Read HSE_Tuning from OTP
	 */
	p_otp = (OTP_ID0_t *) OTP_Read(0);
 8004f52:	2000      	movs	r0, #0
 8004f54:	f007 fec8 	bl	800cce8 <OTP_Read>
 8004f58:	6078      	str	r0, [r7, #4]
	if (p_otp)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d004      	beq.n	8004f6a <SystemInit+0x2e>
	{
		LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	799b      	ldrb	r3, [r3, #6]
 8004f64:	4618      	mov	r0, r3
 8004f66:	f7ff ff79 	bl	8004e5c <LL_RCC_HSE_SetCapacitorTuning>
	}

	LL_RCC_HSE_Enable();
 8004f6a:	f7ff ff55 	bl	8004e18 <LL_RCC_HSE_Enable>

	/**
	 * Set FLASH latency to 1WS
	 */
	LL_FLASH_SetLatency( LL_FLASH_LATENCY_1 );
 8004f6e:	2001      	movs	r0, #1
 8004f70:	f7ff ffc2 	bl	8004ef8 <LL_FLASH_SetLatency>
	while( LL_FLASH_GetLatency() != LL_FLASH_LATENCY_1 );
 8004f74:	bf00      	nop
 8004f76:	f7ff ffd3 	bl	8004f20 <LL_FLASH_GetLatency>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d1fa      	bne.n	8004f76 <SystemInit+0x3a>

	/**
	 * Switch to HSE
	 *
	 */
	while(!LL_RCC_HSE_IsReady());
 8004f80:	bf00      	nop
 8004f82:	f7ff ff58 	bl	8004e36 <LL_RCC_HSE_IsReady>
 8004f86:	4603      	mov	r3, r0
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d0fa      	beq.n	8004f82 <SystemInit+0x46>
	LL_RCC_SetSysClkSource( LL_RCC_SYS_CLKSOURCE_HSE );
 8004f8c:	2002      	movs	r0, #2
 8004f8e:	f7ff ff92 	bl	8004eb6 <LL_RCC_SetSysClkSource>
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSE);
 8004f92:	bf00      	nop
 8004f94:	f7ff ffa3 	bl	8004ede <LL_RCC_GetSysClkSource>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b08      	cmp	r3, #8
 8004f9c:	d1fa      	bne.n	8004f94 <SystemInit+0x58>

	/**
	 * Switch OFF MSI
	 */
	LL_RCC_MSI_Disable();
 8004f9e:	f7ff ff7b 	bl	8004e98 <LL_RCC_MSI_Disable>
}
 8004fa2:	bf00      	nop
 8004fa4:	3708      	adds	r7, #8
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	bf00      	nop
 8004fac:	e000ed00 	.word	0xe000ed00

08004fb0 <LL_DBGMCU_EnableDBGSleepMode>:
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8004fb4:	4b05      	ldr	r3, [pc, #20]	; (8004fcc <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	4a04      	ldr	r2, [pc, #16]	; (8004fcc <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8004fba:	f043 0301 	orr.w	r3, r3, #1
 8004fbe:	6053      	str	r3, [r2, #4]
}
 8004fc0:	bf00      	nop
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr
 8004fca:	bf00      	nop
 8004fcc:	e0042000 	.word	0xe0042000

08004fd0 <LL_DBGMCU_EnableDBGStopMode>:
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8004fd4:	4b05      	ldr	r3, [pc, #20]	; (8004fec <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	4a04      	ldr	r2, [pc, #16]	; (8004fec <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8004fda:	f043 0302 	orr.w	r3, r3, #2
 8004fde:	6053      	str	r3, [r2, #4]
}
 8004fe0:	bf00      	nop
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr
 8004fea:	bf00      	nop
 8004fec:	e0042000 	.word	0xe0042000

08004ff0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b082      	sub	sp, #8
 8004ff4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004ffa:	4b0c      	ldr	r3, [pc, #48]	; (800502c <HAL_Init+0x3c>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a0b      	ldr	r2, [pc, #44]	; (800502c <HAL_Init+0x3c>)
 8005000:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005004:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005006:	2003      	movs	r0, #3
 8005008:	f000 f9c0 	bl	800538c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800500c:	2000      	movs	r0, #0
 800500e:	f000 f80f 	bl	8005030 <HAL_InitTick>
 8005012:	4603      	mov	r3, r0
 8005014:	2b00      	cmp	r3, #0
 8005016:	d002      	beq.n	800501e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	71fb      	strb	r3, [r7, #7]
 800501c:	e001      	b.n	8005022 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800501e:	f7fd fff0 	bl	8003002 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005022:	79fb      	ldrb	r3, [r7, #7]
}
 8005024:	4618      	mov	r0, r3
 8005026:	3708      	adds	r7, #8
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}
 800502c:	58004000 	.word	0x58004000

08005030 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005038:	2300      	movs	r3, #0
 800503a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 800503c:	4b17      	ldr	r3, [pc, #92]	; (800509c <HAL_InitTick+0x6c>)
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d024      	beq.n	800508e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8005044:	f002 f89e 	bl	8007184 <HAL_RCC_GetHCLKFreq>
 8005048:	4602      	mov	r2, r0
 800504a:	4b14      	ldr	r3, [pc, #80]	; (800509c <HAL_InitTick+0x6c>)
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	4619      	mov	r1, r3
 8005050:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005054:	fbb3 f3f1 	udiv	r3, r3, r1
 8005058:	fbb2 f3f3 	udiv	r3, r2, r3
 800505c:	4618      	mov	r0, r3
 800505e:	f000 f9d6 	bl	800540e <HAL_SYSTICK_Config>
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	d10f      	bne.n	8005088 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2b0f      	cmp	r3, #15
 800506c:	d809      	bhi.n	8005082 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800506e:	2200      	movs	r2, #0
 8005070:	6879      	ldr	r1, [r7, #4]
 8005072:	f04f 30ff 	mov.w	r0, #4294967295
 8005076:	f000 f994 	bl	80053a2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800507a:	4a09      	ldr	r2, [pc, #36]	; (80050a0 <HAL_InitTick+0x70>)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6013      	str	r3, [r2, #0]
 8005080:	e007      	b.n	8005092 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	73fb      	strb	r3, [r7, #15]
 8005086:	e004      	b.n	8005092 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	73fb      	strb	r3, [r7, #15]
 800508c:	e001      	b.n	8005092 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005092:	7bfb      	ldrb	r3, [r7, #15]
}
 8005094:	4618      	mov	r0, r3
 8005096:	3710      	adds	r7, #16
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}
 800509c:	20000038 	.word	0x20000038
 80050a0:	20000034 	.word	0x20000034

080050a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80050a4:	b480      	push	{r7}
 80050a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80050a8:	4b06      	ldr	r3, [pc, #24]	; (80050c4 <HAL_IncTick+0x20>)
 80050aa:	781b      	ldrb	r3, [r3, #0]
 80050ac:	461a      	mov	r2, r3
 80050ae:	4b06      	ldr	r3, [pc, #24]	; (80050c8 <HAL_IncTick+0x24>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4413      	add	r3, r2
 80050b4:	4a04      	ldr	r2, [pc, #16]	; (80050c8 <HAL_IncTick+0x24>)
 80050b6:	6013      	str	r3, [r2, #0]
}
 80050b8:	bf00      	nop
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr
 80050c2:	bf00      	nop
 80050c4:	20000038 	.word	0x20000038
 80050c8:	200007cc 	.word	0x200007cc

080050cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80050cc:	b480      	push	{r7}
 80050ce:	af00      	add	r7, sp, #0
  return uwTick;
 80050d0:	4b03      	ldr	r3, [pc, #12]	; (80050e0 <HAL_GetTick+0x14>)
 80050d2:	681b      	ldr	r3, [r3, #0]
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr
 80050de:	bf00      	nop
 80050e0:	200007cc 	.word	0x200007cc

080050e4 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80050e4:	b480      	push	{r7}
 80050e6:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80050e8:	4b03      	ldr	r3, [pc, #12]	; (80050f8 <HAL_GetTickPrio+0x14>)
 80050ea:	681b      	ldr	r3, [r3, #0]
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr
 80050f6:	bf00      	nop
 80050f8:	20000034 	.word	0x20000034

080050fc <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 80050fc:	b480      	push	{r7}
 80050fe:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8005100:	4b03      	ldr	r3, [pc, #12]	; (8005110 <HAL_GetTickFreq+0x14>)
 8005102:	781b      	ldrb	r3, [r3, #0]
}
 8005104:	4618      	mov	r0, r3
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr
 800510e:	bf00      	nop
 8005110:	20000038 	.word	0x20000038

08005114 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8005118:	f7ff ff4a 	bl	8004fb0 <LL_DBGMCU_EnableDBGSleepMode>
}
 800511c:	bf00      	nop
 800511e:	bd80      	pop	{r7, pc}

08005120 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8005124:	f7ff ff54 	bl	8004fd0 <LL_DBGMCU_EnableDBGStopMode>
}
 8005128:	bf00      	nop
 800512a:	bd80      	pop	{r7, pc}

0800512c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800512c:	b480      	push	{r7}
 800512e:	b085      	sub	sp, #20
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f003 0307 	and.w	r3, r3, #7
 800513a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800513c:	4b0c      	ldr	r3, [pc, #48]	; (8005170 <__NVIC_SetPriorityGrouping+0x44>)
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005142:	68ba      	ldr	r2, [r7, #8]
 8005144:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005148:	4013      	ands	r3, r2
 800514a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005154:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005158:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800515c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800515e:	4a04      	ldr	r2, [pc, #16]	; (8005170 <__NVIC_SetPriorityGrouping+0x44>)
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	60d3      	str	r3, [r2, #12]
}
 8005164:	bf00      	nop
 8005166:	3714      	adds	r7, #20
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr
 8005170:	e000ed00 	.word	0xe000ed00

08005174 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005174:	b480      	push	{r7}
 8005176:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005178:	4b04      	ldr	r3, [pc, #16]	; (800518c <__NVIC_GetPriorityGrouping+0x18>)
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	0a1b      	lsrs	r3, r3, #8
 800517e:	f003 0307 	and.w	r3, r3, #7
}
 8005182:	4618      	mov	r0, r3
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr
 800518c:	e000ed00 	.word	0xe000ed00

08005190 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005190:	b480      	push	{r7}
 8005192:	b083      	sub	sp, #12
 8005194:	af00      	add	r7, sp, #0
 8005196:	4603      	mov	r3, r0
 8005198:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800519a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	db0b      	blt.n	80051ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80051a2:	79fb      	ldrb	r3, [r7, #7]
 80051a4:	f003 021f 	and.w	r2, r3, #31
 80051a8:	4907      	ldr	r1, [pc, #28]	; (80051c8 <__NVIC_EnableIRQ+0x38>)
 80051aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051ae:	095b      	lsrs	r3, r3, #5
 80051b0:	2001      	movs	r0, #1
 80051b2:	fa00 f202 	lsl.w	r2, r0, r2
 80051b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80051ba:	bf00      	nop
 80051bc:	370c      	adds	r7, #12
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr
 80051c6:	bf00      	nop
 80051c8:	e000e100 	.word	0xe000e100

080051cc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b083      	sub	sp, #12
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	4603      	mov	r3, r0
 80051d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	db12      	blt.n	8005204 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80051de:	79fb      	ldrb	r3, [r7, #7]
 80051e0:	f003 021f 	and.w	r2, r3, #31
 80051e4:	490a      	ldr	r1, [pc, #40]	; (8005210 <__NVIC_DisableIRQ+0x44>)
 80051e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051ea:	095b      	lsrs	r3, r3, #5
 80051ec:	2001      	movs	r0, #1
 80051ee:	fa00 f202 	lsl.w	r2, r0, r2
 80051f2:	3320      	adds	r3, #32
 80051f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80051f8:	f3bf 8f4f 	dsb	sy
}
 80051fc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80051fe:	f3bf 8f6f 	isb	sy
}
 8005202:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005204:	bf00      	nop
 8005206:	370c      	adds	r7, #12
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr
 8005210:	e000e100 	.word	0xe000e100

08005214 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8005214:	b480      	push	{r7}
 8005216:	b083      	sub	sp, #12
 8005218:	af00      	add	r7, sp, #0
 800521a:	4603      	mov	r3, r0
 800521c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800521e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005222:	2b00      	cmp	r3, #0
 8005224:	db0c      	blt.n	8005240 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005226:	79fb      	ldrb	r3, [r7, #7]
 8005228:	f003 021f 	and.w	r2, r3, #31
 800522c:	4907      	ldr	r1, [pc, #28]	; (800524c <__NVIC_SetPendingIRQ+0x38>)
 800522e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005232:	095b      	lsrs	r3, r3, #5
 8005234:	2001      	movs	r0, #1
 8005236:	fa00 f202 	lsl.w	r2, r0, r2
 800523a:	3340      	adds	r3, #64	; 0x40
 800523c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005240:	bf00      	nop
 8005242:	370c      	adds	r7, #12
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr
 800524c:	e000e100 	.word	0xe000e100

08005250 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	4603      	mov	r3, r0
 8005258:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800525a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800525e:	2b00      	cmp	r3, #0
 8005260:	db0c      	blt.n	800527c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005262:	79fb      	ldrb	r3, [r7, #7]
 8005264:	f003 021f 	and.w	r2, r3, #31
 8005268:	4907      	ldr	r1, [pc, #28]	; (8005288 <__NVIC_ClearPendingIRQ+0x38>)
 800526a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800526e:	095b      	lsrs	r3, r3, #5
 8005270:	2001      	movs	r0, #1
 8005272:	fa00 f202 	lsl.w	r2, r0, r2
 8005276:	3360      	adds	r3, #96	; 0x60
 8005278:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800527c:	bf00      	nop
 800527e:	370c      	adds	r7, #12
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr
 8005288:	e000e100 	.word	0xe000e100

0800528c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800528c:	b480      	push	{r7}
 800528e:	b083      	sub	sp, #12
 8005290:	af00      	add	r7, sp, #0
 8005292:	4603      	mov	r3, r0
 8005294:	6039      	str	r1, [r7, #0]
 8005296:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005298:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800529c:	2b00      	cmp	r3, #0
 800529e:	db0a      	blt.n	80052b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	b2da      	uxtb	r2, r3
 80052a4:	490c      	ldr	r1, [pc, #48]	; (80052d8 <__NVIC_SetPriority+0x4c>)
 80052a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052aa:	0112      	lsls	r2, r2, #4
 80052ac:	b2d2      	uxtb	r2, r2
 80052ae:	440b      	add	r3, r1
 80052b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80052b4:	e00a      	b.n	80052cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	b2da      	uxtb	r2, r3
 80052ba:	4908      	ldr	r1, [pc, #32]	; (80052dc <__NVIC_SetPriority+0x50>)
 80052bc:	79fb      	ldrb	r3, [r7, #7]
 80052be:	f003 030f 	and.w	r3, r3, #15
 80052c2:	3b04      	subs	r3, #4
 80052c4:	0112      	lsls	r2, r2, #4
 80052c6:	b2d2      	uxtb	r2, r2
 80052c8:	440b      	add	r3, r1
 80052ca:	761a      	strb	r2, [r3, #24]
}
 80052cc:	bf00      	nop
 80052ce:	370c      	adds	r7, #12
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr
 80052d8:	e000e100 	.word	0xe000e100
 80052dc:	e000ed00 	.word	0xe000ed00

080052e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b089      	sub	sp, #36	; 0x24
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f003 0307 	and.w	r3, r3, #7
 80052f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80052f4:	69fb      	ldr	r3, [r7, #28]
 80052f6:	f1c3 0307 	rsb	r3, r3, #7
 80052fa:	2b04      	cmp	r3, #4
 80052fc:	bf28      	it	cs
 80052fe:	2304      	movcs	r3, #4
 8005300:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	3304      	adds	r3, #4
 8005306:	2b06      	cmp	r3, #6
 8005308:	d902      	bls.n	8005310 <NVIC_EncodePriority+0x30>
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	3b03      	subs	r3, #3
 800530e:	e000      	b.n	8005312 <NVIC_EncodePriority+0x32>
 8005310:	2300      	movs	r3, #0
 8005312:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005314:	f04f 32ff 	mov.w	r2, #4294967295
 8005318:	69bb      	ldr	r3, [r7, #24]
 800531a:	fa02 f303 	lsl.w	r3, r2, r3
 800531e:	43da      	mvns	r2, r3
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	401a      	ands	r2, r3
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005328:	f04f 31ff 	mov.w	r1, #4294967295
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	fa01 f303 	lsl.w	r3, r1, r3
 8005332:	43d9      	mvns	r1, r3
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005338:	4313      	orrs	r3, r2
         );
}
 800533a:	4618      	mov	r0, r3
 800533c:	3724      	adds	r7, #36	; 0x24
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr
	...

08005348 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b082      	sub	sp, #8
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	3b01      	subs	r3, #1
 8005354:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005358:	d301      	bcc.n	800535e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800535a:	2301      	movs	r3, #1
 800535c:	e00f      	b.n	800537e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800535e:	4a0a      	ldr	r2, [pc, #40]	; (8005388 <SysTick_Config+0x40>)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	3b01      	subs	r3, #1
 8005364:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005366:	210f      	movs	r1, #15
 8005368:	f04f 30ff 	mov.w	r0, #4294967295
 800536c:	f7ff ff8e 	bl	800528c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005370:	4b05      	ldr	r3, [pc, #20]	; (8005388 <SysTick_Config+0x40>)
 8005372:	2200      	movs	r2, #0
 8005374:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005376:	4b04      	ldr	r3, [pc, #16]	; (8005388 <SysTick_Config+0x40>)
 8005378:	2207      	movs	r2, #7
 800537a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800537c:	2300      	movs	r3, #0
}
 800537e:	4618      	mov	r0, r3
 8005380:	3708      	adds	r7, #8
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	e000e010 	.word	0xe000e010

0800538c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b082      	sub	sp, #8
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f7ff fec9 	bl	800512c <__NVIC_SetPriorityGrouping>
}
 800539a:	bf00      	nop
 800539c:	3708      	adds	r7, #8
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}

080053a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80053a2:	b580      	push	{r7, lr}
 80053a4:	b086      	sub	sp, #24
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	4603      	mov	r3, r0
 80053aa:	60b9      	str	r1, [r7, #8]
 80053ac:	607a      	str	r2, [r7, #4]
 80053ae:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80053b0:	f7ff fee0 	bl	8005174 <__NVIC_GetPriorityGrouping>
 80053b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	68b9      	ldr	r1, [r7, #8]
 80053ba:	6978      	ldr	r0, [r7, #20]
 80053bc:	f7ff ff90 	bl	80052e0 <NVIC_EncodePriority>
 80053c0:	4602      	mov	r2, r0
 80053c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053c6:	4611      	mov	r1, r2
 80053c8:	4618      	mov	r0, r3
 80053ca:	f7ff ff5f 	bl	800528c <__NVIC_SetPriority>
}
 80053ce:	bf00      	nop
 80053d0:	3718      	adds	r7, #24
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}

080053d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053d6:	b580      	push	{r7, lr}
 80053d8:	b082      	sub	sp, #8
 80053da:	af00      	add	r7, sp, #0
 80053dc:	4603      	mov	r3, r0
 80053de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80053e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053e4:	4618      	mov	r0, r3
 80053e6:	f7ff fed3 	bl	8005190 <__NVIC_EnableIRQ>
}
 80053ea:	bf00      	nop
 80053ec:	3708      	adds	r7, #8
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}

080053f2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80053f2:	b580      	push	{r7, lr}
 80053f4:	b082      	sub	sp, #8
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	4603      	mov	r3, r0
 80053fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80053fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005400:	4618      	mov	r0, r3
 8005402:	f7ff fee3 	bl	80051cc <__NVIC_DisableIRQ>
}
 8005406:	bf00      	nop
 8005408:	3708      	adds	r7, #8
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}

0800540e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800540e:	b580      	push	{r7, lr}
 8005410:	b082      	sub	sp, #8
 8005412:	af00      	add	r7, sp, #0
 8005414:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f7ff ff96 	bl	8005348 <SysTick_Config>
 800541c:	4603      	mov	r3, r0
}
 800541e:	4618      	mov	r0, r3
 8005420:	3708      	adds	r7, #8
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}

08005426 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8005426:	b580      	push	{r7, lr}
 8005428:	b082      	sub	sp, #8
 800542a:	af00      	add	r7, sp, #0
 800542c:	4603      	mov	r3, r0
 800542e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8005430:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005434:	4618      	mov	r0, r3
 8005436:	f7ff feed 	bl	8005214 <__NVIC_SetPendingIRQ>
}
 800543a:	bf00      	nop
 800543c:	3708      	adds	r7, #8
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}

08005442 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8005442:	b580      	push	{r7, lr}
 8005444:	b082      	sub	sp, #8
 8005446:	af00      	add	r7, sp, #0
 8005448:	4603      	mov	r3, r0
 800544a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800544c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005450:	4618      	mov	r0, r3
 8005452:	f7ff fefd 	bl	8005250 <__NVIC_ClearPendingIRQ>
}
 8005456:	bf00      	nop
 8005458:	3708      	adds	r7, #8
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}
	...

08005460 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b084      	sub	sp, #16
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d101      	bne.n	8005472 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	e08e      	b.n	8005590 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	461a      	mov	r2, r3
 8005478:	4b47      	ldr	r3, [pc, #284]	; (8005598 <HAL_DMA_Init+0x138>)
 800547a:	429a      	cmp	r2, r3
 800547c:	d80f      	bhi.n	800549e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	461a      	mov	r2, r3
 8005484:	4b45      	ldr	r3, [pc, #276]	; (800559c <HAL_DMA_Init+0x13c>)
 8005486:	4413      	add	r3, r2
 8005488:	4a45      	ldr	r2, [pc, #276]	; (80055a0 <HAL_DMA_Init+0x140>)
 800548a:	fba2 2303 	umull	r2, r3, r2, r3
 800548e:	091b      	lsrs	r3, r3, #4
 8005490:	009a      	lsls	r2, r3, #2
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a42      	ldr	r2, [pc, #264]	; (80055a4 <HAL_DMA_Init+0x144>)
 800549a:	641a      	str	r2, [r3, #64]	; 0x40
 800549c:	e00e      	b.n	80054bc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	461a      	mov	r2, r3
 80054a4:	4b40      	ldr	r3, [pc, #256]	; (80055a8 <HAL_DMA_Init+0x148>)
 80054a6:	4413      	add	r3, r2
 80054a8:	4a3d      	ldr	r2, [pc, #244]	; (80055a0 <HAL_DMA_Init+0x140>)
 80054aa:	fba2 2303 	umull	r2, r3, r2, r3
 80054ae:	091b      	lsrs	r3, r3, #4
 80054b0:	009a      	lsls	r2, r3, #2
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a3c      	ldr	r2, [pc, #240]	; (80055ac <HAL_DMA_Init+0x14c>)
 80054ba:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2202      	movs	r2, #2
 80054c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80054d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054d6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80054e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	691b      	ldr	r3, [r3, #16]
 80054e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	699b      	ldr	r3, [r3, #24]
 80054f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6a1b      	ldr	r3, [r3, #32]
 80054fe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005500:	68fa      	ldr	r2, [r7, #12]
 8005502:	4313      	orrs	r3, r2
 8005504:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	68fa      	ldr	r2, [r7, #12]
 800550c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f000 fa74 	bl	80059fc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800551c:	d102      	bne.n	8005524 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2200      	movs	r2, #0
 8005522:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	685a      	ldr	r2, [r3, #4]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800552c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8005530:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005536:	687a      	ldr	r2, [r7, #4]
 8005538:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800553a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d010      	beq.n	8005566 <HAL_DMA_Init+0x106>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	2b04      	cmp	r3, #4
 800554a:	d80c      	bhi.n	8005566 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f000 fa93 	bl	8005a78 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005556:	2200      	movs	r2, #0
 8005558:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005562:	605a      	str	r2, [r3, #4]
 8005564:	e008      	b.n	8005578 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2200      	movs	r2, #0
 8005576:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2200      	movs	r2, #0
 800557c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2201      	movs	r2, #1
 8005582:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800558e:	2300      	movs	r3, #0
}
 8005590:	4618      	mov	r0, r3
 8005592:	3710      	adds	r7, #16
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}
 8005598:	40020407 	.word	0x40020407
 800559c:	bffdfff8 	.word	0xbffdfff8
 80055a0:	cccccccd 	.word	0xcccccccd
 80055a4:	40020000 	.word	0x40020000
 80055a8:	bffdfbf8 	.word	0xbffdfbf8
 80055ac:	40020400 	.word	0x40020400

080055b0 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b086      	sub	sp, #24
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	60b9      	str	r1, [r7, #8]
 80055ba:	607a      	str	r2, [r7, #4]
 80055bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055be:	2300      	movs	r3, #0
 80055c0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d101      	bne.n	80055d0 <HAL_DMA_Start_IT+0x20>
 80055cc:	2302      	movs	r3, #2
 80055ce:	e066      	b.n	800569e <HAL_DMA_Start_IT+0xee>
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2201      	movs	r2, #1
 80055d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80055de:	b2db      	uxtb	r3, r3
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d155      	bne.n	8005690 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2202      	movs	r2, #2
 80055e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2200      	movs	r2, #0
 80055f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f022 0201 	bic.w	r2, r2, #1
 8005600:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	68b9      	ldr	r1, [r7, #8]
 8005608:	68f8      	ldr	r0, [r7, #12]
 800560a:	f000 f9b9 	bl	8005980 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005612:	2b00      	cmp	r3, #0
 8005614:	d008      	beq.n	8005628 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f042 020e 	orr.w	r2, r2, #14
 8005624:	601a      	str	r2, [r3, #0]
 8005626:	e00f      	b.n	8005648 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f022 0204 	bic.w	r2, r2, #4
 8005636:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f042 020a 	orr.w	r2, r2, #10
 8005646:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005652:	2b00      	cmp	r3, #0
 8005654:	d007      	beq.n	8005666 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005660:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005664:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800566a:	2b00      	cmp	r3, #0
 800566c:	d007      	beq.n	800567e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005678:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800567c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f042 0201 	orr.w	r2, r2, #1
 800568c:	601a      	str	r2, [r3, #0]
 800568e:	e005      	b.n	800569c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2200      	movs	r2, #0
 8005694:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005698:	2302      	movs	r3, #2
 800569a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800569c:	7dfb      	ldrb	r3, [r7, #23]
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3718      	adds	r7, #24
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}

080056a6 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80056a6:	b480      	push	{r7}
 80056a8:	b083      	sub	sp, #12
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d101      	bne.n	80056b8 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	e04f      	b.n	8005758 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	2b02      	cmp	r3, #2
 80056c2:	d008      	beq.n	80056d6 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2204      	movs	r2, #4
 80056c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e040      	b.n	8005758 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f022 020e 	bic.w	r2, r2, #14
 80056e4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80056f4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f022 0201 	bic.w	r2, r2, #1
 8005704:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800570a:	f003 021c 	and.w	r2, r3, #28
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005712:	2101      	movs	r1, #1
 8005714:	fa01 f202 	lsl.w	r2, r1, r2
 8005718:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005722:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005728:	2b00      	cmp	r3, #0
 800572a:	d00c      	beq.n	8005746 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005736:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800573a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005744:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2201      	movs	r2, #1
 800574a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2200      	movs	r2, #0
 8005752:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8005756:	2300      	movs	r3, #0
}
 8005758:	4618      	mov	r0, r3
 800575a:	370c      	adds	r7, #12
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr

08005764 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b084      	sub	sp, #16
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800576c:	2300      	movs	r3, #0
 800576e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005776:	b2db      	uxtb	r3, r3
 8005778:	2b02      	cmp	r3, #2
 800577a:	d005      	beq.n	8005788 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2204      	movs	r2, #4
 8005780:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	73fb      	strb	r3, [r7, #15]
 8005786:	e047      	b.n	8005818 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f022 020e 	bic.w	r2, r2, #14
 8005796:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f022 0201 	bic.w	r2, r2, #1
 80057a6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80057b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057bc:	f003 021c 	and.w	r2, r3, #28
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c4:	2101      	movs	r1, #1
 80057c6:	fa01 f202 	lsl.w	r2, r1, r2
 80057ca:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80057d4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d00c      	beq.n	80057f8 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80057ec:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80057f6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800580c:	2b00      	cmp	r3, #0
 800580e:	d003      	beq.n	8005818 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	4798      	blx	r3
    }
  }
  return status;
 8005818:	7bfb      	ldrb	r3, [r7, #15]
}
 800581a:	4618      	mov	r0, r3
 800581c:	3710      	adds	r7, #16
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}

08005822 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005822:	b580      	push	{r7, lr}
 8005824:	b084      	sub	sp, #16
 8005826:	af00      	add	r7, sp, #0
 8005828:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800583e:	f003 031c 	and.w	r3, r3, #28
 8005842:	2204      	movs	r2, #4
 8005844:	409a      	lsls	r2, r3
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	4013      	ands	r3, r2
 800584a:	2b00      	cmp	r3, #0
 800584c:	d026      	beq.n	800589c <HAL_DMA_IRQHandler+0x7a>
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	f003 0304 	and.w	r3, r3, #4
 8005854:	2b00      	cmp	r3, #0
 8005856:	d021      	beq.n	800589c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f003 0320 	and.w	r3, r3, #32
 8005862:	2b00      	cmp	r3, #0
 8005864:	d107      	bne.n	8005876 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f022 0204 	bic.w	r2, r2, #4
 8005874:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800587a:	f003 021c 	and.w	r2, r3, #28
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005882:	2104      	movs	r1, #4
 8005884:	fa01 f202 	lsl.w	r2, r1, r2
 8005888:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800588e:	2b00      	cmp	r3, #0
 8005890:	d071      	beq.n	8005976 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800589a:	e06c      	b.n	8005976 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058a0:	f003 031c 	and.w	r3, r3, #28
 80058a4:	2202      	movs	r2, #2
 80058a6:	409a      	lsls	r2, r3
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	4013      	ands	r3, r2
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d02e      	beq.n	800590e <HAL_DMA_IRQHandler+0xec>
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	f003 0302 	and.w	r3, r3, #2
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d029      	beq.n	800590e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f003 0320 	and.w	r3, r3, #32
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d10b      	bne.n	80058e0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f022 020a 	bic.w	r2, r2, #10
 80058d6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058e4:	f003 021c 	and.w	r2, r3, #28
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ec:	2102      	movs	r1, #2
 80058ee:	fa01 f202 	lsl.w	r2, r1, r2
 80058f2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005900:	2b00      	cmp	r3, #0
 8005902:	d038      	beq.n	8005976 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800590c:	e033      	b.n	8005976 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005912:	f003 031c 	and.w	r3, r3, #28
 8005916:	2208      	movs	r2, #8
 8005918:	409a      	lsls	r2, r3
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	4013      	ands	r3, r2
 800591e:	2b00      	cmp	r3, #0
 8005920:	d02a      	beq.n	8005978 <HAL_DMA_IRQHandler+0x156>
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	f003 0308 	and.w	r3, r3, #8
 8005928:	2b00      	cmp	r3, #0
 800592a:	d025      	beq.n	8005978 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f022 020e 	bic.w	r2, r2, #14
 800593a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005940:	f003 021c 	and.w	r2, r3, #28
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005948:	2101      	movs	r1, #1
 800594a:	fa01 f202 	lsl.w	r2, r1, r2
 800594e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2201      	movs	r2, #1
 8005954:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2201      	movs	r2, #1
 800595a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800596a:	2b00      	cmp	r3, #0
 800596c:	d004      	beq.n	8005978 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005976:	bf00      	nop
 8005978:	bf00      	nop
}
 800597a:	3710      	adds	r7, #16
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}

08005980 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005980:	b480      	push	{r7}
 8005982:	b085      	sub	sp, #20
 8005984:	af00      	add	r7, sp, #0
 8005986:	60f8      	str	r0, [r7, #12]
 8005988:	60b9      	str	r1, [r7, #8]
 800598a:	607a      	str	r2, [r7, #4]
 800598c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005992:	68fa      	ldr	r2, [r7, #12]
 8005994:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005996:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800599c:	2b00      	cmp	r3, #0
 800599e:	d004      	beq.n	80059aa <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059a4:	68fa      	ldr	r2, [r7, #12]
 80059a6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80059a8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059ae:	f003 021c 	and.w	r2, r3, #28
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b6:	2101      	movs	r1, #1
 80059b8:	fa01 f202 	lsl.w	r2, r1, r2
 80059bc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	683a      	ldr	r2, [r7, #0]
 80059c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	2b10      	cmp	r3, #16
 80059cc:	d108      	bne.n	80059e0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	687a      	ldr	r2, [r7, #4]
 80059d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	68ba      	ldr	r2, [r7, #8]
 80059dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80059de:	e007      	b.n	80059f0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	68ba      	ldr	r2, [r7, #8]
 80059e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	60da      	str	r2, [r3, #12]
}
 80059f0:	bf00      	nop
 80059f2:	3714      	adds	r7, #20
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr

080059fc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b085      	sub	sp, #20
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	461a      	mov	r2, r3
 8005a0a:	4b17      	ldr	r3, [pc, #92]	; (8005a68 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d80a      	bhi.n	8005a26 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a14:	089b      	lsrs	r3, r3, #2
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005a1c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	6493      	str	r3, [r2, #72]	; 0x48
 8005a24:	e007      	b.n	8005a36 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a2a:	089b      	lsrs	r3, r3, #2
 8005a2c:	009a      	lsls	r2, r3, #2
 8005a2e:	4b0f      	ldr	r3, [pc, #60]	; (8005a6c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005a30:	4413      	add	r3, r2
 8005a32:	687a      	ldr	r2, [r7, #4]
 8005a34:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	b2db      	uxtb	r3, r3
 8005a3c:	3b08      	subs	r3, #8
 8005a3e:	4a0c      	ldr	r2, [pc, #48]	; (8005a70 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005a40:	fba2 2303 	umull	r2, r3, r2, r3
 8005a44:	091b      	lsrs	r3, r3, #4
 8005a46:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	4a0a      	ldr	r2, [pc, #40]	; (8005a74 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005a4c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f003 031f 	and.w	r3, r3, #31
 8005a54:	2201      	movs	r2, #1
 8005a56:	409a      	lsls	r2, r3
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005a5c:	bf00      	nop
 8005a5e:	3714      	adds	r7, #20
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr
 8005a68:	40020407 	.word	0x40020407
 8005a6c:	4002081c 	.word	0x4002081c
 8005a70:	cccccccd 	.word	0xcccccccd
 8005a74:	40020880 	.word	0x40020880

08005a78 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b085      	sub	sp, #20
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a88:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005a8a:	68fa      	ldr	r2, [r7, #12]
 8005a8c:	4b0b      	ldr	r3, [pc, #44]	; (8005abc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005a8e:	4413      	add	r3, r2
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	461a      	mov	r2, r3
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	4a09      	ldr	r2, [pc, #36]	; (8005ac0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8005a9c:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	3b01      	subs	r3, #1
 8005aa2:	f003 0303 	and.w	r3, r3, #3
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	409a      	lsls	r2, r3
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8005aae:	bf00      	nop
 8005ab0:	3714      	adds	r7, #20
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab8:	4770      	bx	lr
 8005aba:	bf00      	nop
 8005abc:	1000823f 	.word	0x1000823f
 8005ac0:	40020940 	.word	0x40020940

08005ac4 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA channel.
  * @param  pSyncConfig Pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	6039      	str	r1, [r7, #0]
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  /*Check if the DMA state is ready */
  if (hdma->State == HAL_DMA_STATE_READY)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d12b      	bne.n	8005b32 <HAL_DMAEx_ConfigMuxSync+0x6e>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d101      	bne.n	8005ae8 <HAL_DMAEx_ConfigMuxSync+0x24>
 8005ae4:	2302      	movs	r3, #2
 8005ae6:	e025      	b.n	8005b34 <HAL_DMAEx_ConfigMuxSync+0x70>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG(hdma->DMAmuxChannel->CCR, \
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	4b12      	ldr	r3, [pc, #72]	; (8005b40 <HAL_DMAEx_ConfigMuxSync+0x7c>)
 8005af8:	4013      	ands	r3, r2
 8005afa:	683a      	ldr	r2, [r7, #0]
 8005afc:	6811      	ldr	r1, [r2, #0]
 8005afe:	683a      	ldr	r2, [r7, #0]
 8005b00:	68d2      	ldr	r2, [r2, #12]
 8005b02:	3a01      	subs	r2, #1
 8005b04:	04d2      	lsls	r2, r2, #19
 8005b06:	4311      	orrs	r1, r2
 8005b08:	683a      	ldr	r2, [r7, #0]
 8005b0a:	6852      	ldr	r2, [r2, #4]
 8005b0c:	4311      	orrs	r1, r2
 8005b0e:	683a      	ldr	r2, [r7, #0]
 8005b10:	7a12      	ldrb	r2, [r2, #8]
 8005b12:	0412      	lsls	r2, r2, #16
 8005b14:	4311      	orrs	r1, r2
 8005b16:	683a      	ldr	r2, [r7, #0]
 8005b18:	7a52      	ldrb	r2, [r2, #9]
 8005b1a:	0252      	lsls	r2, r2, #9
 8005b1c:	4311      	orrs	r1, r2
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005b22:	430b      	orrs	r3, r1
 8005b24:	6013      	str	r3, [r2, #0]
                pSyncConfig->SyncPolarity                                       | \
                ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)                 | \
                ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos)));

    /* Process UnLocked */
    __HAL_UNLOCK(hdma);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_OK;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	e000      	b.n	8005b34 <HAL_DMAEx_ConfigMuxSync+0x70>
  }
  else
  {
    /*DMA State not Ready*/
    return HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
  }
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	370c      	adds	r7, #12
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr
 8005b40:	e000fdff 	.word	0xe000fdff

08005b44 <HAL_EXTI_GenerateSWI>:
  * @brief  Generate a software interrupt for a dedicated line.
  * @param  hexti Exti handle.
  * @retval None.
  */
void HAL_EXTI_GenerateSWI(EXTI_HandleTypeDef *hexti)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b087      	sub	sp, #28
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  /* Check parameters */
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));

  /* compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	0c1b      	lsrs	r3, r3, #16
 8005b52:	f003 0301 	and.w	r3, r3, #1
 8005b56:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f003 031f 	and.w	r3, r3, #31
 8005b60:	2201      	movs	r2, #1
 8005b62:	fa02 f303 	lsl.w	r3, r2, r3
 8005b66:	613b      	str	r3, [r7, #16]

  regaddr = (&EXTI->SWIER1 + (EXTI_CONFIG_OFFSET * offset));
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	015b      	lsls	r3, r3, #5
 8005b6c:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
 8005b70:	f603 0308 	addw	r3, r3, #2056	; 0x808
 8005b74:	60fb      	str	r3, [r7, #12]
  *regaddr = maskline;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	693a      	ldr	r2, [r7, #16]
 8005b7a:	601a      	str	r2, [r3, #0]
}
 8005b7c:	bf00      	nop
 8005b7e:	371c      	adds	r7, #28
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr

08005b88 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b087      	sub	sp, #28
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005b92:	2300      	movs	r3, #0
 8005b94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005b96:	e14c      	b.n	8005e32 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	2101      	movs	r1, #1
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ba4:	4013      	ands	r3, r2
 8005ba6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	f000 813e 	beq.w	8005e2c <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	f003 0303 	and.w	r3, r3, #3
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d005      	beq.n	8005bc8 <HAL_GPIO_Init+0x40>
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	f003 0303 	and.w	r3, r3, #3
 8005bc4:	2b02      	cmp	r3, #2
 8005bc6:	d130      	bne.n	8005c2a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	005b      	lsls	r3, r3, #1
 8005bd2:	2203      	movs	r2, #3
 8005bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8005bd8:	43db      	mvns	r3, r3
 8005bda:	693a      	ldr	r2, [r7, #16]
 8005bdc:	4013      	ands	r3, r2
 8005bde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	68da      	ldr	r2, [r3, #12]
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	005b      	lsls	r3, r3, #1
 8005be8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bec:	693a      	ldr	r2, [r7, #16]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	693a      	ldr	r2, [r7, #16]
 8005bf6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005bfe:	2201      	movs	r2, #1
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	fa02 f303 	lsl.w	r3, r2, r3
 8005c06:	43db      	mvns	r3, r3
 8005c08:	693a      	ldr	r2, [r7, #16]
 8005c0a:	4013      	ands	r3, r2
 8005c0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	091b      	lsrs	r3, r3, #4
 8005c14:	f003 0201 	and.w	r2, r3, #1
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c1e:	693a      	ldr	r2, [r7, #16]
 8005c20:	4313      	orrs	r3, r2
 8005c22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	693a      	ldr	r2, [r7, #16]
 8005c28:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	f003 0303 	and.w	r3, r3, #3
 8005c32:	2b03      	cmp	r3, #3
 8005c34:	d017      	beq.n	8005c66 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	68db      	ldr	r3, [r3, #12]
 8005c3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	005b      	lsls	r3, r3, #1
 8005c40:	2203      	movs	r2, #3
 8005c42:	fa02 f303 	lsl.w	r3, r2, r3
 8005c46:	43db      	mvns	r3, r3
 8005c48:	693a      	ldr	r2, [r7, #16]
 8005c4a:	4013      	ands	r3, r2
 8005c4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	689a      	ldr	r2, [r3, #8]
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	005b      	lsls	r3, r3, #1
 8005c56:	fa02 f303 	lsl.w	r3, r2, r3
 8005c5a:	693a      	ldr	r2, [r7, #16]
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	693a      	ldr	r2, [r7, #16]
 8005c64:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	f003 0303 	and.w	r3, r3, #3
 8005c6e:	2b02      	cmp	r3, #2
 8005c70:	d123      	bne.n	8005cba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	08da      	lsrs	r2, r3, #3
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	3208      	adds	r2, #8
 8005c7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	f003 0307 	and.w	r3, r3, #7
 8005c86:	009b      	lsls	r3, r3, #2
 8005c88:	220f      	movs	r2, #15
 8005c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c8e:	43db      	mvns	r3, r3
 8005c90:	693a      	ldr	r2, [r7, #16]
 8005c92:	4013      	ands	r3, r2
 8005c94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	691a      	ldr	r2, [r3, #16]
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	f003 0307 	and.w	r3, r3, #7
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca6:	693a      	ldr	r2, [r7, #16]
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	08da      	lsrs	r2, r3, #3
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	3208      	adds	r2, #8
 8005cb4:	6939      	ldr	r1, [r7, #16]
 8005cb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	005b      	lsls	r3, r3, #1
 8005cc4:	2203      	movs	r2, #3
 8005cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8005cca:	43db      	mvns	r3, r3
 8005ccc:	693a      	ldr	r2, [r7, #16]
 8005cce:	4013      	ands	r3, r2
 8005cd0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	f003 0203 	and.w	r2, r3, #3
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	005b      	lsls	r3, r3, #1
 8005cde:	fa02 f303 	lsl.w	r3, r2, r3
 8005ce2:	693a      	ldr	r2, [r7, #16]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	693a      	ldr	r2, [r7, #16]
 8005cec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	f000 8098 	beq.w	8005e2c <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8005cfc:	4a54      	ldr	r2, [pc, #336]	; (8005e50 <HAL_GPIO_Init+0x2c8>)
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	089b      	lsrs	r3, r3, #2
 8005d02:	3302      	adds	r3, #2
 8005d04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d08:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	f003 0303 	and.w	r3, r3, #3
 8005d10:	009b      	lsls	r3, r3, #2
 8005d12:	220f      	movs	r2, #15
 8005d14:	fa02 f303 	lsl.w	r3, r2, r3
 8005d18:	43db      	mvns	r3, r3
 8005d1a:	693a      	ldr	r2, [r7, #16]
 8005d1c:	4013      	ands	r3, r2
 8005d1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005d26:	d019      	beq.n	8005d5c <HAL_GPIO_Init+0x1d4>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	4a4a      	ldr	r2, [pc, #296]	; (8005e54 <HAL_GPIO_Init+0x2cc>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d013      	beq.n	8005d58 <HAL_GPIO_Init+0x1d0>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4a49      	ldr	r2, [pc, #292]	; (8005e58 <HAL_GPIO_Init+0x2d0>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d00d      	beq.n	8005d54 <HAL_GPIO_Init+0x1cc>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	4a48      	ldr	r2, [pc, #288]	; (8005e5c <HAL_GPIO_Init+0x2d4>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d007      	beq.n	8005d50 <HAL_GPIO_Init+0x1c8>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	4a47      	ldr	r2, [pc, #284]	; (8005e60 <HAL_GPIO_Init+0x2d8>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d101      	bne.n	8005d4c <HAL_GPIO_Init+0x1c4>
 8005d48:	2304      	movs	r3, #4
 8005d4a:	e008      	b.n	8005d5e <HAL_GPIO_Init+0x1d6>
 8005d4c:	2307      	movs	r3, #7
 8005d4e:	e006      	b.n	8005d5e <HAL_GPIO_Init+0x1d6>
 8005d50:	2303      	movs	r3, #3
 8005d52:	e004      	b.n	8005d5e <HAL_GPIO_Init+0x1d6>
 8005d54:	2302      	movs	r3, #2
 8005d56:	e002      	b.n	8005d5e <HAL_GPIO_Init+0x1d6>
 8005d58:	2301      	movs	r3, #1
 8005d5a:	e000      	b.n	8005d5e <HAL_GPIO_Init+0x1d6>
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	697a      	ldr	r2, [r7, #20]
 8005d60:	f002 0203 	and.w	r2, r2, #3
 8005d64:	0092      	lsls	r2, r2, #2
 8005d66:	4093      	lsls	r3, r2
 8005d68:	693a      	ldr	r2, [r7, #16]
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005d6e:	4938      	ldr	r1, [pc, #224]	; (8005e50 <HAL_GPIO_Init+0x2c8>)
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	089b      	lsrs	r3, r3, #2
 8005d74:	3302      	adds	r3, #2
 8005d76:	693a      	ldr	r2, [r7, #16]
 8005d78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005d7c:	4b39      	ldr	r3, [pc, #228]	; (8005e64 <HAL_GPIO_Init+0x2dc>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	43db      	mvns	r3, r3
 8005d86:	693a      	ldr	r2, [r7, #16]
 8005d88:	4013      	ands	r3, r2
 8005d8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d003      	beq.n	8005da0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8005d98:	693a      	ldr	r2, [r7, #16]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005da0:	4a30      	ldr	r2, [pc, #192]	; (8005e64 <HAL_GPIO_Init+0x2dc>)
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005da6:	4b2f      	ldr	r3, [pc, #188]	; (8005e64 <HAL_GPIO_Init+0x2dc>)
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	43db      	mvns	r3, r3
 8005db0:	693a      	ldr	r2, [r7, #16]
 8005db2:	4013      	ands	r3, r2
 8005db4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d003      	beq.n	8005dca <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8005dc2:	693a      	ldr	r2, [r7, #16]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005dca:	4a26      	ldr	r2, [pc, #152]	; (8005e64 <HAL_GPIO_Init+0x2dc>)
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005dd0:	4b24      	ldr	r3, [pc, #144]	; (8005e64 <HAL_GPIO_Init+0x2dc>)
 8005dd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005dd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	43db      	mvns	r3, r3
 8005ddc:	693a      	ldr	r2, [r7, #16]
 8005dde:	4013      	ands	r3, r2
 8005de0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d003      	beq.n	8005df6 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8005dee:	693a      	ldr	r2, [r7, #16]
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005df6:	4a1b      	ldr	r2, [pc, #108]	; (8005e64 <HAL_GPIO_Init+0x2dc>)
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8005dfe:	4b19      	ldr	r3, [pc, #100]	; (8005e64 <HAL_GPIO_Init+0x2dc>)
 8005e00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	43db      	mvns	r3, r3
 8005e0a:	693a      	ldr	r2, [r7, #16]
 8005e0c:	4013      	ands	r3, r2
 8005e0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d003      	beq.n	8005e24 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8005e1c:	693a      	ldr	r2, [r7, #16]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	4313      	orrs	r3, r2
 8005e22:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005e24:	4a0f      	ldr	r2, [pc, #60]	; (8005e64 <HAL_GPIO_Init+0x2dc>)
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	3301      	adds	r3, #1
 8005e30:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	fa22 f303 	lsr.w	r3, r2, r3
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	f47f aeab 	bne.w	8005b98 <HAL_GPIO_Init+0x10>
  }
}
 8005e42:	bf00      	nop
 8005e44:	bf00      	nop
 8005e46:	371c      	adds	r7, #28
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr
 8005e50:	40010000 	.word	0x40010000
 8005e54:	48000400 	.word	0x48000400
 8005e58:	48000800 	.word	0x48000800
 8005e5c:	48000c00 	.word	0x48000c00
 8005e60:	48001000 	.word	0x48001000
 8005e64:	58000800 	.word	0x58000800

08005e68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	460b      	mov	r3, r1
 8005e72:	807b      	strh	r3, [r7, #2]
 8005e74:	4613      	mov	r3, r2
 8005e76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005e78:	787b      	ldrb	r3, [r7, #1]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d003      	beq.n	8005e86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005e7e:	887a      	ldrh	r2, [r7, #2]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005e84:	e002      	b.n	8005e8c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005e86:	887a      	ldrh	r2, [r7, #2]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005e8c:	bf00      	nop
 8005e8e:	370c      	adds	r7, #12
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr

08005e98 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b082      	sub	sp, #8
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005ea2:	4b08      	ldr	r3, [pc, #32]	; (8005ec4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005ea4:	68da      	ldr	r2, [r3, #12]
 8005ea6:	88fb      	ldrh	r3, [r7, #6]
 8005ea8:	4013      	ands	r3, r2
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d006      	beq.n	8005ebc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005eae:	4a05      	ldr	r2, [pc, #20]	; (8005ec4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005eb0:	88fb      	ldrh	r3, [r7, #6]
 8005eb2:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005eb4:	88fb      	ldrh	r3, [r7, #6]
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f7fb fd70 	bl	800199c <HAL_GPIO_EXTI_Callback>
  }
}
 8005ebc:	bf00      	nop
 8005ebe:	3708      	adds	r7, #8
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}
 8005ec4:	58000800 	.word	0x58000800

08005ec8 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b082      	sub	sp, #8
 8005ecc:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8005ece:	4b0a      	ldr	r3, [pc, #40]	; (8005ef8 <HAL_HSEM_IRQHandler+0x30>)
 8005ed0:	68db      	ldr	r3, [r3, #12]
 8005ed2:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8005ed4:	4b08      	ldr	r3, [pc, #32]	; (8005ef8 <HAL_HSEM_IRQHandler+0x30>)
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	43db      	mvns	r3, r3
 8005edc:	4906      	ldr	r1, [pc, #24]	; (8005ef8 <HAL_HSEM_IRQHandler+0x30>)
 8005ede:	4013      	ands	r3, r2
 8005ee0:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8005ee2:	4a05      	ldr	r2, [pc, #20]	; (8005ef8 <HAL_HSEM_IRQHandler+0x30>)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f000 f807 	bl	8005efc <HAL_HSEM_FreeCallback>
}
 8005eee:	bf00      	nop
 8005ef0:	3708      	adds	r7, #8
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
 8005ef6:	bf00      	nop
 8005ef8:	58001500 	.word	0x58001500

08005efc <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b083      	sub	sp, #12
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8005f04:	bf00      	nop
 8005f06:	370c      	adds	r7, #12
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr

08005f10 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b084      	sub	sp, #16
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d01e      	beq.n	8005f60 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8005f22:	4b13      	ldr	r3, [pc, #76]	; (8005f70 <HAL_IPCC_Init+0x60>)
 8005f24:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d102      	bne.n	8005f38 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f7fd f876 	bl	8003024 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8005f38:	68b8      	ldr	r0, [r7, #8]
 8005f3a:	f000 f85b 	bl	8005ff4 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f000 f82c 	bl	8005fa8 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2200      	movs	r2, #0
 8005f54:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2201      	movs	r2, #1
 8005f5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8005f5e:	e001      	b.n	8005f64 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8005f60:	2301      	movs	r3, #1
 8005f62:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8005f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3710      	adds	r7, #16
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	bf00      	nop
 8005f70:	58000c00 	.word	0x58000c00

08005f74 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b085      	sub	sp, #20
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	60f8      	str	r0, [r7, #12]
 8005f7c:	60b9      	str	r1, [r7, #8]
 8005f7e:	4613      	mov	r3, r2
 8005f80:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8005f82:	bf00      	nop
 8005f84:	3714      	adds	r7, #20
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr

08005f8e <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8005f8e:	b480      	push	{r7}
 8005f90:	b085      	sub	sp, #20
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	60f8      	str	r0, [r7, #12]
 8005f96:	60b9      	str	r1, [r7, #8]
 8005f98:	4613      	mov	r3, r2
 8005f9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8005f9c:	bf00      	nop
 8005f9e:	3714      	adds	r7, #20
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr

08005fa8 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b085      	sub	sp, #20
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	60fb      	str	r3, [r7, #12]
 8005fb4:	e00f      	b.n	8005fd6 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	009b      	lsls	r3, r3, #2
 8005fbc:	4413      	add	r3, r2
 8005fbe:	4a0b      	ldr	r2, [pc, #44]	; (8005fec <IPCC_SetDefaultCallbacks+0x44>)
 8005fc0:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	3306      	adds	r3, #6
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	4413      	add	r3, r2
 8005fcc:	4a08      	ldr	r2, [pc, #32]	; (8005ff0 <IPCC_SetDefaultCallbacks+0x48>)
 8005fce:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	3301      	adds	r3, #1
 8005fd4:	60fb      	str	r3, [r7, #12]
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2b05      	cmp	r3, #5
 8005fda:	d9ec      	bls.n	8005fb6 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8005fdc:	bf00      	nop
 8005fde:	bf00      	nop
 8005fe0:	3714      	adds	r7, #20
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr
 8005fea:	bf00      	nop
 8005fec:	08005f75 	.word	0x08005f75
 8005ff0:	08005f8f 	.word	0x08005f8f

08005ff4 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b083      	sub	sp, #12
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2200      	movs	r2, #0
 8006000:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8006008:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	223f      	movs	r2, #63	; 0x3f
 800600e:	609a      	str	r2, [r3, #8]
}
 8006010:	bf00      	nop
 8006012:	370c      	adds	r7, #12
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr

0800601c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800601c:	b480      	push	{r7}
 800601e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006020:	4b05      	ldr	r3, [pc, #20]	; (8006038 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a04      	ldr	r2, [pc, #16]	; (8006038 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006026:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800602a:	6013      	str	r3, [r2, #0]
}
 800602c:	bf00      	nop
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr
 8006036:	bf00      	nop
 8006038:	58000400 	.word	0x58000400

0800603c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800603c:	b480      	push	{r7}
 800603e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8006040:	4b04      	ldr	r3, [pc, #16]	; (8006054 <HAL_PWREx_GetVoltageRange+0x18>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8006048:	4618      	mov	r0, r3
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr
 8006052:	bf00      	nop
 8006054:	58000400 	.word	0x58000400

08006058 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8006058:	b480      	push	{r7}
 800605a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800605c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006066:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800606a:	d101      	bne.n	8006070 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800606c:	2301      	movs	r3, #1
 800606e:	e000      	b.n	8006072 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8006070:	2300      	movs	r3, #0
}
 8006072:	4618      	mov	r0, r3
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr

0800607c <LL_RCC_HSE_Enable>:
{
 800607c:	b480      	push	{r7}
 800607e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8006080:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800608a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800608e:	6013      	str	r3, [r2, #0]
}
 8006090:	bf00      	nop
 8006092:	46bd      	mov	sp, r7
 8006094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006098:	4770      	bx	lr

0800609a <LL_RCC_HSE_Disable>:
{
 800609a:	b480      	push	{r7}
 800609c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800609e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060ac:	6013      	str	r3, [r2, #0]
}
 80060ae:	bf00      	nop
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr

080060b8 <LL_RCC_HSE_IsReady>:
{
 80060b8:	b480      	push	{r7}
 80060ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80060bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80060ca:	d101      	bne.n	80060d0 <LL_RCC_HSE_IsReady+0x18>
 80060cc:	2301      	movs	r3, #1
 80060ce:	e000      	b.n	80060d2 <LL_RCC_HSE_IsReady+0x1a>
 80060d0:	2300      	movs	r3, #0
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr

080060dc <LL_RCC_HSI_Enable>:
{
 80060dc:	b480      	push	{r7}
 80060de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80060e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060ee:	6013      	str	r3, [r2, #0]
}
 80060f0:	bf00      	nop
 80060f2:	46bd      	mov	sp, r7
 80060f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f8:	4770      	bx	lr

080060fa <LL_RCC_HSI_Disable>:
{
 80060fa:	b480      	push	{r7}
 80060fc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80060fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006108:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800610c:	6013      	str	r3, [r2, #0]
}
 800610e:	bf00      	nop
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr

08006118 <LL_RCC_HSI_IsReady>:
{
 8006118:	b480      	push	{r7}
 800611a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800611c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006126:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800612a:	d101      	bne.n	8006130 <LL_RCC_HSI_IsReady+0x18>
 800612c:	2301      	movs	r3, #1
 800612e:	e000      	b.n	8006132 <LL_RCC_HSI_IsReady+0x1a>
 8006130:	2300      	movs	r3, #0
}
 8006132:	4618      	mov	r0, r3
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr

0800613c <LL_RCC_HSI_SetCalibTrimming>:
{
 800613c:	b480      	push	{r7}
 800613e:	b083      	sub	sp, #12
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8006144:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	061b      	lsls	r3, r3, #24
 8006152:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006156:	4313      	orrs	r3, r2
 8006158:	604b      	str	r3, [r1, #4]
}
 800615a:	bf00      	nop
 800615c:	370c      	adds	r7, #12
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr

08006166 <LL_RCC_HSI48_Enable>:
{
 8006166:	b480      	push	{r7}
 8006168:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800616a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800616e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006172:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006176:	f043 0301 	orr.w	r3, r3, #1
 800617a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800617e:	bf00      	nop
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr

08006188 <LL_RCC_HSI48_Disable>:
{
 8006188:	b480      	push	{r7}
 800618a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800618c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006190:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006194:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006198:	f023 0301 	bic.w	r3, r3, #1
 800619c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80061a0:	bf00      	nop
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr

080061aa <LL_RCC_HSI48_IsReady>:
{
 80061aa:	b480      	push	{r7}
 80061ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80061ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80061b6:	f003 0302 	and.w	r3, r3, #2
 80061ba:	2b02      	cmp	r3, #2
 80061bc:	d101      	bne.n	80061c2 <LL_RCC_HSI48_IsReady+0x18>
 80061be:	2301      	movs	r3, #1
 80061c0:	e000      	b.n	80061c4 <LL_RCC_HSI48_IsReady+0x1a>
 80061c2:	2300      	movs	r3, #0
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr

080061ce <LL_RCC_LSE_Enable>:
{
 80061ce:	b480      	push	{r7}
 80061d0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80061d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80061de:	f043 0301 	orr.w	r3, r3, #1
 80061e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80061e6:	bf00      	nop
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr

080061f0 <LL_RCC_LSE_Disable>:
{
 80061f0:	b480      	push	{r7}
 80061f2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80061f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006200:	f023 0301 	bic.w	r3, r3, #1
 8006204:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006208:	bf00      	nop
 800620a:	46bd      	mov	sp, r7
 800620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006210:	4770      	bx	lr

08006212 <LL_RCC_LSE_EnableBypass>:
{
 8006212:	b480      	push	{r7}
 8006214:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006216:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800621a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800621e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006222:	f043 0304 	orr.w	r3, r3, #4
 8006226:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800622a:	bf00      	nop
 800622c:	46bd      	mov	sp, r7
 800622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006232:	4770      	bx	lr

08006234 <LL_RCC_LSE_DisableBypass>:
{
 8006234:	b480      	push	{r7}
 8006236:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006238:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800623c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006240:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006244:	f023 0304 	bic.w	r3, r3, #4
 8006248:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800624c:	bf00      	nop
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr

08006256 <LL_RCC_LSE_IsReady>:
{
 8006256:	b480      	push	{r7}
 8006258:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800625a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800625e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006262:	f003 0302 	and.w	r3, r3, #2
 8006266:	2b02      	cmp	r3, #2
 8006268:	d101      	bne.n	800626e <LL_RCC_LSE_IsReady+0x18>
 800626a:	2301      	movs	r3, #1
 800626c:	e000      	b.n	8006270 <LL_RCC_LSE_IsReady+0x1a>
 800626e:	2300      	movs	r3, #0
}
 8006270:	4618      	mov	r0, r3
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr

0800627a <LL_RCC_LSI1_Enable>:
{
 800627a:	b480      	push	{r7}
 800627c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800627e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006282:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006286:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800628a:	f043 0301 	orr.w	r3, r3, #1
 800628e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006292:	bf00      	nop
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr

0800629c <LL_RCC_LSI1_Disable>:
{
 800629c:	b480      	push	{r7}
 800629e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80062a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80062a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80062ac:	f023 0301 	bic.w	r3, r3, #1
 80062b0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80062b4:	bf00      	nop
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr

080062be <LL_RCC_LSI1_IsReady>:
{
 80062be:	b480      	push	{r7}
 80062c0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80062c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80062ca:	f003 0302 	and.w	r3, r3, #2
 80062ce:	2b02      	cmp	r3, #2
 80062d0:	d101      	bne.n	80062d6 <LL_RCC_LSI1_IsReady+0x18>
 80062d2:	2301      	movs	r3, #1
 80062d4:	e000      	b.n	80062d8 <LL_RCC_LSI1_IsReady+0x1a>
 80062d6:	2300      	movs	r3, #0
}
 80062d8:	4618      	mov	r0, r3
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr

080062e2 <LL_RCC_LSI2_Enable>:
{
 80062e2:	b480      	push	{r7}
 80062e4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80062e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80062ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80062f2:	f043 0304 	orr.w	r3, r3, #4
 80062f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80062fa:	bf00      	nop
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <LL_RCC_LSI2_Disable>:
{
 8006304:	b480      	push	{r7}
 8006306:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8006308:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800630c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006310:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006314:	f023 0304 	bic.w	r3, r3, #4
 8006318:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800631c:	bf00      	nop
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr

08006326 <LL_RCC_LSI2_IsReady>:
{
 8006326:	b480      	push	{r7}
 8006328:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800632a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800632e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006332:	f003 0308 	and.w	r3, r3, #8
 8006336:	2b08      	cmp	r3, #8
 8006338:	d101      	bne.n	800633e <LL_RCC_LSI2_IsReady+0x18>
 800633a:	2301      	movs	r3, #1
 800633c:	e000      	b.n	8006340 <LL_RCC_LSI2_IsReady+0x1a>
 800633e:	2300      	movs	r3, #0
}
 8006340:	4618      	mov	r0, r3
 8006342:	46bd      	mov	sp, r7
 8006344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006348:	4770      	bx	lr

0800634a <LL_RCC_LSI2_SetTrimming>:
{
 800634a:	b480      	push	{r7}
 800634c:	b083      	sub	sp, #12
 800634e:	af00      	add	r7, sp, #0
 8006350:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8006352:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006356:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800635a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	021b      	lsls	r3, r3, #8
 8006362:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006366:	4313      	orrs	r3, r2
 8006368:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800636c:	bf00      	nop
 800636e:	370c      	adds	r7, #12
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr

08006378 <LL_RCC_MSI_Enable>:
{
 8006378:	b480      	push	{r7}
 800637a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800637c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006386:	f043 0301 	orr.w	r3, r3, #1
 800638a:	6013      	str	r3, [r2, #0]
}
 800638c:	bf00      	nop
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr

08006396 <LL_RCC_MSI_Disable>:
{
 8006396:	b480      	push	{r7}
 8006398:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800639a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80063a4:	f023 0301 	bic.w	r3, r3, #1
 80063a8:	6013      	str	r3, [r2, #0]
}
 80063aa:	bf00      	nop
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr

080063b4 <LL_RCC_MSI_IsReady>:
{
 80063b4:	b480      	push	{r7}
 80063b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80063b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f003 0302 	and.w	r3, r3, #2
 80063c2:	2b02      	cmp	r3, #2
 80063c4:	d101      	bne.n	80063ca <LL_RCC_MSI_IsReady+0x16>
 80063c6:	2301      	movs	r3, #1
 80063c8:	e000      	b.n	80063cc <LL_RCC_MSI_IsReady+0x18>
 80063ca:	2300      	movs	r3, #0
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr

080063d6 <LL_RCC_MSI_SetRange>:
{
 80063d6:	b480      	push	{r7}
 80063d8:	b083      	sub	sp, #12
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80063de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80063e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	4313      	orrs	r3, r2
 80063f0:	600b      	str	r3, [r1, #0]
}
 80063f2:	bf00      	nop
 80063f4:	370c      	adds	r7, #12
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr

080063fe <LL_RCC_MSI_GetRange>:
{
 80063fe:	b480      	push	{r7}
 8006400:	b083      	sub	sp, #12
 8006402:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8006404:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800640e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2bb0      	cmp	r3, #176	; 0xb0
 8006414:	d901      	bls.n	800641a <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8006416:	23b0      	movs	r3, #176	; 0xb0
 8006418:	607b      	str	r3, [r7, #4]
  return msiRange;
 800641a:	687b      	ldr	r3, [r7, #4]
}
 800641c:	4618      	mov	r0, r3
 800641e:	370c      	adds	r7, #12
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr

08006428 <LL_RCC_MSI_SetCalibTrimming>:
{
 8006428:	b480      	push	{r7}
 800642a:	b083      	sub	sp, #12
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8006430:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	021b      	lsls	r3, r3, #8
 800643e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006442:	4313      	orrs	r3, r2
 8006444:	604b      	str	r3, [r1, #4]
}
 8006446:	bf00      	nop
 8006448:	370c      	adds	r7, #12
 800644a:	46bd      	mov	sp, r7
 800644c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006450:	4770      	bx	lr

08006452 <LL_RCC_SetSysClkSource>:
{
 8006452:	b480      	push	{r7}
 8006454:	b083      	sub	sp, #12
 8006456:	af00      	add	r7, sp, #0
 8006458:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800645a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	f023 0203 	bic.w	r2, r3, #3
 8006464:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	4313      	orrs	r3, r2
 800646c:	608b      	str	r3, [r1, #8]
}
 800646e:	bf00      	nop
 8006470:	370c      	adds	r7, #12
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr

0800647a <LL_RCC_GetSysClkSource>:
{
 800647a:	b480      	push	{r7}
 800647c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800647e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	f003 030c 	and.w	r3, r3, #12
}
 8006488:	4618      	mov	r0, r3
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr

08006492 <LL_RCC_SetAHBPrescaler>:
{
 8006492:	b480      	push	{r7}
 8006494:	b083      	sub	sp, #12
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800649a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80064a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	4313      	orrs	r3, r2
 80064ac:	608b      	str	r3, [r1, #8]
}
 80064ae:	bf00      	nop
 80064b0:	370c      	adds	r7, #12
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr

080064ba <LL_C2_RCC_SetAHBPrescaler>:
{
 80064ba:	b480      	push	{r7}
 80064bc:	b083      	sub	sp, #12
 80064be:	af00      	add	r7, sp, #0
 80064c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80064c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064c6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80064ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80064ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	4313      	orrs	r3, r2
 80064d6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80064da:	bf00      	nop
 80064dc:	370c      	adds	r7, #12
 80064de:	46bd      	mov	sp, r7
 80064e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e4:	4770      	bx	lr

080064e6 <LL_RCC_SetAHB4Prescaler>:
{
 80064e6:	b480      	push	{r7}
 80064e8:	b083      	sub	sp, #12
 80064ea:	af00      	add	r7, sp, #0
 80064ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80064ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064f2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80064f6:	f023 020f 	bic.w	r2, r3, #15
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	091b      	lsrs	r3, r3, #4
 80064fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006502:	4313      	orrs	r3, r2
 8006504:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8006508:	bf00      	nop
 800650a:	370c      	adds	r7, #12
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr

08006514 <LL_RCC_SetAPB1Prescaler>:
{
 8006514:	b480      	push	{r7}
 8006516:	b083      	sub	sp, #12
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800651c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006520:	689b      	ldr	r3, [r3, #8]
 8006522:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006526:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	4313      	orrs	r3, r2
 800652e:	608b      	str	r3, [r1, #8]
}
 8006530:	bf00      	nop
 8006532:	370c      	adds	r7, #12
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr

0800653c <LL_RCC_SetAPB2Prescaler>:
{
 800653c:	b480      	push	{r7}
 800653e:	b083      	sub	sp, #12
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8006544:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800654e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	4313      	orrs	r3, r2
 8006556:	608b      	str	r3, [r1, #8]
}
 8006558:	bf00      	nop
 800655a:	370c      	adds	r7, #12
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr

08006564 <LL_RCC_GetAHBPrescaler>:
{
 8006564:	b480      	push	{r7}
 8006566:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8006568:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800656c:	689b      	ldr	r3, [r3, #8]
 800656e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006572:	4618      	mov	r0, r3
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr

0800657c <LL_RCC_GetAHB4Prescaler>:
{
 800657c:	b480      	push	{r7}
 800657e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8006580:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006584:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006588:	011b      	lsls	r3, r3, #4
 800658a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800658e:	4618      	mov	r0, r3
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr

08006598 <LL_RCC_GetAPB1Prescaler>:
{
 8006598:	b480      	push	{r7}
 800659a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800659c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr

080065b0 <LL_RCC_GetAPB2Prescaler>:
{
 80065b0:	b480      	push	{r7}
 80065b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80065b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80065be:	4618      	mov	r0, r3
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr

080065c8 <LL_RCC_PLL_Enable>:
{
 80065c8:	b480      	push	{r7}
 80065ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80065cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80065d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80065da:	6013      	str	r3, [r2, #0]
}
 80065dc:	bf00      	nop
 80065de:	46bd      	mov	sp, r7
 80065e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e4:	4770      	bx	lr

080065e6 <LL_RCC_PLL_Disable>:
{
 80065e6:	b480      	push	{r7}
 80065e8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80065ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80065f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80065f8:	6013      	str	r3, [r2, #0]
}
 80065fa:	bf00      	nop
 80065fc:	46bd      	mov	sp, r7
 80065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006602:	4770      	bx	lr

08006604 <LL_RCC_PLL_IsReady>:
{
 8006604:	b480      	push	{r7}
 8006606:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8006608:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006612:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006616:	d101      	bne.n	800661c <LL_RCC_PLL_IsReady+0x18>
 8006618:	2301      	movs	r3, #1
 800661a:	e000      	b.n	800661e <LL_RCC_PLL_IsReady+0x1a>
 800661c:	2300      	movs	r3, #0
}
 800661e:	4618      	mov	r0, r3
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr

08006628 <LL_RCC_PLL_GetN>:
{
 8006628:	b480      	push	{r7}
 800662a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800662c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006630:	68db      	ldr	r3, [r3, #12]
 8006632:	0a1b      	lsrs	r3, r3, #8
 8006634:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8006638:	4618      	mov	r0, r3
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr

08006642 <LL_RCC_PLL_GetR>:
{
 8006642:	b480      	push	{r7}
 8006644:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8006646:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800664a:	68db      	ldr	r3, [r3, #12]
 800664c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8006650:	4618      	mov	r0, r3
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr

0800665a <LL_RCC_PLL_GetDivider>:
{
 800665a:	b480      	push	{r7}
 800665c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800665e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006662:	68db      	ldr	r3, [r3, #12]
 8006664:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8006668:	4618      	mov	r0, r3
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr

08006672 <LL_RCC_PLL_GetMainSource>:
{
 8006672:	b480      	push	{r7}
 8006674:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8006676:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800667a:	68db      	ldr	r3, [r3, #12]
 800667c:	f003 0303 	and.w	r3, r3, #3
}
 8006680:	4618      	mov	r0, r3
 8006682:	46bd      	mov	sp, r7
 8006684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006688:	4770      	bx	lr

0800668a <LL_RCC_IsActiveFlag_HPRE>:
{
 800668a:	b480      	push	{r7}
 800668c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800668e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006698:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800669c:	d101      	bne.n	80066a2 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800669e:	2301      	movs	r3, #1
 80066a0:	e000      	b.n	80066a4 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80066a2:	2300      	movs	r3, #0
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr

080066ae <LL_RCC_IsActiveFlag_C2HPRE>:
{
 80066ae:	b480      	push	{r7}
 80066b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80066b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066b6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80066ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066c2:	d101      	bne.n	80066c8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80066c4:	2301      	movs	r3, #1
 80066c6:	e000      	b.n	80066ca <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80066c8:	2300      	movs	r3, #0
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr

080066d4 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 80066d4:	b480      	push	{r7}
 80066d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80066d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066dc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80066e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066e8:	d101      	bne.n	80066ee <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80066ea:	2301      	movs	r3, #1
 80066ec:	e000      	b.n	80066f0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80066ee:	2300      	movs	r3, #0
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr

080066fa <LL_RCC_IsActiveFlag_PPRE1>:
{
 80066fa:	b480      	push	{r7}
 80066fc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80066fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006708:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800670c:	d101      	bne.n	8006712 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800670e:	2301      	movs	r3, #1
 8006710:	e000      	b.n	8006714 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8006712:	2300      	movs	r3, #0
}
 8006714:	4618      	mov	r0, r3
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr

0800671e <LL_RCC_IsActiveFlag_PPRE2>:
{
 800671e:	b480      	push	{r7}
 8006720:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8006722:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800672c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006730:	d101      	bne.n	8006736 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8006732:	2301      	movs	r3, #1
 8006734:	e000      	b.n	8006738 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8006736:	2300      	movs	r3, #0
}
 8006738:	4618      	mov	r0, r3
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr
	...

08006744 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006744:	b590      	push	{r4, r7, lr}
 8006746:	b08d      	sub	sp, #52	; 0x34
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d101      	bne.n	8006756 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006752:	2301      	movs	r3, #1
 8006754:	e363      	b.n	8006e1e <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f003 0320 	and.w	r3, r3, #32
 800675e:	2b00      	cmp	r3, #0
 8006760:	f000 808d 	beq.w	800687e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006764:	f7ff fe89 	bl	800647a <LL_RCC_GetSysClkSource>
 8006768:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800676a:	f7ff ff82 	bl	8006672 <LL_RCC_PLL_GetMainSource>
 800676e:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006772:	2b00      	cmp	r3, #0
 8006774:	d005      	beq.n	8006782 <HAL_RCC_OscConfig+0x3e>
 8006776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006778:	2b0c      	cmp	r3, #12
 800677a:	d147      	bne.n	800680c <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800677c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800677e:	2b01      	cmp	r3, #1
 8006780:	d144      	bne.n	800680c <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	69db      	ldr	r3, [r3, #28]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d101      	bne.n	800678e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800678a:	2301      	movs	r3, #1
 800678c:	e347      	b.n	8006e1e <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8006792:	f7ff fe34 	bl	80063fe <LL_RCC_MSI_GetRange>
 8006796:	4603      	mov	r3, r0
 8006798:	429c      	cmp	r4, r3
 800679a:	d914      	bls.n	80067c6 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a0:	4618      	mov	r0, r3
 80067a2:	f000 fd2f 	bl	8007204 <RCC_SetFlashLatencyFromMSIRange>
 80067a6:	4603      	mov	r3, r0
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d001      	beq.n	80067b0 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80067ac:	2301      	movs	r3, #1
 80067ae:	e336      	b.n	8006e1e <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b4:	4618      	mov	r0, r3
 80067b6:	f7ff fe0e 	bl	80063d6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6a1b      	ldr	r3, [r3, #32]
 80067be:	4618      	mov	r0, r3
 80067c0:	f7ff fe32 	bl	8006428 <LL_RCC_MSI_SetCalibTrimming>
 80067c4:	e013      	b.n	80067ee <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ca:	4618      	mov	r0, r3
 80067cc:	f7ff fe03 	bl	80063d6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6a1b      	ldr	r3, [r3, #32]
 80067d4:	4618      	mov	r0, r3
 80067d6:	f7ff fe27 	bl	8006428 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067de:	4618      	mov	r0, r3
 80067e0:	f000 fd10 	bl	8007204 <RCC_SetFlashLatencyFromMSIRange>
 80067e4:	4603      	mov	r3, r0
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d001      	beq.n	80067ee <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80067ea:	2301      	movs	r3, #1
 80067ec:	e317      	b.n	8006e1e <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80067ee:	f000 fcc9 	bl	8007184 <HAL_RCC_GetHCLKFreq>
 80067f2:	4603      	mov	r3, r0
 80067f4:	4aa4      	ldr	r2, [pc, #656]	; (8006a88 <HAL_RCC_OscConfig+0x344>)
 80067f6:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80067f8:	4ba4      	ldr	r3, [pc, #656]	; (8006a8c <HAL_RCC_OscConfig+0x348>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4618      	mov	r0, r3
 80067fe:	f7fe fc17 	bl	8005030 <HAL_InitTick>
 8006802:	4603      	mov	r3, r0
 8006804:	2b00      	cmp	r3, #0
 8006806:	d039      	beq.n	800687c <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8006808:	2301      	movs	r3, #1
 800680a:	e308      	b.n	8006e1e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	69db      	ldr	r3, [r3, #28]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d01e      	beq.n	8006852 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006814:	f7ff fdb0 	bl	8006378 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006818:	f7fe fc58 	bl	80050cc <HAL_GetTick>
 800681c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800681e:	e008      	b.n	8006832 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006820:	f7fe fc54 	bl	80050cc <HAL_GetTick>
 8006824:	4602      	mov	r2, r0
 8006826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006828:	1ad3      	subs	r3, r2, r3
 800682a:	2b02      	cmp	r3, #2
 800682c:	d901      	bls.n	8006832 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800682e:	2303      	movs	r3, #3
 8006830:	e2f5      	b.n	8006e1e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8006832:	f7ff fdbf 	bl	80063b4 <LL_RCC_MSI_IsReady>
 8006836:	4603      	mov	r3, r0
 8006838:	2b00      	cmp	r3, #0
 800683a:	d0f1      	beq.n	8006820 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006840:	4618      	mov	r0, r3
 8006842:	f7ff fdc8 	bl	80063d6 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6a1b      	ldr	r3, [r3, #32]
 800684a:	4618      	mov	r0, r3
 800684c:	f7ff fdec 	bl	8006428 <LL_RCC_MSI_SetCalibTrimming>
 8006850:	e015      	b.n	800687e <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006852:	f7ff fda0 	bl	8006396 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006856:	f7fe fc39 	bl	80050cc <HAL_GetTick>
 800685a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800685c:	e008      	b.n	8006870 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800685e:	f7fe fc35 	bl	80050cc <HAL_GetTick>
 8006862:	4602      	mov	r2, r0
 8006864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006866:	1ad3      	subs	r3, r2, r3
 8006868:	2b02      	cmp	r3, #2
 800686a:	d901      	bls.n	8006870 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800686c:	2303      	movs	r3, #3
 800686e:	e2d6      	b.n	8006e1e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8006870:	f7ff fda0 	bl	80063b4 <LL_RCC_MSI_IsReady>
 8006874:	4603      	mov	r3, r0
 8006876:	2b00      	cmp	r3, #0
 8006878:	d1f1      	bne.n	800685e <HAL_RCC_OscConfig+0x11a>
 800687a:	e000      	b.n	800687e <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800687c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f003 0301 	and.w	r3, r3, #1
 8006886:	2b00      	cmp	r3, #0
 8006888:	d047      	beq.n	800691a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800688a:	f7ff fdf6 	bl	800647a <LL_RCC_GetSysClkSource>
 800688e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006890:	f7ff feef 	bl	8006672 <LL_RCC_PLL_GetMainSource>
 8006894:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8006896:	6a3b      	ldr	r3, [r7, #32]
 8006898:	2b08      	cmp	r3, #8
 800689a:	d005      	beq.n	80068a8 <HAL_RCC_OscConfig+0x164>
 800689c:	6a3b      	ldr	r3, [r7, #32]
 800689e:	2b0c      	cmp	r3, #12
 80068a0:	d108      	bne.n	80068b4 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80068a2:	69fb      	ldr	r3, [r7, #28]
 80068a4:	2b03      	cmp	r3, #3
 80068a6:	d105      	bne.n	80068b4 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d134      	bne.n	800691a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80068b0:	2301      	movs	r3, #1
 80068b2:	e2b4      	b.n	8006e1e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068bc:	d102      	bne.n	80068c4 <HAL_RCC_OscConfig+0x180>
 80068be:	f7ff fbdd 	bl	800607c <LL_RCC_HSE_Enable>
 80068c2:	e001      	b.n	80068c8 <HAL_RCC_OscConfig+0x184>
 80068c4:	f7ff fbe9 	bl	800609a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d012      	beq.n	80068f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068d0:	f7fe fbfc 	bl	80050cc <HAL_GetTick>
 80068d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80068d6:	e008      	b.n	80068ea <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80068d8:	f7fe fbf8 	bl	80050cc <HAL_GetTick>
 80068dc:	4602      	mov	r2, r0
 80068de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e0:	1ad3      	subs	r3, r2, r3
 80068e2:	2b64      	cmp	r3, #100	; 0x64
 80068e4:	d901      	bls.n	80068ea <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80068e6:	2303      	movs	r3, #3
 80068e8:	e299      	b.n	8006e1e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80068ea:	f7ff fbe5 	bl	80060b8 <LL_RCC_HSE_IsReady>
 80068ee:	4603      	mov	r3, r0
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d0f1      	beq.n	80068d8 <HAL_RCC_OscConfig+0x194>
 80068f4:	e011      	b.n	800691a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068f6:	f7fe fbe9 	bl	80050cc <HAL_GetTick>
 80068fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80068fc:	e008      	b.n	8006910 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80068fe:	f7fe fbe5 	bl	80050cc <HAL_GetTick>
 8006902:	4602      	mov	r2, r0
 8006904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006906:	1ad3      	subs	r3, r2, r3
 8006908:	2b64      	cmp	r3, #100	; 0x64
 800690a:	d901      	bls.n	8006910 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800690c:	2303      	movs	r3, #3
 800690e:	e286      	b.n	8006e1e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8006910:	f7ff fbd2 	bl	80060b8 <LL_RCC_HSE_IsReady>
 8006914:	4603      	mov	r3, r0
 8006916:	2b00      	cmp	r3, #0
 8006918:	d1f1      	bne.n	80068fe <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f003 0302 	and.w	r3, r3, #2
 8006922:	2b00      	cmp	r3, #0
 8006924:	d04c      	beq.n	80069c0 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006926:	f7ff fda8 	bl	800647a <LL_RCC_GetSysClkSource>
 800692a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800692c:	f7ff fea1 	bl	8006672 <LL_RCC_PLL_GetMainSource>
 8006930:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8006932:	69bb      	ldr	r3, [r7, #24]
 8006934:	2b04      	cmp	r3, #4
 8006936:	d005      	beq.n	8006944 <HAL_RCC_OscConfig+0x200>
 8006938:	69bb      	ldr	r3, [r7, #24]
 800693a:	2b0c      	cmp	r3, #12
 800693c:	d10e      	bne.n	800695c <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	2b02      	cmp	r3, #2
 8006942:	d10b      	bne.n	800695c <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	68db      	ldr	r3, [r3, #12]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d101      	bne.n	8006950 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800694c:	2301      	movs	r3, #1
 800694e:	e266      	b.n	8006e1e <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	691b      	ldr	r3, [r3, #16]
 8006954:	4618      	mov	r0, r3
 8006956:	f7ff fbf1 	bl	800613c <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800695a:	e031      	b.n	80069c0 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	68db      	ldr	r3, [r3, #12]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d019      	beq.n	8006998 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006964:	f7ff fbba 	bl	80060dc <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006968:	f7fe fbb0 	bl	80050cc <HAL_GetTick>
 800696c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800696e:	e008      	b.n	8006982 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006970:	f7fe fbac 	bl	80050cc <HAL_GetTick>
 8006974:	4602      	mov	r2, r0
 8006976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006978:	1ad3      	subs	r3, r2, r3
 800697a:	2b02      	cmp	r3, #2
 800697c:	d901      	bls.n	8006982 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800697e:	2303      	movs	r3, #3
 8006980:	e24d      	b.n	8006e1e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8006982:	f7ff fbc9 	bl	8006118 <LL_RCC_HSI_IsReady>
 8006986:	4603      	mov	r3, r0
 8006988:	2b00      	cmp	r3, #0
 800698a:	d0f1      	beq.n	8006970 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	691b      	ldr	r3, [r3, #16]
 8006990:	4618      	mov	r0, r3
 8006992:	f7ff fbd3 	bl	800613c <LL_RCC_HSI_SetCalibTrimming>
 8006996:	e013      	b.n	80069c0 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006998:	f7ff fbaf 	bl	80060fa <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800699c:	f7fe fb96 	bl	80050cc <HAL_GetTick>
 80069a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80069a2:	e008      	b.n	80069b6 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80069a4:	f7fe fb92 	bl	80050cc <HAL_GetTick>
 80069a8:	4602      	mov	r2, r0
 80069aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ac:	1ad3      	subs	r3, r2, r3
 80069ae:	2b02      	cmp	r3, #2
 80069b0:	d901      	bls.n	80069b6 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80069b2:	2303      	movs	r3, #3
 80069b4:	e233      	b.n	8006e1e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80069b6:	f7ff fbaf 	bl	8006118 <LL_RCC_HSI_IsReady>
 80069ba:	4603      	mov	r3, r0
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d1f1      	bne.n	80069a4 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f003 0308 	and.w	r3, r3, #8
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d106      	bne.n	80069da <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	f000 80a3 	beq.w	8006b20 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	695b      	ldr	r3, [r3, #20]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d076      	beq.n	8006ad0 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f003 0310 	and.w	r3, r3, #16
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d046      	beq.n	8006a7c <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80069ee:	f7ff fc66 	bl	80062be <LL_RCC_LSI1_IsReady>
 80069f2:	4603      	mov	r3, r0
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d113      	bne.n	8006a20 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80069f8:	f7ff fc3f 	bl	800627a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80069fc:	f7fe fb66 	bl	80050cc <HAL_GetTick>
 8006a00:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8006a02:	e008      	b.n	8006a16 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006a04:	f7fe fb62 	bl	80050cc <HAL_GetTick>
 8006a08:	4602      	mov	r2, r0
 8006a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0c:	1ad3      	subs	r3, r2, r3
 8006a0e:	2b02      	cmp	r3, #2
 8006a10:	d901      	bls.n	8006a16 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8006a12:	2303      	movs	r3, #3
 8006a14:	e203      	b.n	8006e1e <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8006a16:	f7ff fc52 	bl	80062be <LL_RCC_LSI1_IsReady>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d0f1      	beq.n	8006a04 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8006a20:	f7ff fc5f 	bl	80062e2 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a24:	f7fe fb52 	bl	80050cc <HAL_GetTick>
 8006a28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8006a2a:	e008      	b.n	8006a3e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006a2c:	f7fe fb4e 	bl	80050cc <HAL_GetTick>
 8006a30:	4602      	mov	r2, r0
 8006a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a34:	1ad3      	subs	r3, r2, r3
 8006a36:	2b03      	cmp	r3, #3
 8006a38:	d901      	bls.n	8006a3e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8006a3a:	2303      	movs	r3, #3
 8006a3c:	e1ef      	b.n	8006e1e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8006a3e:	f7ff fc72 	bl	8006326 <LL_RCC_LSI2_IsReady>
 8006a42:	4603      	mov	r3, r0
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d0f1      	beq.n	8006a2c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	699b      	ldr	r3, [r3, #24]
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f7ff fc7c 	bl	800634a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8006a52:	f7ff fc23 	bl	800629c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a56:	f7fe fb39 	bl	80050cc <HAL_GetTick>
 8006a5a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8006a5c:	e008      	b.n	8006a70 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006a5e:	f7fe fb35 	bl	80050cc <HAL_GetTick>
 8006a62:	4602      	mov	r2, r0
 8006a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a66:	1ad3      	subs	r3, r2, r3
 8006a68:	2b02      	cmp	r3, #2
 8006a6a:	d901      	bls.n	8006a70 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8006a6c:	2303      	movs	r3, #3
 8006a6e:	e1d6      	b.n	8006e1e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8006a70:	f7ff fc25 	bl	80062be <LL_RCC_LSI1_IsReady>
 8006a74:	4603      	mov	r3, r0
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d1f1      	bne.n	8006a5e <HAL_RCC_OscConfig+0x31a>
 8006a7a:	e051      	b.n	8006b20 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8006a7c:	f7ff fbfd 	bl	800627a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a80:	f7fe fb24 	bl	80050cc <HAL_GetTick>
 8006a84:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8006a86:	e00c      	b.n	8006aa2 <HAL_RCC_OscConfig+0x35e>
 8006a88:	20000030 	.word	0x20000030
 8006a8c:	20000034 	.word	0x20000034
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006a90:	f7fe fb1c 	bl	80050cc <HAL_GetTick>
 8006a94:	4602      	mov	r2, r0
 8006a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a98:	1ad3      	subs	r3, r2, r3
 8006a9a:	2b02      	cmp	r3, #2
 8006a9c:	d901      	bls.n	8006aa2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8006a9e:	2303      	movs	r3, #3
 8006aa0:	e1bd      	b.n	8006e1e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8006aa2:	f7ff fc0c 	bl	80062be <LL_RCC_LSI1_IsReady>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d0f1      	beq.n	8006a90 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8006aac:	f7ff fc2a 	bl	8006304 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8006ab0:	e008      	b.n	8006ac4 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006ab2:	f7fe fb0b 	bl	80050cc <HAL_GetTick>
 8006ab6:	4602      	mov	r2, r0
 8006ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aba:	1ad3      	subs	r3, r2, r3
 8006abc:	2b03      	cmp	r3, #3
 8006abe:	d901      	bls.n	8006ac4 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8006ac0:	2303      	movs	r3, #3
 8006ac2:	e1ac      	b.n	8006e1e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8006ac4:	f7ff fc2f 	bl	8006326 <LL_RCC_LSI2_IsReady>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d1f1      	bne.n	8006ab2 <HAL_RCC_OscConfig+0x36e>
 8006ace:	e027      	b.n	8006b20 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8006ad0:	f7ff fc18 	bl	8006304 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ad4:	f7fe fafa 	bl	80050cc <HAL_GetTick>
 8006ad8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8006ada:	e008      	b.n	8006aee <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006adc:	f7fe faf6 	bl	80050cc <HAL_GetTick>
 8006ae0:	4602      	mov	r2, r0
 8006ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae4:	1ad3      	subs	r3, r2, r3
 8006ae6:	2b03      	cmp	r3, #3
 8006ae8:	d901      	bls.n	8006aee <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006aea:	2303      	movs	r3, #3
 8006aec:	e197      	b.n	8006e1e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8006aee:	f7ff fc1a 	bl	8006326 <LL_RCC_LSI2_IsReady>
 8006af2:	4603      	mov	r3, r0
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d1f1      	bne.n	8006adc <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8006af8:	f7ff fbd0 	bl	800629c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006afc:	f7fe fae6 	bl	80050cc <HAL_GetTick>
 8006b00:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8006b02:	e008      	b.n	8006b16 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006b04:	f7fe fae2 	bl	80050cc <HAL_GetTick>
 8006b08:	4602      	mov	r2, r0
 8006b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0c:	1ad3      	subs	r3, r2, r3
 8006b0e:	2b02      	cmp	r3, #2
 8006b10:	d901      	bls.n	8006b16 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8006b12:	2303      	movs	r3, #3
 8006b14:	e183      	b.n	8006e1e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8006b16:	f7ff fbd2 	bl	80062be <LL_RCC_LSI1_IsReady>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d1f1      	bne.n	8006b04 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f003 0304 	and.w	r3, r3, #4
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d05b      	beq.n	8006be4 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b2c:	4ba7      	ldr	r3, [pc, #668]	; (8006dcc <HAL_RCC_OscConfig+0x688>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d114      	bne.n	8006b62 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006b38:	f7ff fa70 	bl	800601c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b3c:	f7fe fac6 	bl	80050cc <HAL_GetTick>
 8006b40:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b42:	e008      	b.n	8006b56 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b44:	f7fe fac2 	bl	80050cc <HAL_GetTick>
 8006b48:	4602      	mov	r2, r0
 8006b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4c:	1ad3      	subs	r3, r2, r3
 8006b4e:	2b02      	cmp	r3, #2
 8006b50:	d901      	bls.n	8006b56 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8006b52:	2303      	movs	r3, #3
 8006b54:	e163      	b.n	8006e1e <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b56:	4b9d      	ldr	r3, [pc, #628]	; (8006dcc <HAL_RCC_OscConfig+0x688>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d0f0      	beq.n	8006b44 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	689b      	ldr	r3, [r3, #8]
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	d102      	bne.n	8006b70 <HAL_RCC_OscConfig+0x42c>
 8006b6a:	f7ff fb30 	bl	80061ce <LL_RCC_LSE_Enable>
 8006b6e:	e00c      	b.n	8006b8a <HAL_RCC_OscConfig+0x446>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	2b05      	cmp	r3, #5
 8006b76:	d104      	bne.n	8006b82 <HAL_RCC_OscConfig+0x43e>
 8006b78:	f7ff fb4b 	bl	8006212 <LL_RCC_LSE_EnableBypass>
 8006b7c:	f7ff fb27 	bl	80061ce <LL_RCC_LSE_Enable>
 8006b80:	e003      	b.n	8006b8a <HAL_RCC_OscConfig+0x446>
 8006b82:	f7ff fb35 	bl	80061f0 <LL_RCC_LSE_Disable>
 8006b86:	f7ff fb55 	bl	8006234 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d014      	beq.n	8006bbc <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b92:	f7fe fa9b 	bl	80050cc <HAL_GetTick>
 8006b96:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8006b98:	e00a      	b.n	8006bb0 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b9a:	f7fe fa97 	bl	80050cc <HAL_GetTick>
 8006b9e:	4602      	mov	r2, r0
 8006ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba2:	1ad3      	subs	r3, r2, r3
 8006ba4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d901      	bls.n	8006bb0 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8006bac:	2303      	movs	r3, #3
 8006bae:	e136      	b.n	8006e1e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8006bb0:	f7ff fb51 	bl	8006256 <LL_RCC_LSE_IsReady>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d0ef      	beq.n	8006b9a <HAL_RCC_OscConfig+0x456>
 8006bba:	e013      	b.n	8006be4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bbc:	f7fe fa86 	bl	80050cc <HAL_GetTick>
 8006bc0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8006bc2:	e00a      	b.n	8006bda <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006bc4:	f7fe fa82 	bl	80050cc <HAL_GetTick>
 8006bc8:	4602      	mov	r2, r0
 8006bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bcc:	1ad3      	subs	r3, r2, r3
 8006bce:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d901      	bls.n	8006bda <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8006bd6:	2303      	movs	r3, #3
 8006bd8:	e121      	b.n	8006e1e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8006bda:	f7ff fb3c 	bl	8006256 <LL_RCC_LSE_IsReady>
 8006bde:	4603      	mov	r3, r0
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d1ef      	bne.n	8006bc4 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d02c      	beq.n	8006c4a <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d014      	beq.n	8006c22 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006bf8:	f7ff fab5 	bl	8006166 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bfc:	f7fe fa66 	bl	80050cc <HAL_GetTick>
 8006c00:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8006c02:	e008      	b.n	8006c16 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006c04:	f7fe fa62 	bl	80050cc <HAL_GetTick>
 8006c08:	4602      	mov	r2, r0
 8006c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c0c:	1ad3      	subs	r3, r2, r3
 8006c0e:	2b02      	cmp	r3, #2
 8006c10:	d901      	bls.n	8006c16 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8006c12:	2303      	movs	r3, #3
 8006c14:	e103      	b.n	8006e1e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8006c16:	f7ff fac8 	bl	80061aa <LL_RCC_HSI48_IsReady>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d0f1      	beq.n	8006c04 <HAL_RCC_OscConfig+0x4c0>
 8006c20:	e013      	b.n	8006c4a <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006c22:	f7ff fab1 	bl	8006188 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c26:	f7fe fa51 	bl	80050cc <HAL_GetTick>
 8006c2a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8006c2c:	e008      	b.n	8006c40 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006c2e:	f7fe fa4d 	bl	80050cc <HAL_GetTick>
 8006c32:	4602      	mov	r2, r0
 8006c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c36:	1ad3      	subs	r3, r2, r3
 8006c38:	2b02      	cmp	r3, #2
 8006c3a:	d901      	bls.n	8006c40 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8006c3c:	2303      	movs	r3, #3
 8006c3e:	e0ee      	b.n	8006e1e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8006c40:	f7ff fab3 	bl	80061aa <LL_RCC_HSI48_IsReady>
 8006c44:	4603      	mov	r3, r0
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d1f1      	bne.n	8006c2e <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	f000 80e4 	beq.w	8006e1c <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c54:	f7ff fc11 	bl	800647a <LL_RCC_GetSysClkSource>
 8006c58:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8006c5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c5e:	68db      	ldr	r3, [r3, #12]
 8006c60:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c66:	2b02      	cmp	r3, #2
 8006c68:	f040 80b4 	bne.w	8006dd4 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f003 0203 	and.w	r2, r3, #3
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c76:	429a      	cmp	r2, r3
 8006c78:	d123      	bne.n	8006cc2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d11c      	bne.n	8006cc2 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	0a1b      	lsrs	r3, r3, #8
 8006c8c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006c94:	429a      	cmp	r2, r3
 8006c96:	d114      	bne.n	8006cc2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	d10d      	bne.n	8006cc2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d106      	bne.n	8006cc2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d05d      	beq.n	8006d7e <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	2b0c      	cmp	r3, #12
 8006cc6:	d058      	beq.n	8006d7a <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006cc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d001      	beq.n	8006cda <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	e0a1      	b.n	8006e1e <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006cda:	f7ff fc84 	bl	80065e6 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006cde:	f7fe f9f5 	bl	80050cc <HAL_GetTick>
 8006ce2:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ce4:	e008      	b.n	8006cf8 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ce6:	f7fe f9f1 	bl	80050cc <HAL_GetTick>
 8006cea:	4602      	mov	r2, r0
 8006cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cee:	1ad3      	subs	r3, r2, r3
 8006cf0:	2b02      	cmp	r3, #2
 8006cf2:	d901      	bls.n	8006cf8 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8006cf4:	2303      	movs	r3, #3
 8006cf6:	e092      	b.n	8006e1e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006cf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d1ef      	bne.n	8006ce6 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006d06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d0a:	68da      	ldr	r2, [r3, #12]
 8006d0c:	4b30      	ldr	r3, [pc, #192]	; (8006dd0 <HAL_RCC_OscConfig+0x68c>)
 8006d0e:	4013      	ands	r3, r2
 8006d10:	687a      	ldr	r2, [r7, #4]
 8006d12:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8006d14:	687a      	ldr	r2, [r7, #4]
 8006d16:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006d18:	4311      	orrs	r1, r2
 8006d1a:	687a      	ldr	r2, [r7, #4]
 8006d1c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006d1e:	0212      	lsls	r2, r2, #8
 8006d20:	4311      	orrs	r1, r2
 8006d22:	687a      	ldr	r2, [r7, #4]
 8006d24:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006d26:	4311      	orrs	r1, r2
 8006d28:	687a      	ldr	r2, [r7, #4]
 8006d2a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006d2c:	4311      	orrs	r1, r2
 8006d2e:	687a      	ldr	r2, [r7, #4]
 8006d30:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006d32:	430a      	orrs	r2, r1
 8006d34:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006d3c:	f7ff fc44 	bl	80065c8 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006d40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d44:	68db      	ldr	r3, [r3, #12]
 8006d46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d4e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006d50:	f7fe f9bc 	bl	80050cc <HAL_GetTick>
 8006d54:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d56:	e008      	b.n	8006d6a <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d58:	f7fe f9b8 	bl	80050cc <HAL_GetTick>
 8006d5c:	4602      	mov	r2, r0
 8006d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d60:	1ad3      	subs	r3, r2, r3
 8006d62:	2b02      	cmp	r3, #2
 8006d64:	d901      	bls.n	8006d6a <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8006d66:	2303      	movs	r3, #3
 8006d68:	e059      	b.n	8006e1e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d0ef      	beq.n	8006d58 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006d78:	e050      	b.n	8006e1c <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	e04f      	b.n	8006e1e <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d147      	bne.n	8006e1c <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006d8c:	f7ff fc1c 	bl	80065c8 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006d90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d94:	68db      	ldr	r3, [r3, #12]
 8006d96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d9e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006da0:	f7fe f994 	bl	80050cc <HAL_GetTick>
 8006da4:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006da6:	e008      	b.n	8006dba <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006da8:	f7fe f990 	bl	80050cc <HAL_GetTick>
 8006dac:	4602      	mov	r2, r0
 8006dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db0:	1ad3      	subs	r3, r2, r3
 8006db2:	2b02      	cmp	r3, #2
 8006db4:	d901      	bls.n	8006dba <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8006db6:	2303      	movs	r3, #3
 8006db8:	e031      	b.n	8006e1e <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006dba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d0ef      	beq.n	8006da8 <HAL_RCC_OscConfig+0x664>
 8006dc8:	e028      	b.n	8006e1c <HAL_RCC_OscConfig+0x6d8>
 8006dca:	bf00      	nop
 8006dcc:	58000400 	.word	0x58000400
 8006dd0:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	2b0c      	cmp	r3, #12
 8006dd8:	d01e      	beq.n	8006e18 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006dda:	f7ff fc04 	bl	80065e6 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dde:	f7fe f975 	bl	80050cc <HAL_GetTick>
 8006de2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006de4:	e008      	b.n	8006df8 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006de6:	f7fe f971 	bl	80050cc <HAL_GetTick>
 8006dea:	4602      	mov	r2, r0
 8006dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dee:	1ad3      	subs	r3, r2, r3
 8006df0:	2b02      	cmp	r3, #2
 8006df2:	d901      	bls.n	8006df8 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8006df4:	2303      	movs	r3, #3
 8006df6:	e012      	b.n	8006e1e <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006df8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d1ef      	bne.n	8006de6 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8006e06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e0a:	68da      	ldr	r2, [r3, #12]
 8006e0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006e10:	4b05      	ldr	r3, [pc, #20]	; (8006e28 <HAL_RCC_OscConfig+0x6e4>)
 8006e12:	4013      	ands	r3, r2
 8006e14:	60cb      	str	r3, [r1, #12]
 8006e16:	e001      	b.n	8006e1c <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	e000      	b.n	8006e1e <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8006e1c:	2300      	movs	r3, #0
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3734      	adds	r7, #52	; 0x34
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd90      	pop	{r4, r7, pc}
 8006e26:	bf00      	nop
 8006e28:	eefefffc 	.word	0xeefefffc

08006e2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b084      	sub	sp, #16
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d101      	bne.n	8006e40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	e12d      	b.n	800709c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006e40:	4b98      	ldr	r3, [pc, #608]	; (80070a4 <HAL_RCC_ClockConfig+0x278>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f003 0307 	and.w	r3, r3, #7
 8006e48:	683a      	ldr	r2, [r7, #0]
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	d91b      	bls.n	8006e86 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e4e:	4b95      	ldr	r3, [pc, #596]	; (80070a4 <HAL_RCC_ClockConfig+0x278>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f023 0207 	bic.w	r2, r3, #7
 8006e56:	4993      	ldr	r1, [pc, #588]	; (80070a4 <HAL_RCC_ClockConfig+0x278>)
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e5e:	f7fe f935 	bl	80050cc <HAL_GetTick>
 8006e62:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e64:	e008      	b.n	8006e78 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006e66:	f7fe f931 	bl	80050cc <HAL_GetTick>
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	1ad3      	subs	r3, r2, r3
 8006e70:	2b02      	cmp	r3, #2
 8006e72:	d901      	bls.n	8006e78 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8006e74:	2303      	movs	r3, #3
 8006e76:	e111      	b.n	800709c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e78:	4b8a      	ldr	r3, [pc, #552]	; (80070a4 <HAL_RCC_ClockConfig+0x278>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f003 0307 	and.w	r3, r3, #7
 8006e80:	683a      	ldr	r2, [r7, #0]
 8006e82:	429a      	cmp	r2, r3
 8006e84:	d1ef      	bne.n	8006e66 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f003 0302 	and.w	r3, r3, #2
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d016      	beq.n	8006ec0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	4618      	mov	r0, r3
 8006e98:	f7ff fafb 	bl	8006492 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006e9c:	f7fe f916 	bl	80050cc <HAL_GetTick>
 8006ea0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006ea2:	e008      	b.n	8006eb6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006ea4:	f7fe f912 	bl	80050cc <HAL_GetTick>
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	1ad3      	subs	r3, r2, r3
 8006eae:	2b02      	cmp	r3, #2
 8006eb0:	d901      	bls.n	8006eb6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8006eb2:	2303      	movs	r3, #3
 8006eb4:	e0f2      	b.n	800709c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006eb6:	f7ff fbe8 	bl	800668a <LL_RCC_IsActiveFlag_HPRE>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d0f1      	beq.n	8006ea4 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f003 0320 	and.w	r3, r3, #32
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d016      	beq.n	8006efa <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	695b      	ldr	r3, [r3, #20]
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f7ff faf2 	bl	80064ba <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006ed6:	f7fe f8f9 	bl	80050cc <HAL_GetTick>
 8006eda:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006edc:	e008      	b.n	8006ef0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006ede:	f7fe f8f5 	bl	80050cc <HAL_GetTick>
 8006ee2:	4602      	mov	r2, r0
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	1ad3      	subs	r3, r2, r3
 8006ee8:	2b02      	cmp	r3, #2
 8006eea:	d901      	bls.n	8006ef0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8006eec:	2303      	movs	r3, #3
 8006eee:	e0d5      	b.n	800709c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006ef0:	f7ff fbdd 	bl	80066ae <LL_RCC_IsActiveFlag_C2HPRE>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d0f1      	beq.n	8006ede <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d016      	beq.n	8006f34 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	699b      	ldr	r3, [r3, #24]
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f7ff faeb 	bl	80064e6 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006f10:	f7fe f8dc 	bl	80050cc <HAL_GetTick>
 8006f14:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006f16:	e008      	b.n	8006f2a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006f18:	f7fe f8d8 	bl	80050cc <HAL_GetTick>
 8006f1c:	4602      	mov	r2, r0
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	1ad3      	subs	r3, r2, r3
 8006f22:	2b02      	cmp	r3, #2
 8006f24:	d901      	bls.n	8006f2a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8006f26:	2303      	movs	r3, #3
 8006f28:	e0b8      	b.n	800709c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006f2a:	f7ff fbd3 	bl	80066d4 <LL_RCC_IsActiveFlag_SHDHPRE>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d0f1      	beq.n	8006f18 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f003 0304 	and.w	r3, r3, #4
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d016      	beq.n	8006f6e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	68db      	ldr	r3, [r3, #12]
 8006f44:	4618      	mov	r0, r3
 8006f46:	f7ff fae5 	bl	8006514 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006f4a:	f7fe f8bf 	bl	80050cc <HAL_GetTick>
 8006f4e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006f50:	e008      	b.n	8006f64 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006f52:	f7fe f8bb 	bl	80050cc <HAL_GetTick>
 8006f56:	4602      	mov	r2, r0
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	1ad3      	subs	r3, r2, r3
 8006f5c:	2b02      	cmp	r3, #2
 8006f5e:	d901      	bls.n	8006f64 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8006f60:	2303      	movs	r3, #3
 8006f62:	e09b      	b.n	800709c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006f64:	f7ff fbc9 	bl	80066fa <LL_RCC_IsActiveFlag_PPRE1>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d0f1      	beq.n	8006f52 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f003 0308 	and.w	r3, r3, #8
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d017      	beq.n	8006faa <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	691b      	ldr	r3, [r3, #16]
 8006f7e:	00db      	lsls	r3, r3, #3
 8006f80:	4618      	mov	r0, r3
 8006f82:	f7ff fadb 	bl	800653c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006f86:	f7fe f8a1 	bl	80050cc <HAL_GetTick>
 8006f8a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006f8c:	e008      	b.n	8006fa0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006f8e:	f7fe f89d 	bl	80050cc <HAL_GetTick>
 8006f92:	4602      	mov	r2, r0
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	1ad3      	subs	r3, r2, r3
 8006f98:	2b02      	cmp	r3, #2
 8006f9a:	d901      	bls.n	8006fa0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8006f9c:	2303      	movs	r3, #3
 8006f9e:	e07d      	b.n	800709c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006fa0:	f7ff fbbd 	bl	800671e <LL_RCC_IsActiveFlag_PPRE2>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d0f1      	beq.n	8006f8e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f003 0301 	and.w	r3, r3, #1
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d043      	beq.n	800703e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	2b02      	cmp	r3, #2
 8006fbc:	d106      	bne.n	8006fcc <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8006fbe:	f7ff f87b 	bl	80060b8 <LL_RCC_HSE_IsReady>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d11e      	bne.n	8007006 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	e067      	b.n	800709c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	2b03      	cmp	r3, #3
 8006fd2:	d106      	bne.n	8006fe2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8006fd4:	f7ff fb16 	bl	8006604 <LL_RCC_PLL_IsReady>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d113      	bne.n	8007006 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	e05c      	b.n	800709c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d106      	bne.n	8006ff8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8006fea:	f7ff f9e3 	bl	80063b4 <LL_RCC_MSI_IsReady>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d108      	bne.n	8007006 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	e051      	b.n	800709c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8006ff8:	f7ff f88e 	bl	8006118 <LL_RCC_HSI_IsReady>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d101      	bne.n	8007006 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007002:	2301      	movs	r3, #1
 8007004:	e04a      	b.n	800709c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	4618      	mov	r0, r3
 800700c:	f7ff fa21 	bl	8006452 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007010:	f7fe f85c 	bl	80050cc <HAL_GetTick>
 8007014:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007016:	e00a      	b.n	800702e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007018:	f7fe f858 	bl	80050cc <HAL_GetTick>
 800701c:	4602      	mov	r2, r0
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	1ad3      	subs	r3, r2, r3
 8007022:	f241 3288 	movw	r2, #5000	; 0x1388
 8007026:	4293      	cmp	r3, r2
 8007028:	d901      	bls.n	800702e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800702a:	2303      	movs	r3, #3
 800702c:	e036      	b.n	800709c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800702e:	f7ff fa24 	bl	800647a <LL_RCC_GetSysClkSource>
 8007032:	4602      	mov	r2, r0
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	009b      	lsls	r3, r3, #2
 800703a:	429a      	cmp	r2, r3
 800703c:	d1ec      	bne.n	8007018 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800703e:	4b19      	ldr	r3, [pc, #100]	; (80070a4 <HAL_RCC_ClockConfig+0x278>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f003 0307 	and.w	r3, r3, #7
 8007046:	683a      	ldr	r2, [r7, #0]
 8007048:	429a      	cmp	r2, r3
 800704a:	d21b      	bcs.n	8007084 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800704c:	4b15      	ldr	r3, [pc, #84]	; (80070a4 <HAL_RCC_ClockConfig+0x278>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f023 0207 	bic.w	r2, r3, #7
 8007054:	4913      	ldr	r1, [pc, #76]	; (80070a4 <HAL_RCC_ClockConfig+0x278>)
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	4313      	orrs	r3, r2
 800705a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800705c:	f7fe f836 	bl	80050cc <HAL_GetTick>
 8007060:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007062:	e008      	b.n	8007076 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007064:	f7fe f832 	bl	80050cc <HAL_GetTick>
 8007068:	4602      	mov	r2, r0
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	1ad3      	subs	r3, r2, r3
 800706e:	2b02      	cmp	r3, #2
 8007070:	d901      	bls.n	8007076 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8007072:	2303      	movs	r3, #3
 8007074:	e012      	b.n	800709c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007076:	4b0b      	ldr	r3, [pc, #44]	; (80070a4 <HAL_RCC_ClockConfig+0x278>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f003 0307 	and.w	r3, r3, #7
 800707e:	683a      	ldr	r2, [r7, #0]
 8007080:	429a      	cmp	r2, r3
 8007082:	d1ef      	bne.n	8007064 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8007084:	f000 f87e 	bl	8007184 <HAL_RCC_GetHCLKFreq>
 8007088:	4603      	mov	r3, r0
 800708a:	4a07      	ldr	r2, [pc, #28]	; (80070a8 <HAL_RCC_ClockConfig+0x27c>)
 800708c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800708e:	f7fe f829 	bl	80050e4 <HAL_GetTickPrio>
 8007092:	4603      	mov	r3, r0
 8007094:	4618      	mov	r0, r3
 8007096:	f7fd ffcb 	bl	8005030 <HAL_InitTick>
 800709a:	4603      	mov	r3, r0
}
 800709c:	4618      	mov	r0, r3
 800709e:	3710      	adds	r7, #16
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}
 80070a4:	58004000 	.word	0x58004000
 80070a8:	20000030 	.word	0x20000030

080070ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80070ac:	b590      	push	{r4, r7, lr}
 80070ae:	b085      	sub	sp, #20
 80070b0:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80070b2:	f7ff f9e2 	bl	800647a <LL_RCC_GetSysClkSource>
 80070b6:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d10a      	bne.n	80070d4 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80070be:	f7ff f99e 	bl	80063fe <LL_RCC_MSI_GetRange>
 80070c2:	4603      	mov	r3, r0
 80070c4:	091b      	lsrs	r3, r3, #4
 80070c6:	f003 030f 	and.w	r3, r3, #15
 80070ca:	4a2b      	ldr	r2, [pc, #172]	; (8007178 <HAL_RCC_GetSysClockFreq+0xcc>)
 80070cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070d0:	60fb      	str	r3, [r7, #12]
 80070d2:	e04b      	b.n	800716c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2b04      	cmp	r3, #4
 80070d8:	d102      	bne.n	80070e0 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80070da:	4b28      	ldr	r3, [pc, #160]	; (800717c <HAL_RCC_GetSysClockFreq+0xd0>)
 80070dc:	60fb      	str	r3, [r7, #12]
 80070de:	e045      	b.n	800716c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2b08      	cmp	r3, #8
 80070e4:	d10a      	bne.n	80070fc <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80070e6:	f7fe ffb7 	bl	8006058 <LL_RCC_HSE_IsEnabledDiv2>
 80070ea:	4603      	mov	r3, r0
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d102      	bne.n	80070f6 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80070f0:	4b22      	ldr	r3, [pc, #136]	; (800717c <HAL_RCC_GetSysClockFreq+0xd0>)
 80070f2:	60fb      	str	r3, [r7, #12]
 80070f4:	e03a      	b.n	800716c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80070f6:	4b22      	ldr	r3, [pc, #136]	; (8007180 <HAL_RCC_GetSysClockFreq+0xd4>)
 80070f8:	60fb      	str	r3, [r7, #12]
 80070fa:	e037      	b.n	800716c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80070fc:	f7ff fab9 	bl	8006672 <LL_RCC_PLL_GetMainSource>
 8007100:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	2b02      	cmp	r3, #2
 8007106:	d003      	beq.n	8007110 <HAL_RCC_GetSysClockFreq+0x64>
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	2b03      	cmp	r3, #3
 800710c:	d003      	beq.n	8007116 <HAL_RCC_GetSysClockFreq+0x6a>
 800710e:	e00d      	b.n	800712c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8007110:	4b1a      	ldr	r3, [pc, #104]	; (800717c <HAL_RCC_GetSysClockFreq+0xd0>)
 8007112:	60bb      	str	r3, [r7, #8]
        break;
 8007114:	e015      	b.n	8007142 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8007116:	f7fe ff9f 	bl	8006058 <LL_RCC_HSE_IsEnabledDiv2>
 800711a:	4603      	mov	r3, r0
 800711c:	2b01      	cmp	r3, #1
 800711e:	d102      	bne.n	8007126 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8007120:	4b16      	ldr	r3, [pc, #88]	; (800717c <HAL_RCC_GetSysClockFreq+0xd0>)
 8007122:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8007124:	e00d      	b.n	8007142 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8007126:	4b16      	ldr	r3, [pc, #88]	; (8007180 <HAL_RCC_GetSysClockFreq+0xd4>)
 8007128:	60bb      	str	r3, [r7, #8]
        break;
 800712a:	e00a      	b.n	8007142 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800712c:	f7ff f967 	bl	80063fe <LL_RCC_MSI_GetRange>
 8007130:	4603      	mov	r3, r0
 8007132:	091b      	lsrs	r3, r3, #4
 8007134:	f003 030f 	and.w	r3, r3, #15
 8007138:	4a0f      	ldr	r2, [pc, #60]	; (8007178 <HAL_RCC_GetSysClockFreq+0xcc>)
 800713a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800713e:	60bb      	str	r3, [r7, #8]
        break;
 8007140:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8007142:	f7ff fa71 	bl	8006628 <LL_RCC_PLL_GetN>
 8007146:	4602      	mov	r2, r0
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	fb03 f402 	mul.w	r4, r3, r2
 800714e:	f7ff fa84 	bl	800665a <LL_RCC_PLL_GetDivider>
 8007152:	4603      	mov	r3, r0
 8007154:	091b      	lsrs	r3, r3, #4
 8007156:	3301      	adds	r3, #1
 8007158:	fbb4 f4f3 	udiv	r4, r4, r3
 800715c:	f7ff fa71 	bl	8006642 <LL_RCC_PLL_GetR>
 8007160:	4603      	mov	r3, r0
 8007162:	0f5b      	lsrs	r3, r3, #29
 8007164:	3301      	adds	r3, #1
 8007166:	fbb4 f3f3 	udiv	r3, r4, r3
 800716a:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800716c:	68fb      	ldr	r3, [r7, #12]
}
 800716e:	4618      	mov	r0, r3
 8007170:	3714      	adds	r7, #20
 8007172:	46bd      	mov	sp, r7
 8007174:	bd90      	pop	{r4, r7, pc}
 8007176:	bf00      	nop
 8007178:	080120a4 	.word	0x080120a4
 800717c:	00f42400 	.word	0x00f42400
 8007180:	01e84800 	.word	0x01e84800

08007184 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007184:	b598      	push	{r3, r4, r7, lr}
 8007186:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8007188:	f7ff ff90 	bl	80070ac <HAL_RCC_GetSysClockFreq>
 800718c:	4604      	mov	r4, r0
 800718e:	f7ff f9e9 	bl	8006564 <LL_RCC_GetAHBPrescaler>
 8007192:	4603      	mov	r3, r0
 8007194:	091b      	lsrs	r3, r3, #4
 8007196:	f003 030f 	and.w	r3, r3, #15
 800719a:	4a03      	ldr	r2, [pc, #12]	; (80071a8 <HAL_RCC_GetHCLKFreq+0x24>)
 800719c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071a0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	bd98      	pop	{r3, r4, r7, pc}
 80071a8:	08012044 	.word	0x08012044

080071ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80071ac:	b598      	push	{r3, r4, r7, lr}
 80071ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80071b0:	f7ff ffe8 	bl	8007184 <HAL_RCC_GetHCLKFreq>
 80071b4:	4604      	mov	r4, r0
 80071b6:	f7ff f9ef 	bl	8006598 <LL_RCC_GetAPB1Prescaler>
 80071ba:	4603      	mov	r3, r0
 80071bc:	0a1b      	lsrs	r3, r3, #8
 80071be:	f003 0307 	and.w	r3, r3, #7
 80071c2:	4a04      	ldr	r2, [pc, #16]	; (80071d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80071c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071c8:	f003 031f 	and.w	r3, r3, #31
 80071cc:	fa24 f303 	lsr.w	r3, r4, r3
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	bd98      	pop	{r3, r4, r7, pc}
 80071d4:	08012084 	.word	0x08012084

080071d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80071d8:	b598      	push	{r3, r4, r7, lr}
 80071da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80071dc:	f7ff ffd2 	bl	8007184 <HAL_RCC_GetHCLKFreq>
 80071e0:	4604      	mov	r4, r0
 80071e2:	f7ff f9e5 	bl	80065b0 <LL_RCC_GetAPB2Prescaler>
 80071e6:	4603      	mov	r3, r0
 80071e8:	0adb      	lsrs	r3, r3, #11
 80071ea:	f003 0307 	and.w	r3, r3, #7
 80071ee:	4a04      	ldr	r2, [pc, #16]	; (8007200 <HAL_RCC_GetPCLK2Freq+0x28>)
 80071f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071f4:	f003 031f 	and.w	r3, r3, #31
 80071f8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	bd98      	pop	{r3, r4, r7, pc}
 8007200:	08012084 	.word	0x08012084

08007204 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8007204:	b590      	push	{r4, r7, lr}
 8007206:	b085      	sub	sp, #20
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2bb0      	cmp	r3, #176	; 0xb0
 8007210:	d903      	bls.n	800721a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8007212:	4b15      	ldr	r3, [pc, #84]	; (8007268 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8007214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007216:	60fb      	str	r3, [r7, #12]
 8007218:	e007      	b.n	800722a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	091b      	lsrs	r3, r3, #4
 800721e:	f003 030f 	and.w	r3, r3, #15
 8007222:	4a11      	ldr	r2, [pc, #68]	; (8007268 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8007224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007228:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800722a:	f7ff f9a7 	bl	800657c <LL_RCC_GetAHB4Prescaler>
 800722e:	4603      	mov	r3, r0
 8007230:	091b      	lsrs	r3, r3, #4
 8007232:	f003 030f 	and.w	r3, r3, #15
 8007236:	4a0d      	ldr	r2, [pc, #52]	; (800726c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8007238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800723c:	68fa      	ldr	r2, [r7, #12]
 800723e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007242:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	4a0a      	ldr	r2, [pc, #40]	; (8007270 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8007248:	fba2 2303 	umull	r2, r3, r2, r3
 800724c:	0c9c      	lsrs	r4, r3, #18
 800724e:	f7fe fef5 	bl	800603c <HAL_PWREx_GetVoltageRange>
 8007252:	4603      	mov	r3, r0
 8007254:	4619      	mov	r1, r3
 8007256:	4620      	mov	r0, r4
 8007258:	f000 f80c 	bl	8007274 <RCC_SetFlashLatency>
 800725c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800725e:	4618      	mov	r0, r3
 8007260:	3714      	adds	r7, #20
 8007262:	46bd      	mov	sp, r7
 8007264:	bd90      	pop	{r4, r7, pc}
 8007266:	bf00      	nop
 8007268:	080120a4 	.word	0x080120a4
 800726c:	08012044 	.word	0x08012044
 8007270:	431bde83 	.word	0x431bde83

08007274 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8007274:	b590      	push	{r4, r7, lr}
 8007276:	b093      	sub	sp, #76	; 0x4c
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800727e:	4b37      	ldr	r3, [pc, #220]	; (800735c <RCC_SetFlashLatency+0xe8>)
 8007280:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8007284:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007286:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800728a:	4a35      	ldr	r2, [pc, #212]	; (8007360 <RCC_SetFlashLatency+0xec>)
 800728c:	f107 031c 	add.w	r3, r7, #28
 8007290:	ca07      	ldmia	r2, {r0, r1, r2}
 8007292:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8007296:	4b33      	ldr	r3, [pc, #204]	; (8007364 <RCC_SetFlashLatency+0xf0>)
 8007298:	f107 040c 	add.w	r4, r7, #12
 800729c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800729e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80072a2:	2300      	movs	r3, #0
 80072a4:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072ac:	d11a      	bne.n	80072e4 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80072ae:	2300      	movs	r3, #0
 80072b0:	643b      	str	r3, [r7, #64]	; 0x40
 80072b2:	e013      	b.n	80072dc <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80072b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072b6:	009b      	lsls	r3, r3, #2
 80072b8:	3348      	adds	r3, #72	; 0x48
 80072ba:	443b      	add	r3, r7
 80072bc:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80072c0:	687a      	ldr	r2, [r7, #4]
 80072c2:	429a      	cmp	r2, r3
 80072c4:	d807      	bhi.n	80072d6 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80072c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072c8:	009b      	lsls	r3, r3, #2
 80072ca:	3348      	adds	r3, #72	; 0x48
 80072cc:	443b      	add	r3, r7
 80072ce:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80072d2:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80072d4:	e020      	b.n	8007318 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80072d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072d8:	3301      	adds	r3, #1
 80072da:	643b      	str	r3, [r7, #64]	; 0x40
 80072dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072de:	2b03      	cmp	r3, #3
 80072e0:	d9e8      	bls.n	80072b4 <RCC_SetFlashLatency+0x40>
 80072e2:	e019      	b.n	8007318 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80072e4:	2300      	movs	r3, #0
 80072e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072e8:	e013      	b.n	8007312 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80072ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072ec:	009b      	lsls	r3, r3, #2
 80072ee:	3348      	adds	r3, #72	; 0x48
 80072f0:	443b      	add	r3, r7
 80072f2:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80072f6:	687a      	ldr	r2, [r7, #4]
 80072f8:	429a      	cmp	r2, r3
 80072fa:	d807      	bhi.n	800730c <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80072fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072fe:	009b      	lsls	r3, r3, #2
 8007300:	3348      	adds	r3, #72	; 0x48
 8007302:	443b      	add	r3, r7
 8007304:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8007308:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800730a:	e005      	b.n	8007318 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800730c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800730e:	3301      	adds	r3, #1
 8007310:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007312:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007314:	2b02      	cmp	r3, #2
 8007316:	d9e8      	bls.n	80072ea <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8007318:	4b13      	ldr	r3, [pc, #76]	; (8007368 <RCC_SetFlashLatency+0xf4>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f023 0207 	bic.w	r2, r3, #7
 8007320:	4911      	ldr	r1, [pc, #68]	; (8007368 <RCC_SetFlashLatency+0xf4>)
 8007322:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007324:	4313      	orrs	r3, r2
 8007326:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007328:	f7fd fed0 	bl	80050cc <HAL_GetTick>
 800732c:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800732e:	e008      	b.n	8007342 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007330:	f7fd fecc 	bl	80050cc <HAL_GetTick>
 8007334:	4602      	mov	r2, r0
 8007336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007338:	1ad3      	subs	r3, r2, r3
 800733a:	2b02      	cmp	r3, #2
 800733c:	d901      	bls.n	8007342 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800733e:	2303      	movs	r3, #3
 8007340:	e007      	b.n	8007352 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007342:	4b09      	ldr	r3, [pc, #36]	; (8007368 <RCC_SetFlashLatency+0xf4>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f003 0307 	and.w	r3, r3, #7
 800734a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800734c:	429a      	cmp	r2, r3
 800734e:	d1ef      	bne.n	8007330 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8007350:	2300      	movs	r3, #0
}
 8007352:	4618      	mov	r0, r3
 8007354:	374c      	adds	r7, #76	; 0x4c
 8007356:	46bd      	mov	sp, r7
 8007358:	bd90      	pop	{r4, r7, pc}
 800735a:	bf00      	nop
 800735c:	08011a60 	.word	0x08011a60
 8007360:	08011a70 	.word	0x08011a70
 8007364:	08011a7c 	.word	0x08011a7c
 8007368:	58004000 	.word	0x58004000

0800736c <LL_RCC_LSE_IsEnabled>:
{
 800736c:	b480      	push	{r7}
 800736e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8007370:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007374:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007378:	f003 0301 	and.w	r3, r3, #1
 800737c:	2b01      	cmp	r3, #1
 800737e:	d101      	bne.n	8007384 <LL_RCC_LSE_IsEnabled+0x18>
 8007380:	2301      	movs	r3, #1
 8007382:	e000      	b.n	8007386 <LL_RCC_LSE_IsEnabled+0x1a>
 8007384:	2300      	movs	r3, #0
}
 8007386:	4618      	mov	r0, r3
 8007388:	46bd      	mov	sp, r7
 800738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738e:	4770      	bx	lr

08007390 <LL_RCC_LSE_IsReady>:
{
 8007390:	b480      	push	{r7}
 8007392:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8007394:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007398:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800739c:	f003 0302 	and.w	r3, r3, #2
 80073a0:	2b02      	cmp	r3, #2
 80073a2:	d101      	bne.n	80073a8 <LL_RCC_LSE_IsReady+0x18>
 80073a4:	2301      	movs	r3, #1
 80073a6:	e000      	b.n	80073aa <LL_RCC_LSE_IsReady+0x1a>
 80073a8:	2300      	movs	r3, #0
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	46bd      	mov	sp, r7
 80073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b2:	4770      	bx	lr

080073b4 <LL_RCC_SetRFWKPClockSource>:
{
 80073b4:	b480      	push	{r7}
 80073b6:	b083      	sub	sp, #12
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80073bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80073c4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80073c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	4313      	orrs	r3, r2
 80073d0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80073d4:	bf00      	nop
 80073d6:	370c      	adds	r7, #12
 80073d8:	46bd      	mov	sp, r7
 80073da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073de:	4770      	bx	lr

080073e0 <LL_RCC_SetSMPSClockSource>:
{
 80073e0:	b480      	push	{r7}
 80073e2:	b083      	sub	sp, #12
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80073e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ee:	f023 0203 	bic.w	r2, r3, #3
 80073f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	4313      	orrs	r3, r2
 80073fa:	624b      	str	r3, [r1, #36]	; 0x24
}
 80073fc:	bf00      	nop
 80073fe:	370c      	adds	r7, #12
 8007400:	46bd      	mov	sp, r7
 8007402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007406:	4770      	bx	lr

08007408 <LL_RCC_SetSMPSPrescaler>:
{
 8007408:	b480      	push	{r7}
 800740a:	b083      	sub	sp, #12
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8007410:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007416:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800741a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	4313      	orrs	r3, r2
 8007422:	624b      	str	r3, [r1, #36]	; 0x24
}
 8007424:	bf00      	nop
 8007426:	370c      	adds	r7, #12
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr

08007430 <LL_RCC_SetUSARTClockSource>:
{
 8007430:	b480      	push	{r7}
 8007432:	b083      	sub	sp, #12
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8007438:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800743c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007440:	f023 0203 	bic.w	r2, r3, #3
 8007444:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	4313      	orrs	r3, r2
 800744c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007450:	bf00      	nop
 8007452:	370c      	adds	r7, #12
 8007454:	46bd      	mov	sp, r7
 8007456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745a:	4770      	bx	lr

0800745c <LL_RCC_SetLPUARTClockSource>:
{
 800745c:	b480      	push	{r7}
 800745e:	b083      	sub	sp, #12
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8007464:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800746c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007470:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	4313      	orrs	r3, r2
 8007478:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800747c:	bf00      	nop
 800747e:	370c      	adds	r7, #12
 8007480:	46bd      	mov	sp, r7
 8007482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007486:	4770      	bx	lr

08007488 <LL_RCC_SetI2CClockSource>:
{
 8007488:	b480      	push	{r7}
 800748a:	b083      	sub	sp, #12
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8007490:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007494:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	091b      	lsrs	r3, r3, #4
 800749c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80074a0:	43db      	mvns	r3, r3
 80074a2:	401a      	ands	r2, r3
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	011b      	lsls	r3, r3, #4
 80074a8:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80074ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80074b0:	4313      	orrs	r3, r2
 80074b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80074b6:	bf00      	nop
 80074b8:	370c      	adds	r7, #12
 80074ba:	46bd      	mov	sp, r7
 80074bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c0:	4770      	bx	lr

080074c2 <LL_RCC_SetLPTIMClockSource>:
{
 80074c2:	b480      	push	{r7}
 80074c4:	b083      	sub	sp, #12
 80074c6:	af00      	add	r7, sp, #0
 80074c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80074ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074ce:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	0c1b      	lsrs	r3, r3, #16
 80074d6:	041b      	lsls	r3, r3, #16
 80074d8:	43db      	mvns	r3, r3
 80074da:	401a      	ands	r2, r3
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	041b      	lsls	r3, r3, #16
 80074e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80074e4:	4313      	orrs	r3, r2
 80074e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80074ea:	bf00      	nop
 80074ec:	370c      	adds	r7, #12
 80074ee:	46bd      	mov	sp, r7
 80074f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f4:	4770      	bx	lr

080074f6 <LL_RCC_SetSAIClockSource>:
{
 80074f6:	b480      	push	{r7}
 80074f8:	b083      	sub	sp, #12
 80074fa:	af00      	add	r7, sp, #0
 80074fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80074fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007506:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800750a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	4313      	orrs	r3, r2
 8007512:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007516:	bf00      	nop
 8007518:	370c      	adds	r7, #12
 800751a:	46bd      	mov	sp, r7
 800751c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007520:	4770      	bx	lr

08007522 <LL_RCC_SetRNGClockSource>:
{
 8007522:	b480      	push	{r7}
 8007524:	b083      	sub	sp, #12
 8007526:	af00      	add	r7, sp, #0
 8007528:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800752a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800752e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007532:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8007536:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	4313      	orrs	r3, r2
 800753e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007542:	bf00      	nop
 8007544:	370c      	adds	r7, #12
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr

0800754e <LL_RCC_SetCLK48ClockSource>:
{
 800754e:	b480      	push	{r7}
 8007550:	b083      	sub	sp, #12
 8007552:	af00      	add	r7, sp, #0
 8007554:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8007556:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800755a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800755e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007562:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	4313      	orrs	r3, r2
 800756a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800756e:	bf00      	nop
 8007570:	370c      	adds	r7, #12
 8007572:	46bd      	mov	sp, r7
 8007574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007578:	4770      	bx	lr

0800757a <LL_RCC_SetUSBClockSource>:
{
 800757a:	b580      	push	{r7, lr}
 800757c:	b082      	sub	sp, #8
 800757e:	af00      	add	r7, sp, #0
 8007580:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f7ff ffe3 	bl	800754e <LL_RCC_SetCLK48ClockSource>
}
 8007588:	bf00      	nop
 800758a:	3708      	adds	r7, #8
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}

08007590 <LL_RCC_SetADCClockSource>:
{
 8007590:	b480      	push	{r7}
 8007592:	b083      	sub	sp, #12
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8007598:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800759c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075a0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80075a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	4313      	orrs	r3, r2
 80075ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80075b0:	bf00      	nop
 80075b2:	370c      	adds	r7, #12
 80075b4:	46bd      	mov	sp, r7
 80075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ba:	4770      	bx	lr

080075bc <LL_RCC_SetRTCClockSource>:
{
 80075bc:	b480      	push	{r7}
 80075be:	b083      	sub	sp, #12
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80075c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80075d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	4313      	orrs	r3, r2
 80075d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80075dc:	bf00      	nop
 80075de:	370c      	adds	r7, #12
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr

080075e8 <LL_RCC_GetRTCClockSource>:
{
 80075e8:	b480      	push	{r7}
 80075ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80075ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	46bd      	mov	sp, r7
 80075fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007600:	4770      	bx	lr

08007602 <LL_RCC_ForceBackupDomainReset>:
{
 8007602:	b480      	push	{r7}
 8007604:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007606:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800760a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800760e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007612:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007616:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800761a:	bf00      	nop
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr

08007624 <LL_RCC_ReleaseBackupDomainReset>:
{
 8007624:	b480      	push	{r7}
 8007626:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007628:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800762c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007630:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007634:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007638:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800763c:	bf00      	nop
 800763e:	46bd      	mov	sp, r7
 8007640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007644:	4770      	bx	lr

08007646 <LL_RCC_PLLSAI1_Enable>:
{
 8007646:	b480      	push	{r7}
 8007648:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800764a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007654:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007658:	6013      	str	r3, [r2, #0]
}
 800765a:	bf00      	nop
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr

08007664 <LL_RCC_PLLSAI1_Disable>:
{
 8007664:	b480      	push	{r7}
 8007666:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8007668:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007672:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007676:	6013      	str	r3, [r2, #0]
}
 8007678:	bf00      	nop
 800767a:	46bd      	mov	sp, r7
 800767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007680:	4770      	bx	lr

08007682 <LL_RCC_PLLSAI1_IsReady>:
{
 8007682:	b480      	push	{r7}
 8007684:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8007686:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007690:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007694:	d101      	bne.n	800769a <LL_RCC_PLLSAI1_IsReady+0x18>
 8007696:	2301      	movs	r3, #1
 8007698:	e000      	b.n	800769c <LL_RCC_PLLSAI1_IsReady+0x1a>
 800769a:	2300      	movs	r3, #0
}
 800769c:	4618      	mov	r0, r3
 800769e:	46bd      	mov	sp, r7
 80076a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a4:	4770      	bx	lr

080076a6 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80076a6:	b580      	push	{r7, lr}
 80076a8:	b088      	sub	sp, #32
 80076aa:	af00      	add	r7, sp, #0
 80076ac:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80076ae:	2300      	movs	r3, #0
 80076b0:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80076b2:	2300      	movs	r3, #0
 80076b4:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d034      	beq.n	800772c <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076c6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80076ca:	d021      	beq.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80076cc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80076d0:	d81b      	bhi.n	800770a <HAL_RCCEx_PeriphCLKConfig+0x64>
 80076d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80076d6:	d01d      	beq.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80076d8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80076dc:	d815      	bhi.n	800770a <HAL_RCCEx_PeriphCLKConfig+0x64>
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d00b      	beq.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0x54>
 80076e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80076e6:	d110      	bne.n	800770a <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80076e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076ec:	68db      	ldr	r3, [r3, #12]
 80076ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80076f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076f6:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80076f8:	e00d      	b.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	3304      	adds	r3, #4
 80076fe:	4618      	mov	r0, r3
 8007700:	f000 f947 	bl	8007992 <RCCEx_PLLSAI1_ConfigNP>
 8007704:	4603      	mov	r3, r0
 8007706:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007708:	e005      	b.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800770a:	2301      	movs	r3, #1
 800770c:	77fb      	strb	r3, [r7, #31]
        break;
 800770e:	e002      	b.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8007710:	bf00      	nop
 8007712:	e000      	b.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8007714:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007716:	7ffb      	ldrb	r3, [r7, #31]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d105      	bne.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007720:	4618      	mov	r0, r3
 8007722:	f7ff fee8 	bl	80074f6 <LL_RCC_SetSAIClockSource>
 8007726:	e001      	b.n	800772c <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007728:	7ffb      	ldrb	r3, [r7, #31]
 800772a:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007734:	2b00      	cmp	r3, #0
 8007736:	d046      	beq.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8007738:	f7ff ff56 	bl	80075e8 <LL_RCC_GetRTCClockSource>
 800773c:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007742:	69ba      	ldr	r2, [r7, #24]
 8007744:	429a      	cmp	r2, r3
 8007746:	d03c      	beq.n	80077c2 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8007748:	f7fe fc68 	bl	800601c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800774c:	69bb      	ldr	r3, [r7, #24]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d105      	bne.n	800775e <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007756:	4618      	mov	r0, r3
 8007758:	f7ff ff30 	bl	80075bc <LL_RCC_SetRTCClockSource>
 800775c:	e02e      	b.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800775e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007766:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8007768:	f7ff ff4b 	bl	8007602 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800776c:	f7ff ff5a 	bl	8007624 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800777a:	4313      	orrs	r3, r2
 800777c:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800777e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8007788:	f7ff fdf0 	bl	800736c <LL_RCC_LSE_IsEnabled>
 800778c:	4603      	mov	r3, r0
 800778e:	2b01      	cmp	r3, #1
 8007790:	d114      	bne.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007792:	f7fd fc9b 	bl	80050cc <HAL_GetTick>
 8007796:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8007798:	e00b      	b.n	80077b2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800779a:	f7fd fc97 	bl	80050cc <HAL_GetTick>
 800779e:	4602      	mov	r2, r0
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	1ad3      	subs	r3, r2, r3
 80077a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d902      	bls.n	80077b2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80077ac:	2303      	movs	r3, #3
 80077ae:	77fb      	strb	r3, [r7, #31]
              break;
 80077b0:	e004      	b.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80077b2:	f7ff fded 	bl	8007390 <LL_RCC_LSE_IsReady>
 80077b6:	4603      	mov	r3, r0
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	d1ee      	bne.n	800779a <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80077bc:	7ffb      	ldrb	r3, [r7, #31]
 80077be:	77bb      	strb	r3, [r7, #30]
 80077c0:	e001      	b.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077c2:	7ffb      	ldrb	r3, [r7, #31]
 80077c4:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f003 0301 	and.w	r3, r3, #1
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d004      	beq.n	80077dc <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	699b      	ldr	r3, [r3, #24]
 80077d6:	4618      	mov	r0, r3
 80077d8:	f7ff fe2a 	bl	8007430 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f003 0302 	and.w	r3, r3, #2
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d004      	beq.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	69db      	ldr	r3, [r3, #28]
 80077ec:	4618      	mov	r0, r3
 80077ee:	f7ff fe35 	bl	800745c <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f003 0310 	and.w	r3, r3, #16
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d004      	beq.n	8007808 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007802:	4618      	mov	r0, r3
 8007804:	f7ff fe5d 	bl	80074c2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f003 0320 	and.w	r3, r3, #32
 8007810:	2b00      	cmp	r3, #0
 8007812:	d004      	beq.n	800781e <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007818:	4618      	mov	r0, r3
 800781a:	f7ff fe52 	bl	80074c2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f003 0304 	and.w	r3, r3, #4
 8007826:	2b00      	cmp	r3, #0
 8007828:	d004      	beq.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6a1b      	ldr	r3, [r3, #32]
 800782e:	4618      	mov	r0, r3
 8007830:	f7ff fe2a 	bl	8007488 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f003 0308 	and.w	r3, r3, #8
 800783c:	2b00      	cmp	r3, #0
 800783e:	d004      	beq.n	800784a <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007844:	4618      	mov	r0, r3
 8007846:	f7ff fe1f 	bl	8007488 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007852:	2b00      	cmp	r3, #0
 8007854:	d022      	beq.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800785a:	4618      	mov	r0, r3
 800785c:	f7ff fe8d 	bl	800757a <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007864:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007868:	d107      	bne.n	800787a <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800786a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800786e:	68db      	ldr	r3, [r3, #12]
 8007870:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007874:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007878:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800787e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007882:	d10b      	bne.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	3304      	adds	r3, #4
 8007888:	4618      	mov	r0, r3
 800788a:	f000 f8dd 	bl	8007a48 <RCCEx_PLLSAI1_ConfigNQ>
 800788e:	4603      	mov	r3, r0
 8007890:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8007892:	7ffb      	ldrb	r3, [r7, #31]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d001      	beq.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8007898:	7ffb      	ldrb	r3, [r7, #31]
 800789a:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d02b      	beq.n	8007900 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078b0:	d008      	beq.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80078ba:	d003      	beq.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d105      	bne.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078c8:	4618      	mov	r0, r3
 80078ca:	f7ff fe2a 	bl	8007522 <LL_RCC_SetRNGClockSource>
 80078ce:	e00a      	b.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80078d8:	60fb      	str	r3, [r7, #12]
 80078da:	2000      	movs	r0, #0
 80078dc:	f7ff fe21 	bl	8007522 <LL_RCC_SetRNGClockSource>
 80078e0:	68f8      	ldr	r0, [r7, #12]
 80078e2:	f7ff fe34 	bl	800754e <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ea:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80078ee:	d107      	bne.n	8007900 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80078f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078f4:	68db      	ldr	r3, [r3, #12]
 80078f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80078fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80078fe:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007908:	2b00      	cmp	r3, #0
 800790a:	d022      	beq.n	8007952 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007910:	4618      	mov	r0, r3
 8007912:	f7ff fe3d 	bl	8007590 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800791a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800791e:	d107      	bne.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007920:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007924:	68db      	ldr	r3, [r3, #12]
 8007926:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800792a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800792e:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007934:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007938:	d10b      	bne.n	8007952 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	3304      	adds	r3, #4
 800793e:	4618      	mov	r0, r3
 8007940:	f000 f8dd 	bl	8007afe <RCCEx_PLLSAI1_ConfigNR>
 8007944:	4603      	mov	r3, r0
 8007946:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8007948:	7ffb      	ldrb	r3, [r7, #31]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d001      	beq.n	8007952 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800794e:	7ffb      	ldrb	r3, [r7, #31]
 8007950:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800795a:	2b00      	cmp	r3, #0
 800795c:	d004      	beq.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007962:	4618      	mov	r0, r3
 8007964:	f7ff fd26 	bl	80073b4 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007970:	2b00      	cmp	r3, #0
 8007972:	d009      	beq.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007978:	4618      	mov	r0, r3
 800797a:	f7ff fd45 	bl	8007408 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007982:	4618      	mov	r0, r3
 8007984:	f7ff fd2c 	bl	80073e0 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8007988:	7fbb      	ldrb	r3, [r7, #30]
}
 800798a:	4618      	mov	r0, r3
 800798c:	3720      	adds	r7, #32
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}

08007992 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007992:	b580      	push	{r7, lr}
 8007994:	b084      	sub	sp, #16
 8007996:	af00      	add	r7, sp, #0
 8007998:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800799a:	2300      	movs	r3, #0
 800799c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800799e:	f7ff fe61 	bl	8007664 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80079a2:	f7fd fb93 	bl	80050cc <HAL_GetTick>
 80079a6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80079a8:	e009      	b.n	80079be <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80079aa:	f7fd fb8f 	bl	80050cc <HAL_GetTick>
 80079ae:	4602      	mov	r2, r0
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	1ad3      	subs	r3, r2, r3
 80079b4:	2b02      	cmp	r3, #2
 80079b6:	d902      	bls.n	80079be <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80079b8:	2303      	movs	r3, #3
 80079ba:	73fb      	strb	r3, [r7, #15]
      break;
 80079bc:	e004      	b.n	80079c8 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80079be:	f7ff fe60 	bl	8007682 <LL_RCC_PLLSAI1_IsReady>
 80079c2:	4603      	mov	r3, r0
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d1f0      	bne.n	80079aa <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80079c8:	7bfb      	ldrb	r3, [r7, #15]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d137      	bne.n	8007a3e <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80079ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079d2:	691b      	ldr	r3, [r3, #16]
 80079d4:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	021b      	lsls	r3, r3, #8
 80079de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80079e2:	4313      	orrs	r3, r2
 80079e4:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80079e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079ea:	691b      	ldr	r3, [r3, #16]
 80079ec:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80079f8:	4313      	orrs	r3, r2
 80079fa:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80079fc:	f7ff fe23 	bl	8007646 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a00:	f7fd fb64 	bl	80050cc <HAL_GetTick>
 8007a04:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007a06:	e009      	b.n	8007a1c <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007a08:	f7fd fb60 	bl	80050cc <HAL_GetTick>
 8007a0c:	4602      	mov	r2, r0
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	1ad3      	subs	r3, r2, r3
 8007a12:	2b02      	cmp	r3, #2
 8007a14:	d902      	bls.n	8007a1c <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8007a16:	2303      	movs	r3, #3
 8007a18:	73fb      	strb	r3, [r7, #15]
        break;
 8007a1a:	e004      	b.n	8007a26 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007a1c:	f7ff fe31 	bl	8007682 <LL_RCC_PLLSAI1_IsReady>
 8007a20:	4603      	mov	r3, r0
 8007a22:	2b01      	cmp	r3, #1
 8007a24:	d1f0      	bne.n	8007a08 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8007a26:	7bfb      	ldrb	r3, [r7, #15]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d108      	bne.n	8007a3e <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007a2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a30:	691a      	ldr	r2, [r3, #16]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	691b      	ldr	r3, [r3, #16]
 8007a36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3710      	adds	r7, #16
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}

08007a48 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b084      	sub	sp, #16
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007a50:	2300      	movs	r3, #0
 8007a52:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007a54:	f7ff fe06 	bl	8007664 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007a58:	f7fd fb38 	bl	80050cc <HAL_GetTick>
 8007a5c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007a5e:	e009      	b.n	8007a74 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007a60:	f7fd fb34 	bl	80050cc <HAL_GetTick>
 8007a64:	4602      	mov	r2, r0
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	1ad3      	subs	r3, r2, r3
 8007a6a:	2b02      	cmp	r3, #2
 8007a6c:	d902      	bls.n	8007a74 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8007a6e:	2303      	movs	r3, #3
 8007a70:	73fb      	strb	r3, [r7, #15]
      break;
 8007a72:	e004      	b.n	8007a7e <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007a74:	f7ff fe05 	bl	8007682 <LL_RCC_PLLSAI1_IsReady>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d1f0      	bne.n	8007a60 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8007a7e:	7bfb      	ldrb	r3, [r7, #15]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d137      	bne.n	8007af4 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007a84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a88:	691b      	ldr	r3, [r3, #16]
 8007a8a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	021b      	lsls	r3, r3, #8
 8007a94:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007a98:	4313      	orrs	r3, r2
 8007a9a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8007a9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007aa0:	691b      	ldr	r3, [r3, #16]
 8007aa2:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	689b      	ldr	r3, [r3, #8]
 8007aaa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007aae:	4313      	orrs	r3, r2
 8007ab0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007ab2:	f7ff fdc8 	bl	8007646 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ab6:	f7fd fb09 	bl	80050cc <HAL_GetTick>
 8007aba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007abc:	e009      	b.n	8007ad2 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007abe:	f7fd fb05 	bl	80050cc <HAL_GetTick>
 8007ac2:	4602      	mov	r2, r0
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	1ad3      	subs	r3, r2, r3
 8007ac8:	2b02      	cmp	r3, #2
 8007aca:	d902      	bls.n	8007ad2 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8007acc:	2303      	movs	r3, #3
 8007ace:	73fb      	strb	r3, [r7, #15]
        break;
 8007ad0:	e004      	b.n	8007adc <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007ad2:	f7ff fdd6 	bl	8007682 <LL_RCC_PLLSAI1_IsReady>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	2b01      	cmp	r3, #1
 8007ada:	d1f0      	bne.n	8007abe <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8007adc:	7bfb      	ldrb	r3, [r7, #15]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d108      	bne.n	8007af4 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007ae2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ae6:	691a      	ldr	r2, [r3, #16]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	691b      	ldr	r3, [r3, #16]
 8007aec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007af0:	4313      	orrs	r3, r2
 8007af2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3710      	adds	r7, #16
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}

08007afe <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007afe:	b580      	push	{r7, lr}
 8007b00:	b084      	sub	sp, #16
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007b06:	2300      	movs	r3, #0
 8007b08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007b0a:	f7ff fdab 	bl	8007664 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007b0e:	f7fd fadd 	bl	80050cc <HAL_GetTick>
 8007b12:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007b14:	e009      	b.n	8007b2a <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007b16:	f7fd fad9 	bl	80050cc <HAL_GetTick>
 8007b1a:	4602      	mov	r2, r0
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	1ad3      	subs	r3, r2, r3
 8007b20:	2b02      	cmp	r3, #2
 8007b22:	d902      	bls.n	8007b2a <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8007b24:	2303      	movs	r3, #3
 8007b26:	73fb      	strb	r3, [r7, #15]
      break;
 8007b28:	e004      	b.n	8007b34 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007b2a:	f7ff fdaa 	bl	8007682 <LL_RCC_PLLSAI1_IsReady>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d1f0      	bne.n	8007b16 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8007b34:	7bfb      	ldrb	r3, [r7, #15]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d137      	bne.n	8007baa <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007b3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b3e:	691b      	ldr	r3, [r3, #16]
 8007b40:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	021b      	lsls	r3, r3, #8
 8007b4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8007b52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b56:	691b      	ldr	r3, [r3, #16]
 8007b58:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	68db      	ldr	r3, [r3, #12]
 8007b60:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007b64:	4313      	orrs	r3, r2
 8007b66:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007b68:	f7ff fd6d 	bl	8007646 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b6c:	f7fd faae 	bl	80050cc <HAL_GetTick>
 8007b70:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007b72:	e009      	b.n	8007b88 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007b74:	f7fd faaa 	bl	80050cc <HAL_GetTick>
 8007b78:	4602      	mov	r2, r0
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	1ad3      	subs	r3, r2, r3
 8007b7e:	2b02      	cmp	r3, #2
 8007b80:	d902      	bls.n	8007b88 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8007b82:	2303      	movs	r3, #3
 8007b84:	73fb      	strb	r3, [r7, #15]
        break;
 8007b86:	e004      	b.n	8007b92 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007b88:	f7ff fd7b 	bl	8007682 <LL_RCC_PLLSAI1_IsReady>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	2b01      	cmp	r3, #1
 8007b90:	d1f0      	bne.n	8007b74 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8007b92:	7bfb      	ldrb	r3, [r7, #15]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d108      	bne.n	8007baa <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007b98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b9c:	691a      	ldr	r2, [r3, #16]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	691b      	ldr	r3, [r3, #16]
 8007ba2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	3710      	adds	r7, #16
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}

08007bb4 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b082      	sub	sp, #8
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d101      	bne.n	8007bc6 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	e027      	b.n	8007c16 <HAL_RNG_Init+0x62>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	7a5b      	ldrb	r3, [r3, #9]
 8007bca:	b2db      	uxtb	r3, r3
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d105      	bne.n	8007bdc <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f7fb fb3c 	bl	8003254 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2202      	movs	r2, #2
 8007be0:	725a      	strb	r2, [r3, #9]

  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f023 0120 	bic.w	r1, r3, #32
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	685a      	ldr	r2, [r3, #4]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	430a      	orrs	r2, r1
 8007bf6:	601a      	str	r2, [r3, #0]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	681a      	ldr	r2, [r3, #0]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f042 0204 	orr.w	r2, r2, #4
 8007c06:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2200      	movs	r2, #0
 8007c12:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8007c14:	2300      	movs	r3, #0
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3708      	adds	r7, #8
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}
	...

08007c20 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b084      	sub	sp, #16
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d101      	bne.n	8007c32 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8007c2e:	2301      	movs	r3, #1
 8007c30:	e09f      	b.n	8007d72 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007c38:	b2db      	uxtb	r3, r3
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d106      	bne.n	8007c4c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2200      	movs	r2, #0
 8007c42:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f7fb fb2e 	bl	80032a8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2202      	movs	r2, #2
 8007c50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8007c54:	4b49      	ldr	r3, [pc, #292]	; (8007d7c <HAL_RTC_Init+0x15c>)
 8007c56:	68db      	ldr	r3, [r3, #12]
 8007c58:	f003 0310 	and.w	r3, r3, #16
 8007c5c:	2b10      	cmp	r3, #16
 8007c5e:	d07e      	beq.n	8007d5e <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	22ca      	movs	r2, #202	; 0xca
 8007c66:	625a      	str	r2, [r3, #36]	; 0x24
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	2253      	movs	r2, #83	; 0x53
 8007c6e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f000 f8ab 	bl	8007dcc <RTC_EnterInitMode>
 8007c76:	4603      	mov	r3, r0
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d00a      	beq.n	8007c92 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	22ff      	movs	r2, #255	; 0xff
 8007c82:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2204      	movs	r2, #4
 8007c88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	73fb      	strb	r3, [r7, #15]
 8007c90:	e067      	b.n	8007d62 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	689b      	ldr	r3, [r3, #8]
 8007c98:	687a      	ldr	r2, [r7, #4]
 8007c9a:	6812      	ldr	r2, [r2, #0]
 8007c9c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007ca0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ca4:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	6899      	ldr	r1, [r3, #8]
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	685a      	ldr	r2, [r3, #4]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	691b      	ldr	r3, [r3, #16]
 8007cb4:	431a      	orrs	r2, r3
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	699b      	ldr	r3, [r3, #24]
 8007cba:	431a      	orrs	r2, r3
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	430a      	orrs	r2, r1
 8007cc2:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	687a      	ldr	r2, [r7, #4]
 8007cca:	68d2      	ldr	r2, [r2, #12]
 8007ccc:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	6919      	ldr	r1, [r3, #16]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	689b      	ldr	r3, [r3, #8]
 8007cd8:	041a      	lsls	r2, r3, #16
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	430a      	orrs	r2, r1
 8007ce0:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	68da      	ldr	r2, [r3, #12]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007cf0:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f022 0203 	bic.w	r2, r2, #3
 8007d00:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	69da      	ldr	r2, [r3, #28]
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	695b      	ldr	r3, [r3, #20]
 8007d10:	431a      	orrs	r2, r3
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	430a      	orrs	r2, r1
 8007d18:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	689b      	ldr	r3, [r3, #8]
 8007d20:	f003 0320 	and.w	r3, r3, #32
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d113      	bne.n	8007d50 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f000 f829 	bl	8007d80 <HAL_RTC_WaitForSynchro>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d00d      	beq.n	8007d50 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	22ff      	movs	r2, #255	; 0xff
 8007d3a:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2204      	movs	r2, #4
 8007d40:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2200      	movs	r2, #0
 8007d48:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	e010      	b.n	8007d72 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	22ff      	movs	r2, #255	; 0xff
 8007d56:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	73fb      	strb	r3, [r7, #15]
 8007d5c:	e001      	b.n	8007d62 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8007d62:	7bfb      	ldrb	r3, [r7, #15]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d103      	bne.n	8007d70 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 8007d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3710      	adds	r7, #16
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}
 8007d7a:	bf00      	nop
 8007d7c:	40002800 	.word	0x40002800

08007d80 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b084      	sub	sp, #16
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	68da      	ldr	r2, [r3, #12]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007d96:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8007d98:	f7fd f998 	bl	80050cc <HAL_GetTick>
 8007d9c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007d9e:	e009      	b.n	8007db4 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007da0:	f7fd f994 	bl	80050cc <HAL_GetTick>
 8007da4:	4602      	mov	r2, r0
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	1ad3      	subs	r3, r2, r3
 8007daa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007dae:	d901      	bls.n	8007db4 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8007db0:	2303      	movs	r3, #3
 8007db2:	e007      	b.n	8007dc4 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	68db      	ldr	r3, [r3, #12]
 8007dba:	f003 0320 	and.w	r3, r3, #32
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d0ee      	beq.n	8007da0 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8007dc2:	2300      	movs	r3, #0
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	3710      	adds	r7, #16
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}

08007dcc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b084      	sub	sp, #16
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	68db      	ldr	r3, [r3, #12]
 8007dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d119      	bne.n	8007e16 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f04f 32ff 	mov.w	r2, #4294967295
 8007dea:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007dec:	f7fd f96e 	bl	80050cc <HAL_GetTick>
 8007df0:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007df2:	e009      	b.n	8007e08 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007df4:	f7fd f96a 	bl	80050cc <HAL_GetTick>
 8007df8:	4602      	mov	r2, r0
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	1ad3      	subs	r3, r2, r3
 8007dfe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e02:	d901      	bls.n	8007e08 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8007e04:	2303      	movs	r3, #3
 8007e06:	e007      	b.n	8007e18 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	68db      	ldr	r3, [r3, #12]
 8007e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d0ee      	beq.n	8007df4 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8007e16:	2300      	movs	r3, #0
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	3710      	adds	r7, #16
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}

08007e20 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b086      	sub	sp, #24
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	60f8      	str	r0, [r7, #12]
 8007e28:	60b9      	str	r1, [r7, #8]
 8007e2a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	d101      	bne.n	8007e3a <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8007e36:	2302      	movs	r3, #2
 8007e38:	e0a8      	b.n	8007f8c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	2201      	movs	r2, #1
 8007e3e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	2202      	movs	r2, #2
 8007e46:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	22ca      	movs	r2, #202	; 0xca
 8007e50:	625a      	str	r2, [r3, #36]	; 0x24
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	2253      	movs	r2, #83	; 0x53
 8007e58:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	689b      	ldr	r3, [r3, #8]
 8007e60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d020      	beq.n	8007eaa <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8007e68:	f7fd f930 	bl	80050cc <HAL_GetTick>
 8007e6c:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8007e6e:	e015      	b.n	8007e9c <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007e70:	f7fd f92c 	bl	80050cc <HAL_GetTick>
 8007e74:	4602      	mov	r2, r0
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	1ad3      	subs	r3, r2, r3
 8007e7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e7e:	d90d      	bls.n	8007e9c <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	22ff      	movs	r2, #255	; 0xff
 8007e86:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2203      	movs	r2, #3
 8007e8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2200      	movs	r2, #0
 8007e94:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8007e98:	2303      	movs	r3, #3
 8007e9a:	e077      	b.n	8007f8c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	68db      	ldr	r3, [r3, #12]
 8007ea2:	f003 0304 	and.w	r3, r3, #4
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d1e2      	bne.n	8007e70 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	689a      	ldr	r2, [r3, #8]
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007eb8:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	68db      	ldr	r3, [r3, #12]
 8007ec0:	b2da      	uxtb	r2, r3
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8007eca:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8007ecc:	f7fd f8fe 	bl	80050cc <HAL_GetTick>
 8007ed0:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8007ed2:	e015      	b.n	8007f00 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007ed4:	f7fd f8fa 	bl	80050cc <HAL_GetTick>
 8007ed8:	4602      	mov	r2, r0
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	1ad3      	subs	r3, r2, r3
 8007ede:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007ee2:	d90d      	bls.n	8007f00 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	22ff      	movs	r2, #255	; 0xff
 8007eea:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	2203      	movs	r2, #3
 8007ef0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8007efc:	2303      	movs	r3, #3
 8007efe:	e045      	b.n	8007f8c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	68db      	ldr	r3, [r3, #12]
 8007f06:	f003 0304 	and.w	r3, r3, #4
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d0e2      	beq.n	8007ed4 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	68ba      	ldr	r2, [r7, #8]
 8007f14:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	689a      	ldr	r2, [r3, #8]
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f022 0207 	bic.w	r2, r2, #7
 8007f24:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	6899      	ldr	r1, [r3, #8]
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	687a      	ldr	r2, [r7, #4]
 8007f32:	430a      	orrs	r2, r1
 8007f34:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8007f36:	4b17      	ldr	r3, [pc, #92]	; (8007f94 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8007f38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f3c:	4a15      	ldr	r2, [pc, #84]	; (8007f94 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8007f3e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007f42:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8007f46:	4b13      	ldr	r3, [pc, #76]	; (8007f94 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4a12      	ldr	r2, [pc, #72]	; (8007f94 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8007f4c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007f50:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	689a      	ldr	r2, [r3, #8]
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007f60:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	689a      	ldr	r2, [r3, #8]
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007f70:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	22ff      	movs	r2, #255	; 0xff
 8007f78:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	2201      	movs	r2, #1
 8007f7e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	2200      	movs	r2, #0
 8007f86:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8007f8a:	2300      	movs	r3, #0
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3718      	adds	r7, #24
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}
 8007f94:	58000800 	.word	0x58000800

08007f98 <LL_RCC_GetUSARTClockSource>:
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b083      	sub	sp, #12
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8007fa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fa4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	4013      	ands	r3, r2
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	370c      	adds	r7, #12
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb6:	4770      	bx	lr

08007fb8 <LL_RCC_GetLPUARTClockSource>:
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b083      	sub	sp, #12
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007fc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fc4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	4013      	ands	r3, r2
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	370c      	adds	r7, #12
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd6:	4770      	bx	lr

08007fd8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b082      	sub	sp, #8
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d101      	bne.n	8007fea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	e042      	b.n	8008070 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d106      	bne.n	8008002 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f7fb f835 	bl	800306c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2224      	movs	r2, #36	; 0x24
 8008006:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	681a      	ldr	r2, [r3, #0]
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f022 0201 	bic.w	r2, r2, #1
 8008018:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800801e:	2b00      	cmp	r3, #0
 8008020:	d002      	beq.n	8008028 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f000 feee 	bl	8008e04 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f000 fcc3 	bl	80089b4 <UART_SetConfig>
 800802e:	4603      	mov	r3, r0
 8008030:	2b01      	cmp	r3, #1
 8008032:	d101      	bne.n	8008038 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008034:	2301      	movs	r3, #1
 8008036:	e01b      	b.n	8008070 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	685a      	ldr	r2, [r3, #4]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008046:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	689a      	ldr	r2, [r3, #8]
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008056:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	681a      	ldr	r2, [r3, #0]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f042 0201 	orr.w	r2, r2, #1
 8008066:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f000 ff6d 	bl	8008f48 <UART_CheckIdleState>
 800806e:	4603      	mov	r3, r0
}
 8008070:	4618      	mov	r0, r3
 8008072:	3708      	adds	r7, #8
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}

08008078 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b08a      	sub	sp, #40	; 0x28
 800807c:	af02      	add	r7, sp, #8
 800807e:	60f8      	str	r0, [r7, #12]
 8008080:	60b9      	str	r1, [r7, #8]
 8008082:	603b      	str	r3, [r7, #0]
 8008084:	4613      	mov	r3, r2
 8008086:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800808e:	2b20      	cmp	r3, #32
 8008090:	d17b      	bne.n	800818a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d002      	beq.n	800809e <HAL_UART_Transmit+0x26>
 8008098:	88fb      	ldrh	r3, [r7, #6]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d101      	bne.n	80080a2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800809e:	2301      	movs	r3, #1
 80080a0:	e074      	b.n	800818c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	2200      	movs	r2, #0
 80080a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	2221      	movs	r2, #33	; 0x21
 80080ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80080b2:	f7fd f80b 	bl	80050cc <HAL_GetTick>
 80080b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	88fa      	ldrh	r2, [r7, #6]
 80080bc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	88fa      	ldrh	r2, [r7, #6]
 80080c4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	689b      	ldr	r3, [r3, #8]
 80080cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080d0:	d108      	bne.n	80080e4 <HAL_UART_Transmit+0x6c>
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	691b      	ldr	r3, [r3, #16]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d104      	bne.n	80080e4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80080da:	2300      	movs	r3, #0
 80080dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	61bb      	str	r3, [r7, #24]
 80080e2:	e003      	b.n	80080ec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80080e8:	2300      	movs	r3, #0
 80080ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80080ec:	e030      	b.n	8008150 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	9300      	str	r3, [sp, #0]
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	2200      	movs	r2, #0
 80080f6:	2180      	movs	r1, #128	; 0x80
 80080f8:	68f8      	ldr	r0, [r7, #12]
 80080fa:	f000 ffcf 	bl	800909c <UART_WaitOnFlagUntilTimeout>
 80080fe:	4603      	mov	r3, r0
 8008100:	2b00      	cmp	r3, #0
 8008102:	d005      	beq.n	8008110 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	2220      	movs	r2, #32
 8008108:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800810c:	2303      	movs	r3, #3
 800810e:	e03d      	b.n	800818c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008110:	69fb      	ldr	r3, [r7, #28]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d10b      	bne.n	800812e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008116:	69bb      	ldr	r3, [r7, #24]
 8008118:	881b      	ldrh	r3, [r3, #0]
 800811a:	461a      	mov	r2, r3
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008124:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008126:	69bb      	ldr	r3, [r7, #24]
 8008128:	3302      	adds	r3, #2
 800812a:	61bb      	str	r3, [r7, #24]
 800812c:	e007      	b.n	800813e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800812e:	69fb      	ldr	r3, [r7, #28]
 8008130:	781a      	ldrb	r2, [r3, #0]
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008138:	69fb      	ldr	r3, [r7, #28]
 800813a:	3301      	adds	r3, #1
 800813c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008144:	b29b      	uxth	r3, r3
 8008146:	3b01      	subs	r3, #1
 8008148:	b29a      	uxth	r2, r3
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008156:	b29b      	uxth	r3, r3
 8008158:	2b00      	cmp	r3, #0
 800815a:	d1c8      	bne.n	80080ee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	9300      	str	r3, [sp, #0]
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	2200      	movs	r2, #0
 8008164:	2140      	movs	r1, #64	; 0x40
 8008166:	68f8      	ldr	r0, [r7, #12]
 8008168:	f000 ff98 	bl	800909c <UART_WaitOnFlagUntilTimeout>
 800816c:	4603      	mov	r3, r0
 800816e:	2b00      	cmp	r3, #0
 8008170:	d005      	beq.n	800817e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2220      	movs	r2, #32
 8008176:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800817a:	2303      	movs	r3, #3
 800817c:	e006      	b.n	800818c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	2220      	movs	r2, #32
 8008182:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8008186:	2300      	movs	r3, #0
 8008188:	e000      	b.n	800818c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800818a:	2302      	movs	r3, #2
  }
}
 800818c:	4618      	mov	r0, r3
 800818e:	3720      	adds	r7, #32
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}

08008194 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b08a      	sub	sp, #40	; 0x28
 8008198:	af00      	add	r7, sp, #0
 800819a:	60f8      	str	r0, [r7, #12]
 800819c:	60b9      	str	r1, [r7, #8]
 800819e:	4613      	mov	r3, r2
 80081a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081a8:	2b20      	cmp	r3, #32
 80081aa:	d137      	bne.n	800821c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d002      	beq.n	80081b8 <HAL_UART_Receive_IT+0x24>
 80081b2:	88fb      	ldrh	r3, [r7, #6]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d101      	bne.n	80081bc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80081b8:	2301      	movs	r3, #1
 80081ba:	e030      	b.n	800821e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	2200      	movs	r2, #0
 80081c0:	66da      	str	r2, [r3, #108]	; 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4a18      	ldr	r2, [pc, #96]	; (8008228 <HAL_UART_Receive_IT+0x94>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d01f      	beq.n	800820c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	685b      	ldr	r3, [r3, #4]
 80081d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d018      	beq.n	800820c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	e853 3f00 	ldrex	r3, [r3]
 80081e6:	613b      	str	r3, [r7, #16]
   return(result);
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80081ee:	627b      	str	r3, [r7, #36]	; 0x24
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	461a      	mov	r2, r3
 80081f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f8:	623b      	str	r3, [r7, #32]
 80081fa:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081fc:	69f9      	ldr	r1, [r7, #28]
 80081fe:	6a3a      	ldr	r2, [r7, #32]
 8008200:	e841 2300 	strex	r3, r2, [r1]
 8008204:	61bb      	str	r3, [r7, #24]
   return(result);
 8008206:	69bb      	ldr	r3, [r7, #24]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d1e6      	bne.n	80081da <HAL_UART_Receive_IT+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_IT(huart, pData, Size));
 800820c:	88fb      	ldrh	r3, [r7, #6]
 800820e:	461a      	mov	r2, r3
 8008210:	68b9      	ldr	r1, [r7, #8]
 8008212:	68f8      	ldr	r0, [r7, #12]
 8008214:	f000 ffaa 	bl	800916c <UART_Start_Receive_IT>
 8008218:	4603      	mov	r3, r0
 800821a:	e000      	b.n	800821e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800821c:	2302      	movs	r3, #2
  }
}
 800821e:	4618      	mov	r0, r3
 8008220:	3728      	adds	r7, #40	; 0x28
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}
 8008226:	bf00      	nop
 8008228:	40008000 	.word	0x40008000

0800822c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b08a      	sub	sp, #40	; 0x28
 8008230:	af00      	add	r7, sp, #0
 8008232:	60f8      	str	r0, [r7, #12]
 8008234:	60b9      	str	r1, [r7, #8]
 8008236:	4613      	mov	r3, r2
 8008238:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008240:	2b20      	cmp	r3, #32
 8008242:	d167      	bne.n	8008314 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d002      	beq.n	8008250 <HAL_UART_Transmit_DMA+0x24>
 800824a:	88fb      	ldrh	r3, [r7, #6]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d101      	bne.n	8008254 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008250:	2301      	movs	r3, #1
 8008252:	e060      	b.n	8008316 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	68ba      	ldr	r2, [r7, #8]
 8008258:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	88fa      	ldrh	r2, [r7, #6]
 800825e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	88fa      	ldrh	r2, [r7, #6]
 8008266:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	2200      	movs	r2, #0
 800826e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2221      	movs	r2, #33	; 0x21
 8008276:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800827e:	2b00      	cmp	r3, #0
 8008280:	d028      	beq.n	80082d4 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008286:	4a26      	ldr	r2, [pc, #152]	; (8008320 <HAL_UART_Transmit_DMA+0xf4>)
 8008288:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800828e:	4a25      	ldr	r2, [pc, #148]	; (8008324 <HAL_UART_Transmit_DMA+0xf8>)
 8008290:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008296:	4a24      	ldr	r2, [pc, #144]	; (8008328 <HAL_UART_Transmit_DMA+0xfc>)
 8008298:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800829e:	2200      	movs	r2, #0
 80082a0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082aa:	4619      	mov	r1, r3
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	3328      	adds	r3, #40	; 0x28
 80082b2:	461a      	mov	r2, r3
 80082b4:	88fb      	ldrh	r3, [r7, #6]
 80082b6:	f7fd f97b 	bl	80055b0 <HAL_DMA_Start_IT>
 80082ba:	4603      	mov	r3, r0
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d009      	beq.n	80082d4 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	2210      	movs	r2, #16
 80082c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	2220      	movs	r2, #32
 80082cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 80082d0:	2301      	movs	r3, #1
 80082d2:	e020      	b.n	8008316 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	2240      	movs	r2, #64	; 0x40
 80082da:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	3308      	adds	r3, #8
 80082e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	e853 3f00 	ldrex	r3, [r3]
 80082ea:	613b      	str	r3, [r7, #16]
   return(result);
 80082ec:	693b      	ldr	r3, [r7, #16]
 80082ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082f2:	627b      	str	r3, [r7, #36]	; 0x24
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	3308      	adds	r3, #8
 80082fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082fc:	623a      	str	r2, [r7, #32]
 80082fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008300:	69f9      	ldr	r1, [r7, #28]
 8008302:	6a3a      	ldr	r2, [r7, #32]
 8008304:	e841 2300 	strex	r3, r2, [r1]
 8008308:	61bb      	str	r3, [r7, #24]
   return(result);
 800830a:	69bb      	ldr	r3, [r7, #24]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d1e5      	bne.n	80082dc <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8008310:	2300      	movs	r3, #0
 8008312:	e000      	b.n	8008316 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8008314:	2302      	movs	r3, #2
  }
}
 8008316:	4618      	mov	r0, r3
 8008318:	3728      	adds	r7, #40	; 0x28
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}
 800831e:	bf00      	nop
 8008320:	080094ff 	.word	0x080094ff
 8008324:	08009599 	.word	0x08009599
 8008328:	080095b5 	.word	0x080095b5

0800832c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b0ba      	sub	sp, #232	; 0xe8
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	69db      	ldr	r3, [r3, #28]
 800833a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	689b      	ldr	r3, [r3, #8]
 800834e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008352:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008356:	f640 030f 	movw	r3, #2063	; 0x80f
 800835a:	4013      	ands	r3, r2
 800835c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008360:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008364:	2b00      	cmp	r3, #0
 8008366:	d11b      	bne.n	80083a0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008368:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800836c:	f003 0320 	and.w	r3, r3, #32
 8008370:	2b00      	cmp	r3, #0
 8008372:	d015      	beq.n	80083a0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008374:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008378:	f003 0320 	and.w	r3, r3, #32
 800837c:	2b00      	cmp	r3, #0
 800837e:	d105      	bne.n	800838c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008380:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008384:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008388:	2b00      	cmp	r3, #0
 800838a:	d009      	beq.n	80083a0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008390:	2b00      	cmp	r3, #0
 8008392:	f000 82e3 	beq.w	800895c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	4798      	blx	r3
      }
      return;
 800839e:	e2dd      	b.n	800895c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80083a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	f000 8123 	beq.w	80085f0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80083aa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80083ae:	4b8d      	ldr	r3, [pc, #564]	; (80085e4 <HAL_UART_IRQHandler+0x2b8>)
 80083b0:	4013      	ands	r3, r2
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d106      	bne.n	80083c4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80083b6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80083ba:	4b8b      	ldr	r3, [pc, #556]	; (80085e8 <HAL_UART_IRQHandler+0x2bc>)
 80083bc:	4013      	ands	r3, r2
 80083be:	2b00      	cmp	r3, #0
 80083c0:	f000 8116 	beq.w	80085f0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80083c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083c8:	f003 0301 	and.w	r3, r3, #1
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d011      	beq.n	80083f4 <HAL_UART_IRQHandler+0xc8>
 80083d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d00b      	beq.n	80083f4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	2201      	movs	r2, #1
 80083e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083ea:	f043 0201 	orr.w	r2, r3, #1
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80083f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083f8:	f003 0302 	and.w	r3, r3, #2
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d011      	beq.n	8008424 <HAL_UART_IRQHandler+0xf8>
 8008400:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008404:	f003 0301 	and.w	r3, r3, #1
 8008408:	2b00      	cmp	r3, #0
 800840a:	d00b      	beq.n	8008424 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	2202      	movs	r2, #2
 8008412:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800841a:	f043 0204 	orr.w	r2, r3, #4
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008424:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008428:	f003 0304 	and.w	r3, r3, #4
 800842c:	2b00      	cmp	r3, #0
 800842e:	d011      	beq.n	8008454 <HAL_UART_IRQHandler+0x128>
 8008430:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008434:	f003 0301 	and.w	r3, r3, #1
 8008438:	2b00      	cmp	r3, #0
 800843a:	d00b      	beq.n	8008454 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	2204      	movs	r2, #4
 8008442:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800844a:	f043 0202 	orr.w	r2, r3, #2
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008454:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008458:	f003 0308 	and.w	r3, r3, #8
 800845c:	2b00      	cmp	r3, #0
 800845e:	d017      	beq.n	8008490 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008460:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008464:	f003 0320 	and.w	r3, r3, #32
 8008468:	2b00      	cmp	r3, #0
 800846a:	d105      	bne.n	8008478 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800846c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008470:	4b5c      	ldr	r3, [pc, #368]	; (80085e4 <HAL_UART_IRQHandler+0x2b8>)
 8008472:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008474:	2b00      	cmp	r3, #0
 8008476:	d00b      	beq.n	8008490 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	2208      	movs	r2, #8
 800847e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008486:	f043 0208 	orr.w	r2, r3, #8
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008490:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008494:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008498:	2b00      	cmp	r3, #0
 800849a:	d012      	beq.n	80084c2 <HAL_UART_IRQHandler+0x196>
 800849c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d00c      	beq.n	80084c2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80084b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084b8:	f043 0220 	orr.w	r2, r3, #32
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	f000 8249 	beq.w	8008960 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80084ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084d2:	f003 0320 	and.w	r3, r3, #32
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d013      	beq.n	8008502 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80084da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084de:	f003 0320 	and.w	r3, r3, #32
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d105      	bne.n	80084f2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80084e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80084ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d007      	beq.n	8008502 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d003      	beq.n	8008502 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008508:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	689b      	ldr	r3, [r3, #8]
 8008512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008516:	2b40      	cmp	r3, #64	; 0x40
 8008518:	d005      	beq.n	8008526 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800851a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800851e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008522:	2b00      	cmp	r3, #0
 8008524:	d054      	beq.n	80085d0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f000 ff83 	bl	8009432 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	689b      	ldr	r3, [r3, #8]
 8008532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008536:	2b40      	cmp	r3, #64	; 0x40
 8008538:	d146      	bne.n	80085c8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	3308      	adds	r3, #8
 8008540:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008544:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008548:	e853 3f00 	ldrex	r3, [r3]
 800854c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008550:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008554:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008558:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	3308      	adds	r3, #8
 8008562:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008566:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800856a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800856e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008572:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008576:	e841 2300 	strex	r3, r2, [r1]
 800857a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800857e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008582:	2b00      	cmp	r3, #0
 8008584:	d1d9      	bne.n	800853a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800858c:	2b00      	cmp	r3, #0
 800858e:	d017      	beq.n	80085c0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008596:	4a15      	ldr	r2, [pc, #84]	; (80085ec <HAL_UART_IRQHandler+0x2c0>)
 8008598:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80085a0:	4618      	mov	r0, r3
 80085a2:	f7fd f8df 	bl	8005764 <HAL_DMA_Abort_IT>
 80085a6:	4603      	mov	r3, r0
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d019      	beq.n	80085e0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80085b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085b4:	687a      	ldr	r2, [r7, #4]
 80085b6:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80085ba:	4610      	mov	r0, r2
 80085bc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085be:	e00f      	b.n	80085e0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f000 f9e1 	bl	8008988 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085c6:	e00b      	b.n	80085e0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f000 f9dd 	bl	8008988 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085ce:	e007      	b.n	80085e0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f000 f9d9 	bl	8008988 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2200      	movs	r2, #0
 80085da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80085de:	e1bf      	b.n	8008960 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085e0:	bf00      	nop
    return;
 80085e2:	e1bd      	b.n	8008960 <HAL_UART_IRQHandler+0x634>
 80085e4:	10000001 	.word	0x10000001
 80085e8:	04000120 	.word	0x04000120
 80085ec:	08009635 	.word	0x08009635

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085f4:	2b01      	cmp	r3, #1
 80085f6:	f040 8153 	bne.w	80088a0 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80085fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085fe:	f003 0310 	and.w	r3, r3, #16
 8008602:	2b00      	cmp	r3, #0
 8008604:	f000 814c 	beq.w	80088a0 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008608:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800860c:	f003 0310 	and.w	r3, r3, #16
 8008610:	2b00      	cmp	r3, #0
 8008612:	f000 8145 	beq.w	80088a0 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	2210      	movs	r2, #16
 800861c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	689b      	ldr	r3, [r3, #8]
 8008624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008628:	2b40      	cmp	r3, #64	; 0x40
 800862a:	f040 80bb 	bne.w	80087a4 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	685b      	ldr	r3, [r3, #4]
 8008638:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800863c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008640:	2b00      	cmp	r3, #0
 8008642:	f000 818f 	beq.w	8008964 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800864c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008650:	429a      	cmp	r2, r3
 8008652:	f080 8187 	bcs.w	8008964 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800865c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f003 0320 	and.w	r3, r3, #32
 800866e:	2b00      	cmp	r3, #0
 8008670:	f040 8087 	bne.w	8008782 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800867c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008680:	e853 3f00 	ldrex	r3, [r3]
 8008684:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008688:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800868c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008690:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	461a      	mov	r2, r3
 800869a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800869e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80086a2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80086aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80086ae:	e841 2300 	strex	r3, r2, [r1]
 80086b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80086b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d1da      	bne.n	8008674 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	3308      	adds	r3, #8
 80086c4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80086c8:	e853 3f00 	ldrex	r3, [r3]
 80086cc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80086ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80086d0:	f023 0301 	bic.w	r3, r3, #1
 80086d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	3308      	adds	r3, #8
 80086de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80086e2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80086e6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086e8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80086ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80086ee:	e841 2300 	strex	r3, r2, [r1]
 80086f2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80086f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d1e1      	bne.n	80086be <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	3308      	adds	r3, #8
 8008700:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008702:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008704:	e853 3f00 	ldrex	r3, [r3]
 8008708:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800870a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800870c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008710:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	3308      	adds	r3, #8
 800871a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800871e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008720:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008722:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008724:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008726:	e841 2300 	strex	r3, r2, [r1]
 800872a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800872c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800872e:	2b00      	cmp	r3, #0
 8008730:	d1e3      	bne.n	80086fa <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2220      	movs	r2, #32
 8008736:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2200      	movs	r2, #0
 800873e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008746:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008748:	e853 3f00 	ldrex	r3, [r3]
 800874c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800874e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008750:	f023 0310 	bic.w	r3, r3, #16
 8008754:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	461a      	mov	r2, r3
 800875e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008762:	65bb      	str	r3, [r7, #88]	; 0x58
 8008764:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008766:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008768:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800876a:	e841 2300 	strex	r3, r2, [r1]
 800876e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008770:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008772:	2b00      	cmp	r3, #0
 8008774:	d1e4      	bne.n	8008740 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800877c:	4618      	mov	r0, r3
 800877e:	f7fc ff92 	bl	80056a6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2202      	movs	r2, #2
 8008786:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008794:	b29b      	uxth	r3, r3
 8008796:	1ad3      	subs	r3, r2, r3
 8008798:	b29b      	uxth	r3, r3
 800879a:	4619      	mov	r1, r3
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f000 f8fd 	bl	800899c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80087a2:	e0df      	b.n	8008964 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80087b0:	b29b      	uxth	r3, r3
 80087b2:	1ad3      	subs	r3, r2, r3
 80087b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80087be:	b29b      	uxth	r3, r3
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	f000 80d1 	beq.w	8008968 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80087c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	f000 80cc 	beq.w	8008968 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087d8:	e853 3f00 	ldrex	r3, [r3]
 80087dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80087de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80087e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	461a      	mov	r2, r3
 80087ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80087f2:	647b      	str	r3, [r7, #68]	; 0x44
 80087f4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80087f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80087fa:	e841 2300 	strex	r3, r2, [r1]
 80087fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008800:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008802:	2b00      	cmp	r3, #0
 8008804:	d1e4      	bne.n	80087d0 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	3308      	adds	r3, #8
 800880c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800880e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008810:	e853 3f00 	ldrex	r3, [r3]
 8008814:	623b      	str	r3, [r7, #32]
   return(result);
 8008816:	6a3b      	ldr	r3, [r7, #32]
 8008818:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800881c:	f023 0301 	bic.w	r3, r3, #1
 8008820:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	3308      	adds	r3, #8
 800882a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800882e:	633a      	str	r2, [r7, #48]	; 0x30
 8008830:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008832:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008834:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008836:	e841 2300 	strex	r3, r2, [r1]
 800883a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800883c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800883e:	2b00      	cmp	r3, #0
 8008840:	d1e1      	bne.n	8008806 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2220      	movs	r2, #32
 8008846:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2200      	movs	r2, #0
 800884e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2200      	movs	r2, #0
 8008854:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	e853 3f00 	ldrex	r3, [r3]
 8008862:	60fb      	str	r3, [r7, #12]
   return(result);
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	f023 0310 	bic.w	r3, r3, #16
 800886a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	461a      	mov	r2, r3
 8008874:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008878:	61fb      	str	r3, [r7, #28]
 800887a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800887c:	69b9      	ldr	r1, [r7, #24]
 800887e:	69fa      	ldr	r2, [r7, #28]
 8008880:	e841 2300 	strex	r3, r2, [r1]
 8008884:	617b      	str	r3, [r7, #20]
   return(result);
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d1e4      	bne.n	8008856 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2202      	movs	r2, #2
 8008890:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008892:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008896:	4619      	mov	r1, r3
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f000 f87f 	bl	800899c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800889e:	e063      	b.n	8008968 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80088a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d00e      	beq.n	80088ca <HAL_UART_IRQHandler+0x59e>
 80088ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80088b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d008      	beq.n	80088ca <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80088c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f001 fc14 	bl	800a0f0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80088c8:	e051      	b.n	800896e <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80088ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d014      	beq.n	8008900 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80088d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d105      	bne.n	80088ee <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80088e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80088e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d008      	beq.n	8008900 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d03a      	beq.n	800896c <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	4798      	blx	r3
    }
    return;
 80088fe:	e035      	b.n	800896c <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008900:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008908:	2b00      	cmp	r3, #0
 800890a:	d009      	beq.n	8008920 <HAL_UART_IRQHandler+0x5f4>
 800890c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008914:	2b00      	cmp	r3, #0
 8008916:	d003      	beq.n	8008920 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8008918:	6878      	ldr	r0, [r7, #4]
 800891a:	f000 fea1 	bl	8009660 <UART_EndTransmit_IT>
    return;
 800891e:	e026      	b.n	800896e <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008920:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008924:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008928:	2b00      	cmp	r3, #0
 800892a:	d009      	beq.n	8008940 <HAL_UART_IRQHandler+0x614>
 800892c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008930:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008934:	2b00      	cmp	r3, #0
 8008936:	d003      	beq.n	8008940 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	f001 fbed 	bl	800a118 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800893e:	e016      	b.n	800896e <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008940:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008944:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008948:	2b00      	cmp	r3, #0
 800894a:	d010      	beq.n	800896e <HAL_UART_IRQHandler+0x642>
 800894c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008950:	2b00      	cmp	r3, #0
 8008952:	da0c      	bge.n	800896e <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f001 fbd5 	bl	800a104 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800895a:	e008      	b.n	800896e <HAL_UART_IRQHandler+0x642>
      return;
 800895c:	bf00      	nop
 800895e:	e006      	b.n	800896e <HAL_UART_IRQHandler+0x642>
    return;
 8008960:	bf00      	nop
 8008962:	e004      	b.n	800896e <HAL_UART_IRQHandler+0x642>
      return;
 8008964:	bf00      	nop
 8008966:	e002      	b.n	800896e <HAL_UART_IRQHandler+0x642>
      return;
 8008968:	bf00      	nop
 800896a:	e000      	b.n	800896e <HAL_UART_IRQHandler+0x642>
    return;
 800896c:	bf00      	nop
  }
}
 800896e:	37e8      	adds	r7, #232	; 0xe8
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}

08008974 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008974:	b480      	push	{r7}
 8008976:	b083      	sub	sp, #12
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800897c:	bf00      	nop
 800897e:	370c      	adds	r7, #12
 8008980:	46bd      	mov	sp, r7
 8008982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008986:	4770      	bx	lr

08008988 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008988:	b480      	push	{r7}
 800898a:	b083      	sub	sp, #12
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008990:	bf00      	nop
 8008992:	370c      	adds	r7, #12
 8008994:	46bd      	mov	sp, r7
 8008996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899a:	4770      	bx	lr

0800899c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800899c:	b480      	push	{r7}
 800899e:	b083      	sub	sp, #12
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
 80089a4:	460b      	mov	r3, r1
 80089a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80089a8:	bf00      	nop
 80089aa:	370c      	adds	r7, #12
 80089ac:	46bd      	mov	sp, r7
 80089ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b2:	4770      	bx	lr

080089b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80089b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80089b8:	b08c      	sub	sp, #48	; 0x30
 80089ba:	af00      	add	r7, sp, #0
 80089bc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80089be:	2300      	movs	r3, #0
 80089c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80089c4:	697b      	ldr	r3, [r7, #20]
 80089c6:	689a      	ldr	r2, [r3, #8]
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	691b      	ldr	r3, [r3, #16]
 80089cc:	431a      	orrs	r2, r3
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	695b      	ldr	r3, [r3, #20]
 80089d2:	431a      	orrs	r2, r3
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	69db      	ldr	r3, [r3, #28]
 80089d8:	4313      	orrs	r3, r2
 80089da:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	681a      	ldr	r2, [r3, #0]
 80089e2:	4baf      	ldr	r3, [pc, #700]	; (8008ca0 <UART_SetConfig+0x2ec>)
 80089e4:	4013      	ands	r3, r2
 80089e6:	697a      	ldr	r2, [r7, #20]
 80089e8:	6812      	ldr	r2, [r2, #0]
 80089ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80089ec:	430b      	orrs	r3, r1
 80089ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80089f0:	697b      	ldr	r3, [r7, #20]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	685b      	ldr	r3, [r3, #4]
 80089f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	68da      	ldr	r2, [r3, #12]
 80089fe:	697b      	ldr	r3, [r7, #20]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	430a      	orrs	r2, r1
 8008a04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008a06:	697b      	ldr	r3, [r7, #20]
 8008a08:	699b      	ldr	r3, [r3, #24]
 8008a0a:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008a0c:	697b      	ldr	r3, [r7, #20]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	4aa4      	ldr	r2, [pc, #656]	; (8008ca4 <UART_SetConfig+0x2f0>)
 8008a12:	4293      	cmp	r3, r2
 8008a14:	d004      	beq.n	8008a20 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	6a1b      	ldr	r3, [r3, #32]
 8008a1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	689b      	ldr	r3, [r3, #8]
 8008a26:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008a2a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008a2e:	697a      	ldr	r2, [r7, #20]
 8008a30:	6812      	ldr	r2, [r2, #0]
 8008a32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a34:	430b      	orrs	r3, r1
 8008a36:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a3e:	f023 010f 	bic.w	r1, r3, #15
 8008a42:	697b      	ldr	r3, [r7, #20]
 8008a44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008a46:	697b      	ldr	r3, [r7, #20]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	430a      	orrs	r2, r1
 8008a4c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008a4e:	697b      	ldr	r3, [r7, #20]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	4a95      	ldr	r2, [pc, #596]	; (8008ca8 <UART_SetConfig+0x2f4>)
 8008a54:	4293      	cmp	r3, r2
 8008a56:	d125      	bne.n	8008aa4 <UART_SetConfig+0xf0>
 8008a58:	2003      	movs	r0, #3
 8008a5a:	f7ff fa9d 	bl	8007f98 <LL_RCC_GetUSARTClockSource>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	2b03      	cmp	r3, #3
 8008a62:	d81b      	bhi.n	8008a9c <UART_SetConfig+0xe8>
 8008a64:	a201      	add	r2, pc, #4	; (adr r2, 8008a6c <UART_SetConfig+0xb8>)
 8008a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a6a:	bf00      	nop
 8008a6c:	08008a7d 	.word	0x08008a7d
 8008a70:	08008a8d 	.word	0x08008a8d
 8008a74:	08008a85 	.word	0x08008a85
 8008a78:	08008a95 	.word	0x08008a95
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a82:	e042      	b.n	8008b0a <UART_SetConfig+0x156>
 8008a84:	2302      	movs	r3, #2
 8008a86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a8a:	e03e      	b.n	8008b0a <UART_SetConfig+0x156>
 8008a8c:	2304      	movs	r3, #4
 8008a8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a92:	e03a      	b.n	8008b0a <UART_SetConfig+0x156>
 8008a94:	2308      	movs	r3, #8
 8008a96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a9a:	e036      	b.n	8008b0a <UART_SetConfig+0x156>
 8008a9c:	2310      	movs	r3, #16
 8008a9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008aa2:	e032      	b.n	8008b0a <UART_SetConfig+0x156>
 8008aa4:	697b      	ldr	r3, [r7, #20]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4a7e      	ldr	r2, [pc, #504]	; (8008ca4 <UART_SetConfig+0x2f0>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d12a      	bne.n	8008b04 <UART_SetConfig+0x150>
 8008aae:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8008ab2:	f7ff fa81 	bl	8007fb8 <LL_RCC_GetLPUARTClockSource>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008abc:	d01a      	beq.n	8008af4 <UART_SetConfig+0x140>
 8008abe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008ac2:	d81b      	bhi.n	8008afc <UART_SetConfig+0x148>
 8008ac4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ac8:	d00c      	beq.n	8008ae4 <UART_SetConfig+0x130>
 8008aca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ace:	d815      	bhi.n	8008afc <UART_SetConfig+0x148>
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d003      	beq.n	8008adc <UART_SetConfig+0x128>
 8008ad4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ad8:	d008      	beq.n	8008aec <UART_SetConfig+0x138>
 8008ada:	e00f      	b.n	8008afc <UART_SetConfig+0x148>
 8008adc:	2300      	movs	r3, #0
 8008ade:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ae2:	e012      	b.n	8008b0a <UART_SetConfig+0x156>
 8008ae4:	2302      	movs	r3, #2
 8008ae6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008aea:	e00e      	b.n	8008b0a <UART_SetConfig+0x156>
 8008aec:	2304      	movs	r3, #4
 8008aee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008af2:	e00a      	b.n	8008b0a <UART_SetConfig+0x156>
 8008af4:	2308      	movs	r3, #8
 8008af6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008afa:	e006      	b.n	8008b0a <UART_SetConfig+0x156>
 8008afc:	2310      	movs	r3, #16
 8008afe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b02:	e002      	b.n	8008b0a <UART_SetConfig+0x156>
 8008b04:	2310      	movs	r3, #16
 8008b06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008b0a:	697b      	ldr	r3, [r7, #20]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	4a65      	ldr	r2, [pc, #404]	; (8008ca4 <UART_SetConfig+0x2f0>)
 8008b10:	4293      	cmp	r3, r2
 8008b12:	f040 8097 	bne.w	8008c44 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008b16:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008b1a:	2b08      	cmp	r3, #8
 8008b1c:	d823      	bhi.n	8008b66 <UART_SetConfig+0x1b2>
 8008b1e:	a201      	add	r2, pc, #4	; (adr r2, 8008b24 <UART_SetConfig+0x170>)
 8008b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b24:	08008b49 	.word	0x08008b49
 8008b28:	08008b67 	.word	0x08008b67
 8008b2c:	08008b51 	.word	0x08008b51
 8008b30:	08008b67 	.word	0x08008b67
 8008b34:	08008b57 	.word	0x08008b57
 8008b38:	08008b67 	.word	0x08008b67
 8008b3c:	08008b67 	.word	0x08008b67
 8008b40:	08008b67 	.word	0x08008b67
 8008b44:	08008b5f 	.word	0x08008b5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b48:	f7fe fb30 	bl	80071ac <HAL_RCC_GetPCLK1Freq>
 8008b4c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008b4e:	e010      	b.n	8008b72 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b50:	4b56      	ldr	r3, [pc, #344]	; (8008cac <UART_SetConfig+0x2f8>)
 8008b52:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008b54:	e00d      	b.n	8008b72 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b56:	f7fe faa9 	bl	80070ac <HAL_RCC_GetSysClockFreq>
 8008b5a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008b5c:	e009      	b.n	8008b72 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b62:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008b64:	e005      	b.n	8008b72 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8008b66:	2300      	movs	r3, #0
 8008b68:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008b70:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	f000 812b 	beq.w	8008dd0 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b7e:	4a4c      	ldr	r2, [pc, #304]	; (8008cb0 <UART_SetConfig+0x2fc>)
 8008b80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b84:	461a      	mov	r2, r3
 8008b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b88:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b8c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008b8e:	697b      	ldr	r3, [r7, #20]
 8008b90:	685a      	ldr	r2, [r3, #4]
 8008b92:	4613      	mov	r3, r2
 8008b94:	005b      	lsls	r3, r3, #1
 8008b96:	4413      	add	r3, r2
 8008b98:	69ba      	ldr	r2, [r7, #24]
 8008b9a:	429a      	cmp	r2, r3
 8008b9c:	d305      	bcc.n	8008baa <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008b9e:	697b      	ldr	r3, [r7, #20]
 8008ba0:	685b      	ldr	r3, [r3, #4]
 8008ba2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008ba4:	69ba      	ldr	r2, [r7, #24]
 8008ba6:	429a      	cmp	r2, r3
 8008ba8:	d903      	bls.n	8008bb2 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8008baa:	2301      	movs	r3, #1
 8008bac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008bb0:	e10e      	b.n	8008dd0 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	60bb      	str	r3, [r7, #8]
 8008bb8:	60fa      	str	r2, [r7, #12]
 8008bba:	697b      	ldr	r3, [r7, #20]
 8008bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bbe:	4a3c      	ldr	r2, [pc, #240]	; (8008cb0 <UART_SetConfig+0x2fc>)
 8008bc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008bc4:	b29b      	uxth	r3, r3
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	603b      	str	r3, [r7, #0]
 8008bca:	607a      	str	r2, [r7, #4]
 8008bcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008bd0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008bd4:	f7f8 f820 	bl	8000c18 <__aeabi_uldivmod>
 8008bd8:	4602      	mov	r2, r0
 8008bda:	460b      	mov	r3, r1
 8008bdc:	4610      	mov	r0, r2
 8008bde:	4619      	mov	r1, r3
 8008be0:	f04f 0200 	mov.w	r2, #0
 8008be4:	f04f 0300 	mov.w	r3, #0
 8008be8:	020b      	lsls	r3, r1, #8
 8008bea:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008bee:	0202      	lsls	r2, r0, #8
 8008bf0:	6979      	ldr	r1, [r7, #20]
 8008bf2:	6849      	ldr	r1, [r1, #4]
 8008bf4:	0849      	lsrs	r1, r1, #1
 8008bf6:	2000      	movs	r0, #0
 8008bf8:	460c      	mov	r4, r1
 8008bfa:	4605      	mov	r5, r0
 8008bfc:	eb12 0804 	adds.w	r8, r2, r4
 8008c00:	eb43 0905 	adc.w	r9, r3, r5
 8008c04:	697b      	ldr	r3, [r7, #20]
 8008c06:	685b      	ldr	r3, [r3, #4]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	469a      	mov	sl, r3
 8008c0c:	4693      	mov	fp, r2
 8008c0e:	4652      	mov	r2, sl
 8008c10:	465b      	mov	r3, fp
 8008c12:	4640      	mov	r0, r8
 8008c14:	4649      	mov	r1, r9
 8008c16:	f7f7 ffff 	bl	8000c18 <__aeabi_uldivmod>
 8008c1a:	4602      	mov	r2, r0
 8008c1c:	460b      	mov	r3, r1
 8008c1e:	4613      	mov	r3, r2
 8008c20:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008c22:	6a3b      	ldr	r3, [r7, #32]
 8008c24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008c28:	d308      	bcc.n	8008c3c <UART_SetConfig+0x288>
 8008c2a:	6a3b      	ldr	r3, [r7, #32]
 8008c2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c30:	d204      	bcs.n	8008c3c <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	6a3a      	ldr	r2, [r7, #32]
 8008c38:	60da      	str	r2, [r3, #12]
 8008c3a:	e0c9      	b.n	8008dd0 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008c42:	e0c5      	b.n	8008dd0 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008c44:	697b      	ldr	r3, [r7, #20]
 8008c46:	69db      	ldr	r3, [r3, #28]
 8008c48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c4c:	d16d      	bne.n	8008d2a <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8008c4e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008c52:	3b01      	subs	r3, #1
 8008c54:	2b07      	cmp	r3, #7
 8008c56:	d82d      	bhi.n	8008cb4 <UART_SetConfig+0x300>
 8008c58:	a201      	add	r2, pc, #4	; (adr r2, 8008c60 <UART_SetConfig+0x2ac>)
 8008c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c5e:	bf00      	nop
 8008c60:	08008c81 	.word	0x08008c81
 8008c64:	08008c89 	.word	0x08008c89
 8008c68:	08008cb5 	.word	0x08008cb5
 8008c6c:	08008c8f 	.word	0x08008c8f
 8008c70:	08008cb5 	.word	0x08008cb5
 8008c74:	08008cb5 	.word	0x08008cb5
 8008c78:	08008cb5 	.word	0x08008cb5
 8008c7c:	08008c97 	.word	0x08008c97
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c80:	f7fe faaa 	bl	80071d8 <HAL_RCC_GetPCLK2Freq>
 8008c84:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008c86:	e01b      	b.n	8008cc0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008c88:	4b08      	ldr	r3, [pc, #32]	; (8008cac <UART_SetConfig+0x2f8>)
 8008c8a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008c8c:	e018      	b.n	8008cc0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c8e:	f7fe fa0d 	bl	80070ac <HAL_RCC_GetSysClockFreq>
 8008c92:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008c94:	e014      	b.n	8008cc0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c9a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008c9c:	e010      	b.n	8008cc0 <UART_SetConfig+0x30c>
 8008c9e:	bf00      	nop
 8008ca0:	cfff69f3 	.word	0xcfff69f3
 8008ca4:	40008000 	.word	0x40008000
 8008ca8:	40013800 	.word	0x40013800
 8008cac:	00f42400 	.word	0x00f42400
 8008cb0:	080120e4 	.word	0x080120e4
      default:
        pclk = 0U;
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008cb8:	2301      	movs	r3, #1
 8008cba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008cbe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	f000 8084 	beq.w	8008dd0 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008cc8:	697b      	ldr	r3, [r7, #20]
 8008cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ccc:	4a4b      	ldr	r2, [pc, #300]	; (8008dfc <UART_SetConfig+0x448>)
 8008cce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008cd2:	461a      	mov	r2, r3
 8008cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cd6:	fbb3 f3f2 	udiv	r3, r3, r2
 8008cda:	005a      	lsls	r2, r3, #1
 8008cdc:	697b      	ldr	r3, [r7, #20]
 8008cde:	685b      	ldr	r3, [r3, #4]
 8008ce0:	085b      	lsrs	r3, r3, #1
 8008ce2:	441a      	add	r2, r3
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	685b      	ldr	r3, [r3, #4]
 8008ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cec:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008cee:	6a3b      	ldr	r3, [r7, #32]
 8008cf0:	2b0f      	cmp	r3, #15
 8008cf2:	d916      	bls.n	8008d22 <UART_SetConfig+0x36e>
 8008cf4:	6a3b      	ldr	r3, [r7, #32]
 8008cf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008cfa:	d212      	bcs.n	8008d22 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008cfc:	6a3b      	ldr	r3, [r7, #32]
 8008cfe:	b29b      	uxth	r3, r3
 8008d00:	f023 030f 	bic.w	r3, r3, #15
 8008d04:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008d06:	6a3b      	ldr	r3, [r7, #32]
 8008d08:	085b      	lsrs	r3, r3, #1
 8008d0a:	b29b      	uxth	r3, r3
 8008d0c:	f003 0307 	and.w	r3, r3, #7
 8008d10:	b29a      	uxth	r2, r3
 8008d12:	8bfb      	ldrh	r3, [r7, #30]
 8008d14:	4313      	orrs	r3, r2
 8008d16:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	8bfa      	ldrh	r2, [r7, #30]
 8008d1e:	60da      	str	r2, [r3, #12]
 8008d20:	e056      	b.n	8008dd0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8008d22:	2301      	movs	r3, #1
 8008d24:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008d28:	e052      	b.n	8008dd0 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008d2a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008d2e:	3b01      	subs	r3, #1
 8008d30:	2b07      	cmp	r3, #7
 8008d32:	d822      	bhi.n	8008d7a <UART_SetConfig+0x3c6>
 8008d34:	a201      	add	r2, pc, #4	; (adr r2, 8008d3c <UART_SetConfig+0x388>)
 8008d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d3a:	bf00      	nop
 8008d3c:	08008d5d 	.word	0x08008d5d
 8008d40:	08008d65 	.word	0x08008d65
 8008d44:	08008d7b 	.word	0x08008d7b
 8008d48:	08008d6b 	.word	0x08008d6b
 8008d4c:	08008d7b 	.word	0x08008d7b
 8008d50:	08008d7b 	.word	0x08008d7b
 8008d54:	08008d7b 	.word	0x08008d7b
 8008d58:	08008d73 	.word	0x08008d73
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008d5c:	f7fe fa3c 	bl	80071d8 <HAL_RCC_GetPCLK2Freq>
 8008d60:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008d62:	e010      	b.n	8008d86 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008d64:	4b26      	ldr	r3, [pc, #152]	; (8008e00 <UART_SetConfig+0x44c>)
 8008d66:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008d68:	e00d      	b.n	8008d86 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008d6a:	f7fe f99f 	bl	80070ac <HAL_RCC_GetSysClockFreq>
 8008d6e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008d70:	e009      	b.n	8008d86 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d76:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008d78:	e005      	b.n	8008d86 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008d7e:	2301      	movs	r3, #1
 8008d80:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008d84:	bf00      	nop
    }

    if (pclk != 0U)
 8008d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d021      	beq.n	8008dd0 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d8c:	697b      	ldr	r3, [r7, #20]
 8008d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d90:	4a1a      	ldr	r2, [pc, #104]	; (8008dfc <UART_SetConfig+0x448>)
 8008d92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d96:	461a      	mov	r2, r3
 8008d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d9a:	fbb3 f2f2 	udiv	r2, r3, r2
 8008d9e:	697b      	ldr	r3, [r7, #20]
 8008da0:	685b      	ldr	r3, [r3, #4]
 8008da2:	085b      	lsrs	r3, r3, #1
 8008da4:	441a      	add	r2, r3
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	685b      	ldr	r3, [r3, #4]
 8008daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008db0:	6a3b      	ldr	r3, [r7, #32]
 8008db2:	2b0f      	cmp	r3, #15
 8008db4:	d909      	bls.n	8008dca <UART_SetConfig+0x416>
 8008db6:	6a3b      	ldr	r3, [r7, #32]
 8008db8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008dbc:	d205      	bcs.n	8008dca <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008dbe:	6a3b      	ldr	r3, [r7, #32]
 8008dc0:	b29a      	uxth	r2, r3
 8008dc2:	697b      	ldr	r3, [r7, #20]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	60da      	str	r2, [r3, #12]
 8008dc8:	e002      	b.n	8008dd0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8008dca:	2301      	movs	r3, #1
 8008dcc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008dd0:	697b      	ldr	r3, [r7, #20]
 8008dd2:	2201      	movs	r2, #1
 8008dd4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008dd8:	697b      	ldr	r3, [r7, #20]
 8008dda:	2201      	movs	r2, #1
 8008ddc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008de0:	697b      	ldr	r3, [r7, #20]
 8008de2:	2200      	movs	r2, #0
 8008de4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008de6:	697b      	ldr	r3, [r7, #20]
 8008de8:	2200      	movs	r2, #0
 8008dea:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008dec:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3730      	adds	r7, #48	; 0x30
 8008df4:	46bd      	mov	sp, r7
 8008df6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008dfa:	bf00      	nop
 8008dfc:	080120e4 	.word	0x080120e4
 8008e00:	00f42400 	.word	0x00f42400

08008e04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b083      	sub	sp, #12
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e10:	f003 0308 	and.w	r3, r3, #8
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d00a      	beq.n	8008e2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	685b      	ldr	r3, [r3, #4]
 8008e1e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	430a      	orrs	r2, r1
 8008e2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e32:	f003 0301 	and.w	r3, r3, #1
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d00a      	beq.n	8008e50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	685b      	ldr	r3, [r3, #4]
 8008e40:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	430a      	orrs	r2, r1
 8008e4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e54:	f003 0302 	and.w	r3, r3, #2
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d00a      	beq.n	8008e72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	685b      	ldr	r3, [r3, #4]
 8008e62:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	430a      	orrs	r2, r1
 8008e70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e76:	f003 0304 	and.w	r3, r3, #4
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d00a      	beq.n	8008e94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	685b      	ldr	r3, [r3, #4]
 8008e84:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	430a      	orrs	r2, r1
 8008e92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e98:	f003 0310 	and.w	r3, r3, #16
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d00a      	beq.n	8008eb6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	689b      	ldr	r3, [r3, #8]
 8008ea6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	430a      	orrs	r2, r1
 8008eb4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eba:	f003 0320 	and.w	r3, r3, #32
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d00a      	beq.n	8008ed8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	689b      	ldr	r3, [r3, #8]
 8008ec8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	430a      	orrs	r2, r1
 8008ed6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008edc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d01a      	beq.n	8008f1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	685b      	ldr	r3, [r3, #4]
 8008eea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	430a      	orrs	r2, r1
 8008ef8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008efe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f02:	d10a      	bne.n	8008f1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	685b      	ldr	r3, [r3, #4]
 8008f0a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	430a      	orrs	r2, r1
 8008f18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d00a      	beq.n	8008f3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	685b      	ldr	r3, [r3, #4]
 8008f2c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	430a      	orrs	r2, r1
 8008f3a:	605a      	str	r2, [r3, #4]
  }
}
 8008f3c:	bf00      	nop
 8008f3e:	370c      	adds	r7, #12
 8008f40:	46bd      	mov	sp, r7
 8008f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f46:	4770      	bx	lr

08008f48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b098      	sub	sp, #96	; 0x60
 8008f4c:	af02      	add	r7, sp, #8
 8008f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2200      	movs	r2, #0
 8008f54:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008f58:	f7fc f8b8 	bl	80050cc <HAL_GetTick>
 8008f5c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f003 0308 	and.w	r3, r3, #8
 8008f68:	2b08      	cmp	r3, #8
 8008f6a:	d12f      	bne.n	8008fcc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008f6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008f70:	9300      	str	r3, [sp, #0]
 8008f72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008f74:	2200      	movs	r2, #0
 8008f76:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f000 f88e 	bl	800909c <UART_WaitOnFlagUntilTimeout>
 8008f80:	4603      	mov	r3, r0
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d022      	beq.n	8008fcc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f8e:	e853 3f00 	ldrex	r3, [r3]
 8008f92:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f9a:	653b      	str	r3, [r7, #80]	; 0x50
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	461a      	mov	r2, r3
 8008fa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008fa4:	647b      	str	r3, [r7, #68]	; 0x44
 8008fa6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fa8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008faa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008fac:	e841 2300 	strex	r3, r2, [r1]
 8008fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008fb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d1e6      	bne.n	8008f86 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2220      	movs	r2, #32
 8008fbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008fc8:	2303      	movs	r3, #3
 8008fca:	e063      	b.n	8009094 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f003 0304 	and.w	r3, r3, #4
 8008fd6:	2b04      	cmp	r3, #4
 8008fd8:	d149      	bne.n	800906e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008fda:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008fde:	9300      	str	r3, [sp, #0]
 8008fe0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	f000 f857 	bl	800909c <UART_WaitOnFlagUntilTimeout>
 8008fee:	4603      	mov	r3, r0
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d03c      	beq.n	800906e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ffc:	e853 3f00 	ldrex	r3, [r3]
 8009000:	623b      	str	r3, [r7, #32]
   return(result);
 8009002:	6a3b      	ldr	r3, [r7, #32]
 8009004:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009008:	64fb      	str	r3, [r7, #76]	; 0x4c
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	461a      	mov	r2, r3
 8009010:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009012:	633b      	str	r3, [r7, #48]	; 0x30
 8009014:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009016:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009018:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800901a:	e841 2300 	strex	r3, r2, [r1]
 800901e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009022:	2b00      	cmp	r3, #0
 8009024:	d1e6      	bne.n	8008ff4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	3308      	adds	r3, #8
 800902c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800902e:	693b      	ldr	r3, [r7, #16]
 8009030:	e853 3f00 	ldrex	r3, [r3]
 8009034:	60fb      	str	r3, [r7, #12]
   return(result);
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	f023 0301 	bic.w	r3, r3, #1
 800903c:	64bb      	str	r3, [r7, #72]	; 0x48
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	3308      	adds	r3, #8
 8009044:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009046:	61fa      	str	r2, [r7, #28]
 8009048:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800904a:	69b9      	ldr	r1, [r7, #24]
 800904c:	69fa      	ldr	r2, [r7, #28]
 800904e:	e841 2300 	strex	r3, r2, [r1]
 8009052:	617b      	str	r3, [r7, #20]
   return(result);
 8009054:	697b      	ldr	r3, [r7, #20]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d1e5      	bne.n	8009026 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2220      	movs	r2, #32
 800905e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2200      	movs	r2, #0
 8009066:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800906a:	2303      	movs	r3, #3
 800906c:	e012      	b.n	8009094 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2220      	movs	r2, #32
 8009072:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2220      	movs	r2, #32
 800907a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2200      	movs	r2, #0
 8009082:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2200      	movs	r2, #0
 8009088:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2200      	movs	r2, #0
 800908e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009092:	2300      	movs	r3, #0
}
 8009094:	4618      	mov	r0, r3
 8009096:	3758      	adds	r7, #88	; 0x58
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}

0800909c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b084      	sub	sp, #16
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	60f8      	str	r0, [r7, #12]
 80090a4:	60b9      	str	r1, [r7, #8]
 80090a6:	603b      	str	r3, [r7, #0]
 80090a8:	4613      	mov	r3, r2
 80090aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80090ac:	e049      	b.n	8009142 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80090ae:	69bb      	ldr	r3, [r7, #24]
 80090b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090b4:	d045      	beq.n	8009142 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80090b6:	f7fc f809 	bl	80050cc <HAL_GetTick>
 80090ba:	4602      	mov	r2, r0
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	1ad3      	subs	r3, r2, r3
 80090c0:	69ba      	ldr	r2, [r7, #24]
 80090c2:	429a      	cmp	r2, r3
 80090c4:	d302      	bcc.n	80090cc <UART_WaitOnFlagUntilTimeout+0x30>
 80090c6:	69bb      	ldr	r3, [r7, #24]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d101      	bne.n	80090d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80090cc:	2303      	movs	r3, #3
 80090ce:	e048      	b.n	8009162 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f003 0304 	and.w	r3, r3, #4
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d031      	beq.n	8009142 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	69db      	ldr	r3, [r3, #28]
 80090e4:	f003 0308 	and.w	r3, r3, #8
 80090e8:	2b08      	cmp	r3, #8
 80090ea:	d110      	bne.n	800910e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	2208      	movs	r2, #8
 80090f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80090f4:	68f8      	ldr	r0, [r7, #12]
 80090f6:	f000 f99c 	bl	8009432 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	2208      	movs	r2, #8
 80090fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	2200      	movs	r2, #0
 8009106:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800910a:	2301      	movs	r3, #1
 800910c:	e029      	b.n	8009162 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	69db      	ldr	r3, [r3, #28]
 8009114:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009118:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800911c:	d111      	bne.n	8009142 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009126:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009128:	68f8      	ldr	r0, [r7, #12]
 800912a:	f000 f982 	bl	8009432 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	2220      	movs	r2, #32
 8009132:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	2200      	movs	r2, #0
 800913a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800913e:	2303      	movs	r3, #3
 8009140:	e00f      	b.n	8009162 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	69da      	ldr	r2, [r3, #28]
 8009148:	68bb      	ldr	r3, [r7, #8]
 800914a:	4013      	ands	r3, r2
 800914c:	68ba      	ldr	r2, [r7, #8]
 800914e:	429a      	cmp	r2, r3
 8009150:	bf0c      	ite	eq
 8009152:	2301      	moveq	r3, #1
 8009154:	2300      	movne	r3, #0
 8009156:	b2db      	uxtb	r3, r3
 8009158:	461a      	mov	r2, r3
 800915a:	79fb      	ldrb	r3, [r7, #7]
 800915c:	429a      	cmp	r2, r3
 800915e:	d0a6      	beq.n	80090ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009160:	2300      	movs	r3, #0
}
 8009162:	4618      	mov	r0, r3
 8009164:	3710      	adds	r7, #16
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}
	...

0800916c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800916c:	b480      	push	{r7}
 800916e:	b0a3      	sub	sp, #140	; 0x8c
 8009170:	af00      	add	r7, sp, #0
 8009172:	60f8      	str	r0, [r7, #12]
 8009174:	60b9      	str	r1, [r7, #8]
 8009176:	4613      	mov	r3, r2
 8009178:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	68ba      	ldr	r2, [r7, #8]
 800917e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	88fa      	ldrh	r2, [r7, #6]
 8009184:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	88fa      	ldrh	r2, [r7, #6]
 800918c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	2200      	movs	r2, #0
 8009194:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	689b      	ldr	r3, [r3, #8]
 800919a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800919e:	d10e      	bne.n	80091be <UART_Start_Receive_IT+0x52>
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	691b      	ldr	r3, [r3, #16]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d105      	bne.n	80091b4 <UART_Start_Receive_IT+0x48>
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	f240 12ff 	movw	r2, #511	; 0x1ff
 80091ae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80091b2:	e02d      	b.n	8009210 <UART_Start_Receive_IT+0xa4>
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	22ff      	movs	r2, #255	; 0xff
 80091b8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80091bc:	e028      	b.n	8009210 <UART_Start_Receive_IT+0xa4>
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	689b      	ldr	r3, [r3, #8]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d10d      	bne.n	80091e2 <UART_Start_Receive_IT+0x76>
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	691b      	ldr	r3, [r3, #16]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d104      	bne.n	80091d8 <UART_Start_Receive_IT+0x6c>
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	22ff      	movs	r2, #255	; 0xff
 80091d2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80091d6:	e01b      	b.n	8009210 <UART_Start_Receive_IT+0xa4>
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	227f      	movs	r2, #127	; 0x7f
 80091dc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80091e0:	e016      	b.n	8009210 <UART_Start_Receive_IT+0xa4>
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	689b      	ldr	r3, [r3, #8]
 80091e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80091ea:	d10d      	bne.n	8009208 <UART_Start_Receive_IT+0x9c>
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	691b      	ldr	r3, [r3, #16]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d104      	bne.n	80091fe <UART_Start_Receive_IT+0x92>
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	227f      	movs	r2, #127	; 0x7f
 80091f8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80091fc:	e008      	b.n	8009210 <UART_Start_Receive_IT+0xa4>
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	223f      	movs	r2, #63	; 0x3f
 8009202:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009206:	e003      	b.n	8009210 <UART_Start_Receive_IT+0xa4>
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	2200      	movs	r2, #0
 800920c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	2200      	movs	r2, #0
 8009214:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	2222      	movs	r2, #34	; 0x22
 800921c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	3308      	adds	r3, #8
 8009226:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009228:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800922a:	e853 3f00 	ldrex	r3, [r3]
 800922e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009230:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009232:	f043 0301 	orr.w	r3, r3, #1
 8009236:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	3308      	adds	r3, #8
 8009240:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8009244:	673a      	str	r2, [r7, #112]	; 0x70
 8009246:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009248:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800924a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800924c:	e841 2300 	strex	r3, r2, [r1]
 8009250:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8009252:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009254:	2b00      	cmp	r3, #0
 8009256:	d1e3      	bne.n	8009220 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800925c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009260:	d14f      	bne.n	8009302 <UART_Start_Receive_IT+0x196>
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009268:	88fa      	ldrh	r2, [r7, #6]
 800926a:	429a      	cmp	r2, r3
 800926c:	d349      	bcc.n	8009302 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	689b      	ldr	r3, [r3, #8]
 8009272:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009276:	d107      	bne.n	8009288 <UART_Start_Receive_IT+0x11c>
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	691b      	ldr	r3, [r3, #16]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d103      	bne.n	8009288 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	4a47      	ldr	r2, [pc, #284]	; (80093a0 <UART_Start_Receive_IT+0x234>)
 8009284:	675a      	str	r2, [r3, #116]	; 0x74
 8009286:	e002      	b.n	800928e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	4a46      	ldr	r2, [pc, #280]	; (80093a4 <UART_Start_Receive_IT+0x238>)
 800928c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	691b      	ldr	r3, [r3, #16]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d01a      	beq.n	80092cc <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800929c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800929e:	e853 3f00 	ldrex	r3, [r3]
 80092a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80092a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80092aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	461a      	mov	r2, r3
 80092b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80092b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80092ba:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092bc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80092be:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80092c0:	e841 2300 	strex	r3, r2, [r1]
 80092c4:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80092c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d1e4      	bne.n	8009296 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	3308      	adds	r3, #8
 80092d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092d6:	e853 3f00 	ldrex	r3, [r3]
 80092da:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80092dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80092e2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	3308      	adds	r3, #8
 80092ea:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80092ec:	64ba      	str	r2, [r7, #72]	; 0x48
 80092ee:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092f0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80092f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80092f4:	e841 2300 	strex	r3, r2, [r1]
 80092f8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80092fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d1e5      	bne.n	80092cc <UART_Start_Receive_IT+0x160>
 8009300:	e046      	b.n	8009390 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	689b      	ldr	r3, [r3, #8]
 8009306:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800930a:	d107      	bne.n	800931c <UART_Start_Receive_IT+0x1b0>
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	691b      	ldr	r3, [r3, #16]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d103      	bne.n	800931c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	4a24      	ldr	r2, [pc, #144]	; (80093a8 <UART_Start_Receive_IT+0x23c>)
 8009318:	675a      	str	r2, [r3, #116]	; 0x74
 800931a:	e002      	b.n	8009322 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	4a23      	ldr	r2, [pc, #140]	; (80093ac <UART_Start_Receive_IT+0x240>)
 8009320:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	691b      	ldr	r3, [r3, #16]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d019      	beq.n	800935e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009332:	e853 3f00 	ldrex	r3, [r3]
 8009336:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800933a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800933e:	677b      	str	r3, [r7, #116]	; 0x74
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	461a      	mov	r2, r3
 8009346:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009348:	637b      	str	r3, [r7, #52]	; 0x34
 800934a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800934c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800934e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009350:	e841 2300 	strex	r3, r2, [r1]
 8009354:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009358:	2b00      	cmp	r3, #0
 800935a:	d1e6      	bne.n	800932a <UART_Start_Receive_IT+0x1be>
 800935c:	e018      	b.n	8009390 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009364:	697b      	ldr	r3, [r7, #20]
 8009366:	e853 3f00 	ldrex	r3, [r3]
 800936a:	613b      	str	r3, [r7, #16]
   return(result);
 800936c:	693b      	ldr	r3, [r7, #16]
 800936e:	f043 0320 	orr.w	r3, r3, #32
 8009372:	67bb      	str	r3, [r7, #120]	; 0x78
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	461a      	mov	r2, r3
 800937a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800937c:	623b      	str	r3, [r7, #32]
 800937e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009380:	69f9      	ldr	r1, [r7, #28]
 8009382:	6a3a      	ldr	r2, [r7, #32]
 8009384:	e841 2300 	strex	r3, r2, [r1]
 8009388:	61bb      	str	r3, [r7, #24]
   return(result);
 800938a:	69bb      	ldr	r3, [r7, #24]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d1e6      	bne.n	800935e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8009390:	2300      	movs	r3, #0
}
 8009392:	4618      	mov	r0, r3
 8009394:	378c      	adds	r7, #140	; 0x8c
 8009396:	46bd      	mov	sp, r7
 8009398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939c:	4770      	bx	lr
 800939e:	bf00      	nop
 80093a0:	08009d89 	.word	0x08009d89
 80093a4:	08009a29 	.word	0x08009a29
 80093a8:	08009871 	.word	0x08009871
 80093ac:	080096b9 	.word	0x080096b9

080093b0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80093b0:	b480      	push	{r7}
 80093b2:	b08f      	sub	sp, #60	; 0x3c
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093be:	6a3b      	ldr	r3, [r7, #32]
 80093c0:	e853 3f00 	ldrex	r3, [r3]
 80093c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80093c6:	69fb      	ldr	r3, [r7, #28]
 80093c8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80093cc:	637b      	str	r3, [r7, #52]	; 0x34
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	461a      	mov	r2, r3
 80093d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80093d8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80093dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80093de:	e841 2300 	strex	r3, r2, [r1]
 80093e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80093e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d1e6      	bne.n	80093b8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	3308      	adds	r3, #8
 80093f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	e853 3f00 	ldrex	r3, [r3]
 80093f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80093fa:	68bb      	ldr	r3, [r7, #8]
 80093fc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8009400:	633b      	str	r3, [r7, #48]	; 0x30
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	3308      	adds	r3, #8
 8009408:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800940a:	61ba      	str	r2, [r7, #24]
 800940c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800940e:	6979      	ldr	r1, [r7, #20]
 8009410:	69ba      	ldr	r2, [r7, #24]
 8009412:	e841 2300 	strex	r3, r2, [r1]
 8009416:	613b      	str	r3, [r7, #16]
   return(result);
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d1e5      	bne.n	80093ea <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2220      	movs	r2, #32
 8009422:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8009426:	bf00      	nop
 8009428:	373c      	adds	r7, #60	; 0x3c
 800942a:	46bd      	mov	sp, r7
 800942c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009430:	4770      	bx	lr

08009432 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009432:	b480      	push	{r7}
 8009434:	b095      	sub	sp, #84	; 0x54
 8009436:	af00      	add	r7, sp, #0
 8009438:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009442:	e853 3f00 	ldrex	r3, [r3]
 8009446:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800944a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800944e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	461a      	mov	r2, r3
 8009456:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009458:	643b      	str	r3, [r7, #64]	; 0x40
 800945a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800945c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800945e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009460:	e841 2300 	strex	r3, r2, [r1]
 8009464:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009468:	2b00      	cmp	r3, #0
 800946a:	d1e6      	bne.n	800943a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	3308      	adds	r3, #8
 8009472:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009474:	6a3b      	ldr	r3, [r7, #32]
 8009476:	e853 3f00 	ldrex	r3, [r3]
 800947a:	61fb      	str	r3, [r7, #28]
   return(result);
 800947c:	69fb      	ldr	r3, [r7, #28]
 800947e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009482:	f023 0301 	bic.w	r3, r3, #1
 8009486:	64bb      	str	r3, [r7, #72]	; 0x48
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	3308      	adds	r3, #8
 800948e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009490:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009492:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009494:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009496:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009498:	e841 2300 	strex	r3, r2, [r1]
 800949c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800949e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d1e3      	bne.n	800946c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094a8:	2b01      	cmp	r3, #1
 80094aa:	d118      	bne.n	80094de <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	e853 3f00 	ldrex	r3, [r3]
 80094b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	f023 0310 	bic.w	r3, r3, #16
 80094c0:	647b      	str	r3, [r7, #68]	; 0x44
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	461a      	mov	r2, r3
 80094c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094ca:	61bb      	str	r3, [r7, #24]
 80094cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ce:	6979      	ldr	r1, [r7, #20]
 80094d0:	69ba      	ldr	r2, [r7, #24]
 80094d2:	e841 2300 	strex	r3, r2, [r1]
 80094d6:	613b      	str	r3, [r7, #16]
   return(result);
 80094d8:	693b      	ldr	r3, [r7, #16]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d1e6      	bne.n	80094ac <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2220      	movs	r2, #32
 80094e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2200      	movs	r2, #0
 80094ea:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2200      	movs	r2, #0
 80094f0:	675a      	str	r2, [r3, #116]	; 0x74
}
 80094f2:	bf00      	nop
 80094f4:	3754      	adds	r7, #84	; 0x54
 80094f6:	46bd      	mov	sp, r7
 80094f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fc:	4770      	bx	lr

080094fe <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80094fe:	b580      	push	{r7, lr}
 8009500:	b090      	sub	sp, #64	; 0x40
 8009502:	af00      	add	r7, sp, #0
 8009504:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800950a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f003 0320 	and.w	r3, r3, #32
 8009516:	2b00      	cmp	r3, #0
 8009518:	d137      	bne.n	800958a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800951a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800951c:	2200      	movs	r2, #0
 800951e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009522:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	3308      	adds	r3, #8
 8009528:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800952a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800952c:	e853 3f00 	ldrex	r3, [r3]
 8009530:	623b      	str	r3, [r7, #32]
   return(result);
 8009532:	6a3b      	ldr	r3, [r7, #32]
 8009534:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009538:	63bb      	str	r3, [r7, #56]	; 0x38
 800953a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	3308      	adds	r3, #8
 8009540:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009542:	633a      	str	r2, [r7, #48]	; 0x30
 8009544:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009546:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009548:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800954a:	e841 2300 	strex	r3, r2, [r1]
 800954e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009552:	2b00      	cmp	r3, #0
 8009554:	d1e5      	bne.n	8009522 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009556:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800955c:	693b      	ldr	r3, [r7, #16]
 800955e:	e853 3f00 	ldrex	r3, [r3]
 8009562:	60fb      	str	r3, [r7, #12]
   return(result);
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800956a:	637b      	str	r3, [r7, #52]	; 0x34
 800956c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	461a      	mov	r2, r3
 8009572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009574:	61fb      	str	r3, [r7, #28]
 8009576:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009578:	69b9      	ldr	r1, [r7, #24]
 800957a:	69fa      	ldr	r2, [r7, #28]
 800957c:	e841 2300 	strex	r3, r2, [r1]
 8009580:	617b      	str	r3, [r7, #20]
   return(result);
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d1e6      	bne.n	8009556 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009588:	e002      	b.n	8009590 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800958a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800958c:	f7f9 fa6a 	bl	8002a64 <HAL_UART_TxCpltCallback>
}
 8009590:	bf00      	nop
 8009592:	3740      	adds	r7, #64	; 0x40
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}

08009598 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b084      	sub	sp, #16
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095a4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80095a6:	68f8      	ldr	r0, [r7, #12]
 80095a8:	f7ff f9e4 	bl	8008974 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80095ac:	bf00      	nop
 80095ae:	3710      	adds	r7, #16
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}

080095b4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b086      	sub	sp, #24
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095c0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095c8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80095ca:	697b      	ldr	r3, [r7, #20]
 80095cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095d0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80095d2:	697b      	ldr	r3, [r7, #20]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	689b      	ldr	r3, [r3, #8]
 80095d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095dc:	2b80      	cmp	r3, #128	; 0x80
 80095de:	d109      	bne.n	80095f4 <UART_DMAError+0x40>
 80095e0:	693b      	ldr	r3, [r7, #16]
 80095e2:	2b21      	cmp	r3, #33	; 0x21
 80095e4:	d106      	bne.n	80095f4 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80095e6:	697b      	ldr	r3, [r7, #20]
 80095e8:	2200      	movs	r2, #0
 80095ea:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80095ee:	6978      	ldr	r0, [r7, #20]
 80095f0:	f7ff fede 	bl	80093b0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80095f4:	697b      	ldr	r3, [r7, #20]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	689b      	ldr	r3, [r3, #8]
 80095fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095fe:	2b40      	cmp	r3, #64	; 0x40
 8009600:	d109      	bne.n	8009616 <UART_DMAError+0x62>
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	2b22      	cmp	r3, #34	; 0x22
 8009606:	d106      	bne.n	8009616 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009608:	697b      	ldr	r3, [r7, #20]
 800960a:	2200      	movs	r2, #0
 800960c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8009610:	6978      	ldr	r0, [r7, #20]
 8009612:	f7ff ff0e 	bl	8009432 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800961c:	f043 0210 	orr.w	r2, r3, #16
 8009620:	697b      	ldr	r3, [r7, #20]
 8009622:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009626:	6978      	ldr	r0, [r7, #20]
 8009628:	f7ff f9ae 	bl	8008988 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800962c:	bf00      	nop
 800962e:	3718      	adds	r7, #24
 8009630:	46bd      	mov	sp, r7
 8009632:	bd80      	pop	{r7, pc}

08009634 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b084      	sub	sp, #16
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009640:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	2200      	movs	r2, #0
 8009646:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	2200      	movs	r2, #0
 800964e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009652:	68f8      	ldr	r0, [r7, #12]
 8009654:	f7ff f998 	bl	8008988 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009658:	bf00      	nop
 800965a:	3710      	adds	r7, #16
 800965c:	46bd      	mov	sp, r7
 800965e:	bd80      	pop	{r7, pc}

08009660 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b088      	sub	sp, #32
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	e853 3f00 	ldrex	r3, [r3]
 8009674:	60bb      	str	r3, [r7, #8]
   return(result);
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800967c:	61fb      	str	r3, [r7, #28]
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	461a      	mov	r2, r3
 8009684:	69fb      	ldr	r3, [r7, #28]
 8009686:	61bb      	str	r3, [r7, #24]
 8009688:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800968a:	6979      	ldr	r1, [r7, #20]
 800968c:	69ba      	ldr	r2, [r7, #24]
 800968e:	e841 2300 	strex	r3, r2, [r1]
 8009692:	613b      	str	r3, [r7, #16]
   return(result);
 8009694:	693b      	ldr	r3, [r7, #16]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d1e6      	bne.n	8009668 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2220      	movs	r2, #32
 800969e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2200      	movs	r2, #0
 80096a6:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80096a8:	6878      	ldr	r0, [r7, #4]
 80096aa:	f7f9 f9db 	bl	8002a64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80096ae:	bf00      	nop
 80096b0:	3720      	adds	r7, #32
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}
	...

080096b8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b09c      	sub	sp, #112	; 0x70
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80096c6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80096d0:	2b22      	cmp	r3, #34	; 0x22
 80096d2:	f040 80be 	bne.w	8009852 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096dc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80096e0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80096e4:	b2d9      	uxtb	r1, r3
 80096e6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80096ea:	b2da      	uxtb	r2, r3
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096f0:	400a      	ands	r2, r1
 80096f2:	b2d2      	uxtb	r2, r2
 80096f4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096fa:	1c5a      	adds	r2, r3, #1
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009706:	b29b      	uxth	r3, r3
 8009708:	3b01      	subs	r3, #1
 800970a:	b29a      	uxth	r2, r3
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009718:	b29b      	uxth	r3, r3
 800971a:	2b00      	cmp	r3, #0
 800971c:	f040 80a1 	bne.w	8009862 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009726:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009728:	e853 3f00 	ldrex	r3, [r3]
 800972c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800972e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009730:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009734:	66bb      	str	r3, [r7, #104]	; 0x68
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	461a      	mov	r2, r3
 800973c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800973e:	65bb      	str	r3, [r7, #88]	; 0x58
 8009740:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009742:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009744:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009746:	e841 2300 	strex	r3, r2, [r1]
 800974a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800974c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800974e:	2b00      	cmp	r3, #0
 8009750:	d1e6      	bne.n	8009720 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	3308      	adds	r3, #8
 8009758:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800975a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800975c:	e853 3f00 	ldrex	r3, [r3]
 8009760:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009764:	f023 0301 	bic.w	r3, r3, #1
 8009768:	667b      	str	r3, [r7, #100]	; 0x64
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	3308      	adds	r3, #8
 8009770:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009772:	647a      	str	r2, [r7, #68]	; 0x44
 8009774:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009776:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009778:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800977a:	e841 2300 	strex	r3, r2, [r1]
 800977e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009780:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009782:	2b00      	cmp	r3, #0
 8009784:	d1e5      	bne.n	8009752 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	2220      	movs	r2, #32
 800978a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2200      	movs	r2, #0
 8009792:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2200      	movs	r2, #0
 8009798:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	4a33      	ldr	r2, [pc, #204]	; (800986c <UART_RxISR_8BIT+0x1b4>)
 80097a0:	4293      	cmp	r3, r2
 80097a2:	d01f      	beq.n	80097e4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	685b      	ldr	r3, [r3, #4]
 80097aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d018      	beq.n	80097e4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ba:	e853 3f00 	ldrex	r3, [r3]
 80097be:	623b      	str	r3, [r7, #32]
   return(result);
 80097c0:	6a3b      	ldr	r3, [r7, #32]
 80097c2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80097c6:	663b      	str	r3, [r7, #96]	; 0x60
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	461a      	mov	r2, r3
 80097ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80097d0:	633b      	str	r3, [r7, #48]	; 0x30
 80097d2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80097d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097d8:	e841 2300 	strex	r3, r2, [r1]
 80097dc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80097de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d1e6      	bne.n	80097b2 <UART_RxISR_8BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097e8:	2b01      	cmp	r3, #1
 80097ea:	d12e      	bne.n	800984a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2200      	movs	r2, #0
 80097f0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097f8:	693b      	ldr	r3, [r7, #16]
 80097fa:	e853 3f00 	ldrex	r3, [r3]
 80097fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	f023 0310 	bic.w	r3, r3, #16
 8009806:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	461a      	mov	r2, r3
 800980e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009810:	61fb      	str	r3, [r7, #28]
 8009812:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009814:	69b9      	ldr	r1, [r7, #24]
 8009816:	69fa      	ldr	r2, [r7, #28]
 8009818:	e841 2300 	strex	r3, r2, [r1]
 800981c:	617b      	str	r3, [r7, #20]
   return(result);
 800981e:	697b      	ldr	r3, [r7, #20]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d1e6      	bne.n	80097f2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	69db      	ldr	r3, [r3, #28]
 800982a:	f003 0310 	and.w	r3, r3, #16
 800982e:	2b10      	cmp	r3, #16
 8009830:	d103      	bne.n	800983a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	2210      	movs	r2, #16
 8009838:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009840:	4619      	mov	r1, r3
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f7ff f8aa 	bl	800899c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009848:	e00b      	b.n	8009862 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	f7f9 f8dc 	bl	8002a08 <HAL_UART_RxCpltCallback>
}
 8009850:	e007      	b.n	8009862 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	699a      	ldr	r2, [r3, #24]
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f042 0208 	orr.w	r2, r2, #8
 8009860:	619a      	str	r2, [r3, #24]
}
 8009862:	bf00      	nop
 8009864:	3770      	adds	r7, #112	; 0x70
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}
 800986a:	bf00      	nop
 800986c:	40008000 	.word	0x40008000

08009870 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b09c      	sub	sp, #112	; 0x70
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800987e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009888:	2b22      	cmp	r3, #34	; 0x22
 800988a:	f040 80be 	bne.w	8009a0a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009894:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800989c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800989e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80098a2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80098a6:	4013      	ands	r3, r2
 80098a8:	b29a      	uxth	r2, r3
 80098aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80098ac:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098b2:	1c9a      	adds	r2, r3, #2
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80098be:	b29b      	uxth	r3, r3
 80098c0:	3b01      	subs	r3, #1
 80098c2:	b29a      	uxth	r2, r3
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80098d0:	b29b      	uxth	r3, r3
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	f040 80a1 	bne.w	8009a1a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098e0:	e853 3f00 	ldrex	r3, [r3]
 80098e4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80098e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80098ec:	667b      	str	r3, [r7, #100]	; 0x64
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	461a      	mov	r2, r3
 80098f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80098f6:	657b      	str	r3, [r7, #84]	; 0x54
 80098f8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098fa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80098fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80098fe:	e841 2300 	strex	r3, r2, [r1]
 8009902:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009904:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009906:	2b00      	cmp	r3, #0
 8009908:	d1e6      	bne.n	80098d8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	3308      	adds	r3, #8
 8009910:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009914:	e853 3f00 	ldrex	r3, [r3]
 8009918:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800991a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800991c:	f023 0301 	bic.w	r3, r3, #1
 8009920:	663b      	str	r3, [r7, #96]	; 0x60
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	3308      	adds	r3, #8
 8009928:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800992a:	643a      	str	r2, [r7, #64]	; 0x40
 800992c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800992e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009930:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009932:	e841 2300 	strex	r3, r2, [r1]
 8009936:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800993a:	2b00      	cmp	r3, #0
 800993c:	d1e5      	bne.n	800990a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2220      	movs	r2, #32
 8009942:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	2200      	movs	r2, #0
 800994a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2200      	movs	r2, #0
 8009950:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	4a33      	ldr	r2, [pc, #204]	; (8009a24 <UART_RxISR_16BIT+0x1b4>)
 8009958:	4293      	cmp	r3, r2
 800995a:	d01f      	beq.n	800999c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	685b      	ldr	r3, [r3, #4]
 8009962:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009966:	2b00      	cmp	r3, #0
 8009968:	d018      	beq.n	800999c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009970:	6a3b      	ldr	r3, [r7, #32]
 8009972:	e853 3f00 	ldrex	r3, [r3]
 8009976:	61fb      	str	r3, [r7, #28]
   return(result);
 8009978:	69fb      	ldr	r3, [r7, #28]
 800997a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800997e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	461a      	mov	r2, r3
 8009986:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009988:	62fb      	str	r3, [r7, #44]	; 0x2c
 800998a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800998c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800998e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009990:	e841 2300 	strex	r3, r2, [r1]
 8009994:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009998:	2b00      	cmp	r3, #0
 800999a:	d1e6      	bne.n	800996a <UART_RxISR_16BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80099a0:	2b01      	cmp	r3, #1
 80099a2:	d12e      	bne.n	8009a02 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2200      	movs	r2, #0
 80099a8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	e853 3f00 	ldrex	r3, [r3]
 80099b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80099b8:	68bb      	ldr	r3, [r7, #8]
 80099ba:	f023 0310 	bic.w	r3, r3, #16
 80099be:	65bb      	str	r3, [r7, #88]	; 0x58
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	461a      	mov	r2, r3
 80099c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80099c8:	61bb      	str	r3, [r7, #24]
 80099ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099cc:	6979      	ldr	r1, [r7, #20]
 80099ce:	69ba      	ldr	r2, [r7, #24]
 80099d0:	e841 2300 	strex	r3, r2, [r1]
 80099d4:	613b      	str	r3, [r7, #16]
   return(result);
 80099d6:	693b      	ldr	r3, [r7, #16]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d1e6      	bne.n	80099aa <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	69db      	ldr	r3, [r3, #28]
 80099e2:	f003 0310 	and.w	r3, r3, #16
 80099e6:	2b10      	cmp	r3, #16
 80099e8:	d103      	bne.n	80099f2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	2210      	movs	r2, #16
 80099f0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80099f8:	4619      	mov	r1, r3
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	f7fe ffce 	bl	800899c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009a00:	e00b      	b.n	8009a1a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f7f9 f800 	bl	8002a08 <HAL_UART_RxCpltCallback>
}
 8009a08:	e007      	b.n	8009a1a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	699a      	ldr	r2, [r3, #24]
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	f042 0208 	orr.w	r2, r2, #8
 8009a18:	619a      	str	r2, [r3, #24]
}
 8009a1a:	bf00      	nop
 8009a1c:	3770      	adds	r7, #112	; 0x70
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd80      	pop	{r7, pc}
 8009a22:	bf00      	nop
 8009a24:	40008000 	.word	0x40008000

08009a28 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b0ac      	sub	sp, #176	; 0xb0
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009a36:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	69db      	ldr	r3, [r3, #28]
 8009a40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	689b      	ldr	r3, [r3, #8]
 8009a54:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a5e:	2b22      	cmp	r3, #34	; 0x22
 8009a60:	f040 8182 	bne.w	8009d68 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009a6a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009a6e:	e125      	b.n	8009cbc <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a76:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009a7a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8009a7e:	b2d9      	uxtb	r1, r3
 8009a80:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009a84:	b2da      	uxtb	r2, r3
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a8a:	400a      	ands	r2, r1
 8009a8c:	b2d2      	uxtb	r2, r2
 8009a8e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a94:	1c5a      	adds	r2, r3, #1
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009aa0:	b29b      	uxth	r3, r3
 8009aa2:	3b01      	subs	r3, #1
 8009aa4:	b29a      	uxth	r2, r3
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	69db      	ldr	r3, [r3, #28]
 8009ab2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009ab6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009aba:	f003 0307 	and.w	r3, r3, #7
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d053      	beq.n	8009b6a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009ac2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009ac6:	f003 0301 	and.w	r3, r3, #1
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d011      	beq.n	8009af2 <UART_RxISR_8BIT_FIFOEN+0xca>
 8009ace:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d00b      	beq.n	8009af2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	2201      	movs	r2, #1
 8009ae0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ae8:	f043 0201 	orr.w	r2, r3, #1
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009af2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009af6:	f003 0302 	and.w	r3, r3, #2
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d011      	beq.n	8009b22 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009afe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009b02:	f003 0301 	and.w	r3, r3, #1
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d00b      	beq.n	8009b22 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	2202      	movs	r2, #2
 8009b10:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b18:	f043 0204 	orr.w	r2, r3, #4
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009b22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009b26:	f003 0304 	and.w	r3, r3, #4
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d011      	beq.n	8009b52 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009b2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009b32:	f003 0301 	and.w	r3, r3, #1
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d00b      	beq.n	8009b52 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	2204      	movs	r2, #4
 8009b40:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b48:	f043 0202 	orr.w	r2, r3, #2
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d006      	beq.n	8009b6a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	f7fe ff13 	bl	8008988 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2200      	movs	r2, #0
 8009b66:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009b70:	b29b      	uxth	r3, r3
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	f040 80a2 	bne.w	8009cbc <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009b80:	e853 3f00 	ldrex	r3, [r3]
 8009b84:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8009b86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009b8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	461a      	mov	r2, r3
 8009b96:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009b9a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009b9c:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b9e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8009ba0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009ba2:	e841 2300 	strex	r3, r2, [r1]
 8009ba6:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8009ba8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d1e4      	bne.n	8009b78 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	3308      	adds	r3, #8
 8009bb4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009bb8:	e853 3f00 	ldrex	r3, [r3]
 8009bbc:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8009bbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009bc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009bc4:	f023 0301 	bic.w	r3, r3, #1
 8009bc8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	3308      	adds	r3, #8
 8009bd2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009bd6:	66ba      	str	r2, [r7, #104]	; 0x68
 8009bd8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bda:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009bdc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009bde:	e841 2300 	strex	r3, r2, [r1]
 8009be2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009be4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d1e1      	bne.n	8009bae <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2220      	movs	r2, #32
 8009bee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	4a5f      	ldr	r2, [pc, #380]	; (8009d80 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8009c04:	4293      	cmp	r3, r2
 8009c06:	d021      	beq.n	8009c4c <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	685b      	ldr	r3, [r3, #4]
 8009c0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d01a      	beq.n	8009c4c <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c1e:	e853 3f00 	ldrex	r3, [r3]
 8009c22:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009c24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c26:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009c2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	461a      	mov	r2, r3
 8009c34:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009c38:	657b      	str	r3, [r7, #84]	; 0x54
 8009c3a:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c3c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009c3e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009c40:	e841 2300 	strex	r3, r2, [r1]
 8009c44:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009c46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d1e4      	bne.n	8009c16 <UART_RxISR_8BIT_FIFOEN+0x1ee>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c50:	2b01      	cmp	r3, #1
 8009c52:	d130      	bne.n	8009cb6 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2200      	movs	r2, #0
 8009c58:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c62:	e853 3f00 	ldrex	r3, [r3]
 8009c66:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c6a:	f023 0310 	bic.w	r3, r3, #16
 8009c6e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	461a      	mov	r2, r3
 8009c78:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009c7c:	643b      	str	r3, [r7, #64]	; 0x40
 8009c7e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c80:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009c82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009c84:	e841 2300 	strex	r3, r2, [r1]
 8009c88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d1e4      	bne.n	8009c5a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	69db      	ldr	r3, [r3, #28]
 8009c96:	f003 0310 	and.w	r3, r3, #16
 8009c9a:	2b10      	cmp	r3, #16
 8009c9c:	d103      	bne.n	8009ca6 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	2210      	movs	r2, #16
 8009ca4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009cac:	4619      	mov	r1, r3
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	f7fe fe74 	bl	800899c <HAL_UARTEx_RxEventCallback>
 8009cb4:	e002      	b.n	8009cbc <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f7f8 fea6 	bl	8002a08 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009cbc:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d006      	beq.n	8009cd2 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8009cc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009cc8:	f003 0320 	and.w	r3, r3, #32
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	f47f aecf 	bne.w	8009a70 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009cd8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009cdc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d049      	beq.n	8009d78 <UART_RxISR_8BIT_FIFOEN+0x350>
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009cea:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8009cee:	429a      	cmp	r2, r3
 8009cf0:	d242      	bcs.n	8009d78 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	3308      	adds	r3, #8
 8009cf8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cfa:	6a3b      	ldr	r3, [r7, #32]
 8009cfc:	e853 3f00 	ldrex	r3, [r3]
 8009d00:	61fb      	str	r3, [r7, #28]
   return(result);
 8009d02:	69fb      	ldr	r3, [r7, #28]
 8009d04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009d08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	3308      	adds	r3, #8
 8009d12:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8009d16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009d18:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009d1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d1e:	e841 2300 	strex	r3, r2, [r1]
 8009d22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d1e3      	bne.n	8009cf2 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	4a15      	ldr	r2, [pc, #84]	; (8009d84 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8009d2e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	e853 3f00 	ldrex	r3, [r3]
 8009d3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8009d3e:	68bb      	ldr	r3, [r7, #8]
 8009d40:	f043 0320 	orr.w	r3, r3, #32
 8009d44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	461a      	mov	r2, r3
 8009d4e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009d52:	61bb      	str	r3, [r7, #24]
 8009d54:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d56:	6979      	ldr	r1, [r7, #20]
 8009d58:	69ba      	ldr	r2, [r7, #24]
 8009d5a:	e841 2300 	strex	r3, r2, [r1]
 8009d5e:	613b      	str	r3, [r7, #16]
   return(result);
 8009d60:	693b      	ldr	r3, [r7, #16]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d1e4      	bne.n	8009d30 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009d66:	e007      	b.n	8009d78 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	699a      	ldr	r2, [r3, #24]
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	f042 0208 	orr.w	r2, r2, #8
 8009d76:	619a      	str	r2, [r3, #24]
}
 8009d78:	bf00      	nop
 8009d7a:	37b0      	adds	r7, #176	; 0xb0
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	bd80      	pop	{r7, pc}
 8009d80:	40008000 	.word	0x40008000
 8009d84:	080096b9 	.word	0x080096b9

08009d88 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b0ae      	sub	sp, #184	; 0xb8
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009d96:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	69db      	ldr	r3, [r3, #28]
 8009da0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	689b      	ldr	r3, [r3, #8]
 8009db4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009dbe:	2b22      	cmp	r3, #34	; 0x22
 8009dc0:	f040 8186 	bne.w	800a0d0 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009dca:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009dce:	e129      	b.n	800a024 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dd6:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dde:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8009de2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8009de6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8009dea:	4013      	ands	r3, r2
 8009dec:	b29a      	uxth	r2, r3
 8009dee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009df2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009df8:	1c9a      	adds	r2, r3, #2
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009e04:	b29b      	uxth	r3, r3
 8009e06:	3b01      	subs	r3, #1
 8009e08:	b29a      	uxth	r2, r3
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	69db      	ldr	r3, [r3, #28]
 8009e16:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009e1a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009e1e:	f003 0307 	and.w	r3, r3, #7
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d053      	beq.n	8009ece <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009e26:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009e2a:	f003 0301 	and.w	r3, r3, #1
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d011      	beq.n	8009e56 <UART_RxISR_16BIT_FIFOEN+0xce>
 8009e32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d00b      	beq.n	8009e56 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	2201      	movs	r2, #1
 8009e44:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e4c:	f043 0201 	orr.w	r2, r3, #1
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009e56:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009e5a:	f003 0302 	and.w	r3, r3, #2
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d011      	beq.n	8009e86 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009e62:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009e66:	f003 0301 	and.w	r3, r3, #1
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d00b      	beq.n	8009e86 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	2202      	movs	r2, #2
 8009e74:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e7c:	f043 0204 	orr.w	r2, r3, #4
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009e86:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009e8a:	f003 0304 	and.w	r3, r3, #4
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d011      	beq.n	8009eb6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009e92:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009e96:	f003 0301 	and.w	r3, r3, #1
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d00b      	beq.n	8009eb6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	2204      	movs	r2, #4
 8009ea4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009eac:	f043 0202 	orr.w	r2, r3, #2
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d006      	beq.n	8009ece <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009ec0:	6878      	ldr	r0, [r7, #4]
 8009ec2:	f7fe fd61 	bl	8008988 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2200      	movs	r2, #0
 8009eca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009ed4:	b29b      	uxth	r3, r3
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	f040 80a4 	bne.w	800a024 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ee2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009ee4:	e853 3f00 	ldrex	r3, [r3]
 8009ee8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009eea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009eec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009ef0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	461a      	mov	r2, r3
 8009efa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009efe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009f02:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f04:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009f06:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009f0a:	e841 2300 	strex	r3, r2, [r1]
 8009f0e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009f10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d1e2      	bne.n	8009edc <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	3308      	adds	r3, #8
 8009f1c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009f20:	e853 3f00 	ldrex	r3, [r3]
 8009f24:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009f26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009f28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009f2c:	f023 0301 	bic.w	r3, r3, #1
 8009f30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	3308      	adds	r3, #8
 8009f3a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8009f3e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009f40:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f42:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009f44:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009f46:	e841 2300 	strex	r3, r2, [r1]
 8009f4a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009f4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d1e1      	bne.n	8009f16 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2220      	movs	r2, #32
 8009f56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2200      	movs	r2, #0
 8009f64:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	4a5f      	ldr	r2, [pc, #380]	; (800a0e8 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8009f6c:	4293      	cmp	r3, r2
 8009f6e:	d021      	beq.n	8009fb4 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	685b      	ldr	r3, [r3, #4]
 8009f76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d01a      	beq.n	8009fb4 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f86:	e853 3f00 	ldrex	r3, [r3]
 8009f8a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009f8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f8e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009f92:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	461a      	mov	r2, r3
 8009f9c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009fa0:	65bb      	str	r3, [r7, #88]	; 0x58
 8009fa2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fa4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009fa6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009fa8:	e841 2300 	strex	r3, r2, [r1]
 8009fac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009fae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d1e4      	bne.n	8009f7e <UART_RxISR_16BIT_FIFOEN+0x1f6>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009fb8:	2b01      	cmp	r3, #1
 8009fba:	d130      	bne.n	800a01e <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fca:	e853 3f00 	ldrex	r3, [r3]
 8009fce:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009fd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fd2:	f023 0310 	bic.w	r3, r3, #16
 8009fd6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	461a      	mov	r2, r3
 8009fe0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009fe4:	647b      	str	r3, [r7, #68]	; 0x44
 8009fe6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fe8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009fea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009fec:	e841 2300 	strex	r3, r2, [r1]
 8009ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009ff2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d1e4      	bne.n	8009fc2 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	69db      	ldr	r3, [r3, #28]
 8009ffe:	f003 0310 	and.w	r3, r3, #16
 800a002:	2b10      	cmp	r3, #16
 800a004:	d103      	bne.n	800a00e <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	2210      	movs	r2, #16
 800a00c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a014:	4619      	mov	r1, r3
 800a016:	6878      	ldr	r0, [r7, #4]
 800a018:	f7fe fcc0 	bl	800899c <HAL_UARTEx_RxEventCallback>
 800a01c:	e002      	b.n	800a024 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a01e:	6878      	ldr	r0, [r7, #4]
 800a020:	f7f8 fcf2 	bl	8002a08 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a024:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d006      	beq.n	800a03a <UART_RxISR_16BIT_FIFOEN+0x2b2>
 800a02c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a030:	f003 0320 	and.w	r3, r3, #32
 800a034:	2b00      	cmp	r3, #0
 800a036:	f47f aecb 	bne.w	8009dd0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a040:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a044:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d049      	beq.n	800a0e0 <UART_RxISR_16BIT_FIFOEN+0x358>
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a052:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800a056:	429a      	cmp	r2, r3
 800a058:	d242      	bcs.n	800a0e0 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	3308      	adds	r3, #8
 800a060:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a064:	e853 3f00 	ldrex	r3, [r3]
 800a068:	623b      	str	r3, [r7, #32]
   return(result);
 800a06a:	6a3b      	ldr	r3, [r7, #32]
 800a06c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a070:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	3308      	adds	r3, #8
 800a07a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a07e:	633a      	str	r2, [r7, #48]	; 0x30
 800a080:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a082:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a084:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a086:	e841 2300 	strex	r3, r2, [r1]
 800a08a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a08c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d1e3      	bne.n	800a05a <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	4a15      	ldr	r2, [pc, #84]	; (800a0ec <UART_RxISR_16BIT_FIFOEN+0x364>)
 800a096:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a09e:	693b      	ldr	r3, [r7, #16]
 800a0a0:	e853 3f00 	ldrex	r3, [r3]
 800a0a4:	60fb      	str	r3, [r7, #12]
   return(result);
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	f043 0320 	orr.w	r3, r3, #32
 800a0ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	461a      	mov	r2, r3
 800a0b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a0ba:	61fb      	str	r3, [r7, #28]
 800a0bc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0be:	69b9      	ldr	r1, [r7, #24]
 800a0c0:	69fa      	ldr	r2, [r7, #28]
 800a0c2:	e841 2300 	strex	r3, r2, [r1]
 800a0c6:	617b      	str	r3, [r7, #20]
   return(result);
 800a0c8:	697b      	ldr	r3, [r7, #20]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d1e4      	bne.n	800a098 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a0ce:	e007      	b.n	800a0e0 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	699a      	ldr	r2, [r3, #24]
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	f042 0208 	orr.w	r2, r2, #8
 800a0de:	619a      	str	r2, [r3, #24]
}
 800a0e0:	bf00      	nop
 800a0e2:	37b8      	adds	r7, #184	; 0xb8
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}
 800a0e8:	40008000 	.word	0x40008000
 800a0ec:	08009871 	.word	0x08009871

0800a0f0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a0f0:	b480      	push	{r7}
 800a0f2:	b083      	sub	sp, #12
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a0f8:	bf00      	nop
 800a0fa:	370c      	adds	r7, #12
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a102:	4770      	bx	lr

0800a104 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a104:	b480      	push	{r7}
 800a106:	b083      	sub	sp, #12
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a10c:	bf00      	nop
 800a10e:	370c      	adds	r7, #12
 800a110:	46bd      	mov	sp, r7
 800a112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a116:	4770      	bx	lr

0800a118 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a118:	b480      	push	{r7}
 800a11a:	b083      	sub	sp, #12
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a120:	bf00      	nop
 800a122:	370c      	adds	r7, #12
 800a124:	46bd      	mov	sp, r7
 800a126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12a:	4770      	bx	lr

0800a12c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a12c:	b480      	push	{r7}
 800a12e:	b085      	sub	sp, #20
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a13a:	2b01      	cmp	r3, #1
 800a13c:	d101      	bne.n	800a142 <HAL_UARTEx_DisableFifoMode+0x16>
 800a13e:	2302      	movs	r3, #2
 800a140:	e027      	b.n	800a192 <HAL_UARTEx_DisableFifoMode+0x66>
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2201      	movs	r2, #1
 800a146:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2224      	movs	r2, #36	; 0x24
 800a14e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	681a      	ldr	r2, [r3, #0]
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	f022 0201 	bic.w	r2, r2, #1
 800a168:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a170:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2200      	movs	r2, #0
 800a176:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	68fa      	ldr	r2, [r7, #12]
 800a17e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2220      	movs	r2, #32
 800a184:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2200      	movs	r2, #0
 800a18c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a190:	2300      	movs	r3, #0
}
 800a192:	4618      	mov	r0, r3
 800a194:	3714      	adds	r7, #20
 800a196:	46bd      	mov	sp, r7
 800a198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19c:	4770      	bx	lr

0800a19e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a19e:	b580      	push	{r7, lr}
 800a1a0:	b084      	sub	sp, #16
 800a1a2:	af00      	add	r7, sp, #0
 800a1a4:	6078      	str	r0, [r7, #4]
 800a1a6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a1ae:	2b01      	cmp	r3, #1
 800a1b0:	d101      	bne.n	800a1b6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a1b2:	2302      	movs	r3, #2
 800a1b4:	e02d      	b.n	800a212 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2201      	movs	r2, #1
 800a1ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	2224      	movs	r2, #36	; 0x24
 800a1c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	681a      	ldr	r2, [r3, #0]
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	f022 0201 	bic.w	r2, r2, #1
 800a1dc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	689b      	ldr	r3, [r3, #8]
 800a1e4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	683a      	ldr	r2, [r7, #0]
 800a1ee:	430a      	orrs	r2, r1
 800a1f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a1f2:	6878      	ldr	r0, [r7, #4]
 800a1f4:	f000 f850 	bl	800a298 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	68fa      	ldr	r2, [r7, #12]
 800a1fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2220      	movs	r2, #32
 800a204:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2200      	movs	r2, #0
 800a20c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a210:	2300      	movs	r3, #0
}
 800a212:	4618      	mov	r0, r3
 800a214:	3710      	adds	r7, #16
 800a216:	46bd      	mov	sp, r7
 800a218:	bd80      	pop	{r7, pc}

0800a21a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a21a:	b580      	push	{r7, lr}
 800a21c:	b084      	sub	sp, #16
 800a21e:	af00      	add	r7, sp, #0
 800a220:	6078      	str	r0, [r7, #4]
 800a222:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a22a:	2b01      	cmp	r3, #1
 800a22c:	d101      	bne.n	800a232 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a22e:	2302      	movs	r3, #2
 800a230:	e02d      	b.n	800a28e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2201      	movs	r2, #1
 800a236:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	2224      	movs	r2, #36	; 0x24
 800a23e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	681a      	ldr	r2, [r3, #0]
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	f022 0201 	bic.w	r2, r2, #1
 800a258:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	689b      	ldr	r3, [r3, #8]
 800a260:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	683a      	ldr	r2, [r7, #0]
 800a26a:	430a      	orrs	r2, r1
 800a26c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a26e:	6878      	ldr	r0, [r7, #4]
 800a270:	f000 f812 	bl	800a298 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	68fa      	ldr	r2, [r7, #12]
 800a27a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2220      	movs	r2, #32
 800a280:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2200      	movs	r2, #0
 800a288:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a28c:	2300      	movs	r3, #0
}
 800a28e:	4618      	mov	r0, r3
 800a290:	3710      	adds	r7, #16
 800a292:	46bd      	mov	sp, r7
 800a294:	bd80      	pop	{r7, pc}
	...

0800a298 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a298:	b480      	push	{r7}
 800a29a:	b085      	sub	sp, #20
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d108      	bne.n	800a2ba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2201      	movs	r2, #1
 800a2ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2201      	movs	r2, #1
 800a2b4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a2b8:	e031      	b.n	800a31e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a2ba:	2308      	movs	r3, #8
 800a2bc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a2be:	2308      	movs	r3, #8
 800a2c0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	689b      	ldr	r3, [r3, #8]
 800a2c8:	0e5b      	lsrs	r3, r3, #25
 800a2ca:	b2db      	uxtb	r3, r3
 800a2cc:	f003 0307 	and.w	r3, r3, #7
 800a2d0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	689b      	ldr	r3, [r3, #8]
 800a2d8:	0f5b      	lsrs	r3, r3, #29
 800a2da:	b2db      	uxtb	r3, r3
 800a2dc:	f003 0307 	and.w	r3, r3, #7
 800a2e0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a2e2:	7bbb      	ldrb	r3, [r7, #14]
 800a2e4:	7b3a      	ldrb	r2, [r7, #12]
 800a2e6:	4911      	ldr	r1, [pc, #68]	; (800a32c <UARTEx_SetNbDataToProcess+0x94>)
 800a2e8:	5c8a      	ldrb	r2, [r1, r2]
 800a2ea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a2ee:	7b3a      	ldrb	r2, [r7, #12]
 800a2f0:	490f      	ldr	r1, [pc, #60]	; (800a330 <UARTEx_SetNbDataToProcess+0x98>)
 800a2f2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a2f4:	fb93 f3f2 	sdiv	r3, r3, r2
 800a2f8:	b29a      	uxth	r2, r3
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a300:	7bfb      	ldrb	r3, [r7, #15]
 800a302:	7b7a      	ldrb	r2, [r7, #13]
 800a304:	4909      	ldr	r1, [pc, #36]	; (800a32c <UARTEx_SetNbDataToProcess+0x94>)
 800a306:	5c8a      	ldrb	r2, [r1, r2]
 800a308:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a30c:	7b7a      	ldrb	r2, [r7, #13]
 800a30e:	4908      	ldr	r1, [pc, #32]	; (800a330 <UARTEx_SetNbDataToProcess+0x98>)
 800a310:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a312:	fb93 f3f2 	sdiv	r3, r3, r2
 800a316:	b29a      	uxth	r2, r3
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a31e:	bf00      	nop
 800a320:	3714      	adds	r7, #20
 800a322:	46bd      	mov	sp, r7
 800a324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a328:	4770      	bx	lr
 800a32a:	bf00      	nop
 800a32c:	080120fc 	.word	0x080120fc
 800a330:	08012104 	.word	0x08012104

0800a334 <CRS_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t CRS_Event_Handler(void *Event)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b08a      	sub	sp, #40	; 0x28
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blecore_aci *blecore_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  CRS_STM_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 800a33c:	2300      	movs	r3, #0
 800a33e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	3301      	adds	r3, #1
 800a346:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 800a348:	6a3b      	ldr	r3, [r7, #32]
 800a34a:	781b      	ldrb	r3, [r3, #0]
 800a34c:	2bff      	cmp	r3, #255	; 0xff
 800a34e:	d14f      	bne.n	800a3f0 <CRS_Event_Handler+0xbc>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      {
        blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800a350:	6a3b      	ldr	r3, [r7, #32]
 800a352:	3302      	adds	r3, #2
 800a354:	61fb      	str	r3, [r7, #28]
        switch(blecore_evt->ecode)
 800a356:	69fb      	ldr	r3, [r7, #28]
 800a358:	881b      	ldrh	r3, [r3, #0]
 800a35a:	b29b      	uxth	r3, r3
 800a35c:	461a      	mov	r2, r3
 800a35e:	f640 4301 	movw	r3, #3073	; 0xc01
 800a362:	429a      	cmp	r2, r3
 800a364:	d140      	bne.n	800a3e8 <CRS_Event_Handler+0xb4>
        {
          case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
           {
              attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 800a366:	69fb      	ldr	r3, [r7, #28]
 800a368:	3302      	adds	r3, #2
 800a36a:	61bb      	str	r3, [r7, #24]
              if(attribute_modified->Attr_Handle == (CRSContext.CRSRXCharHdle + 2))
 800a36c:	69bb      	ldr	r3, [r7, #24]
 800a36e:	885b      	ldrh	r3, [r3, #2]
 800a370:	b29b      	uxth	r3, r3
 800a372:	461a      	mov	r2, r3
 800a374:	4b22      	ldr	r3, [pc, #136]	; (800a400 <CRS_Event_Handler+0xcc>)
 800a376:	889b      	ldrh	r3, [r3, #4]
 800a378:	3302      	adds	r3, #2
 800a37a:	429a      	cmp	r2, r3
 800a37c:	d118      	bne.n	800a3b0 <CRS_Event_Handler+0x7c>
              {
                /**
                 * Descriptor handle
                 */
                return_value = SVCCTL_EvtAckFlowEnable;
 800a37e:	2301      	movs	r3, #1
 800a380:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                /**
                 * Notify to application
                 */
                if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800a384:	69bb      	ldr	r3, [r7, #24]
 800a386:	7a1b      	ldrb	r3, [r3, #8]
 800a388:	f003 0301 	and.w	r3, r3, #1
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d007      	beq.n	800a3a0 <CRS_Event_Handler+0x6c>
                {
                  Notification.CRS_Evt_Opcode = CRS_NOTIFY_ENABLED_EVT;
 800a390:	2300      	movs	r3, #0
 800a392:	723b      	strb	r3, [r7, #8]
                  CRS_STM_Notification(&Notification);
 800a394:	f107 0308 	add.w	r3, r7, #8
 800a398:	4618      	mov	r0, r3
 800a39a:	f7fa f831 	bl	8004400 <CRS_STM_Notification>
                Notification.DataTransfered.Length = attribute_modified->Attr_Data_Length;
                Notification.DataTransfered.pPayload = attribute_modified->Attr_Data;
                CRS_STM_Notification(&Notification);  
              }            
            }
            break;
 800a39e:	e025      	b.n	800a3ec <CRS_Event_Handler+0xb8>
                  Notification.CRS_Evt_Opcode = CRS_NOTIFY_DISABLED_EVT;
 800a3a0:	2301      	movs	r3, #1
 800a3a2:	723b      	strb	r3, [r7, #8]
                  CRS_STM_Notification(&Notification);
 800a3a4:	f107 0308 	add.w	r3, r7, #8
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	f7fa f829 	bl	8004400 <CRS_STM_Notification>
            break;
 800a3ae:	e01d      	b.n	800a3ec <CRS_Event_Handler+0xb8>
              else if(attribute_modified->Attr_Handle == (CRSContext.CRSTXCharHdle + 1))
 800a3b0:	69bb      	ldr	r3, [r7, #24]
 800a3b2:	885b      	ldrh	r3, [r3, #2]
 800a3b4:	b29b      	uxth	r3, r3
 800a3b6:	461a      	mov	r2, r3
 800a3b8:	4b11      	ldr	r3, [pc, #68]	; (800a400 <CRS_Event_Handler+0xcc>)
 800a3ba:	885b      	ldrh	r3, [r3, #2]
 800a3bc:	3301      	adds	r3, #1
 800a3be:	429a      	cmp	r2, r3
 800a3c0:	d114      	bne.n	800a3ec <CRS_Event_Handler+0xb8>
                BLE_DBG_CRS_STM_MSG("-- GATT : RX\n");
 800a3c2:	4810      	ldr	r0, [pc, #64]	; (800a404 <CRS_Event_Handler+0xd0>)
 800a3c4:	f004 f986 	bl	800e6d4 <puts>
                Notification.CRS_Evt_Opcode = CRS_WRITE_EVT;
 800a3c8:	2303      	movs	r3, #3
 800a3ca:	723b      	strb	r3, [r7, #8]
                Notification.DataTransfered.Length = attribute_modified->Attr_Data_Length;
 800a3cc:	69bb      	ldr	r3, [r7, #24]
 800a3ce:	88db      	ldrh	r3, [r3, #6]
 800a3d0:	b29b      	uxth	r3, r3
 800a3d2:	b2db      	uxtb	r3, r3
 800a3d4:	743b      	strb	r3, [r7, #16]
                Notification.DataTransfered.pPayload = attribute_modified->Attr_Data;
 800a3d6:	69bb      	ldr	r3, [r7, #24]
 800a3d8:	3308      	adds	r3, #8
 800a3da:	60fb      	str	r3, [r7, #12]
                CRS_STM_Notification(&Notification);  
 800a3dc:	f107 0308 	add.w	r3, r7, #8
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	f7fa f80d 	bl	8004400 <CRS_STM_Notification>
            break;
 800a3e6:	e001      	b.n	800a3ec <CRS_Event_Handler+0xb8>

          default:
            break;
 800a3e8:	bf00      	nop
 800a3ea:	e002      	b.n	800a3f2 <CRS_Event_Handler+0xbe>
            break;
 800a3ec:	bf00      	nop
        }
      }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800a3ee:	e000      	b.n	800a3f2 <CRS_Event_Handler+0xbe>

    default:
      break;
 800a3f0:	bf00      	nop
  }

  return(return_value);
 800a3f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end CRS_Event_Handler */
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	3728      	adds	r7, #40	; 0x28
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bd80      	pop	{r7, pc}
 800a3fe:	bf00      	nop
 800a400:	2000020c 	.word	0x2000020c
 800a404:	08011a8c 	.word	0x08011a8c

0800a408 <CRS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void CRS_STM_Init(void)
{
 800a408:	b590      	push	{r4, r7, lr}
 800a40a:	b099      	sub	sp, #100	; 0x64
 800a40c:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid;
  tBleStatus hciCmdResult = BLE_STATUS_SUCCESS;
 800a40e:	2300      	movs	r3, #0
 800a410:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint8_t service_uuid[] = { CRS_STM_UUID128 }; 
 800a414:	4b94      	ldr	r3, [pc, #592]	; (800a668 <CRS_STM_Init+0x260>)
 800a416:	f107 0424 	add.w	r4, r7, #36	; 0x24
 800a41a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a41c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint8_t rx_uuid[]      = { CRS_STM_RX_UUID128 }; 
 800a420:	4b92      	ldr	r3, [pc, #584]	; (800a66c <CRS_STM_Init+0x264>)
 800a422:	f107 0414 	add.w	r4, r7, #20
 800a426:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a428:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint8_t tx_uuid[]      = { CRS_STM_TX_UUID128 }; 
 800a42c:	4b90      	ldr	r3, [pc, #576]	; (800a670 <CRS_STM_Init+0x268>)
 800a42e:	1d3c      	adds	r4, r7, #4
 800a430:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a432:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(CRS_Event_Handler);
 800a436:	488f      	ldr	r0, [pc, #572]	; (800a674 <CRS_STM_Init+0x26c>)
 800a438:	f000 fa12 	bl	800a860 <SVCCTL_RegisterSvcHandler>
   *                                2 for CRS TX characteristic +
   *                                2 for CRS RX characteristic +
   *                                1 for client char configuration descriptor
   *                                
   */
  COPY_CRS_UUID(uuid.Char_UUID_128, service_uuid);
 800a43c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a440:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 800a444:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a448:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800a44c:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800a450:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800a454:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800a458:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800a45c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a460:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 800a464:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a468:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800a46c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800a470:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 800a474:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a478:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a47c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a480:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 800a484:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800a488:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 800a48c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800a490:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800a494:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a498:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800a49c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a4a0:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 800a4a4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a4a8:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 800a4ac:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800a4b0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a4b4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a4b8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  hciCmdResult = aci_gatt_add_service(
 800a4bc:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800a4c0:	4b6d      	ldr	r3, [pc, #436]	; (800a678 <CRS_STM_Init+0x270>)
 800a4c2:	9300      	str	r3, [sp, #0]
 800a4c4:	2306      	movs	r3, #6
 800a4c6:	2201      	movs	r2, #1
 800a4c8:	2002      	movs	r0, #2
 800a4ca:	f000 ff13 	bl	800b2f4 <aci_gatt_add_service>
 800a4ce:	4603      	mov	r3, r0
 800a4d0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                                      (Service_UUID_t *) &uuid,
                                      PRIMARY_SERVICE,
                                      6,
                                      &(CRSContext.SvcHdle));

  if (hciCmdResult == BLE_STATUS_SUCCESS)
 800a4d4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d106      	bne.n	800a4ea <CRS_STM_Init+0xe2>
  {
    BLE_DBG_CRS_STM_MSG("Cable Replacement (CR) Service is added Successfully 0x%02X\n", 
                 CRSContext.SvcHdle);
 800a4dc:	4b66      	ldr	r3, [pc, #408]	; (800a678 <CRS_STM_Init+0x270>)
 800a4de:	881b      	ldrh	r3, [r3, #0]
    BLE_DBG_CRS_STM_MSG("Cable Replacement (CR) Service is added Successfully 0x%02X\n", 
 800a4e0:	4619      	mov	r1, r3
 800a4e2:	4866      	ldr	r0, [pc, #408]	; (800a67c <CRS_STM_Init+0x274>)
 800a4e4:	f004 f890 	bl	800e608 <iprintf>
 800a4e8:	e005      	b.n	800a4f6 <CRS_STM_Init+0xee>
  }
  else 
  {
    BLE_DBG_CRS_STM_MSG ("FAILED to add Cable Replacement (CR) Service, Error: 0x%02X !!\n", 
 800a4ea:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a4ee:	4619      	mov	r1, r3
 800a4f0:	4863      	ldr	r0, [pc, #396]	; (800a680 <CRS_STM_Init+0x278>)
 800a4f2:	f004 f889 	bl	800e608 <iprintf>
  }

  /**
   *  Add TX Characteristic
   */
  COPY_CRS_UUID(uuid.Char_UUID_128, tx_uuid);
 800a4f6:	7cfb      	ldrb	r3, [r7, #19]
 800a4f8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 800a4fc:	7cbb      	ldrb	r3, [r7, #18]
 800a4fe:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800a502:	7c7b      	ldrb	r3, [r7, #17]
 800a504:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800a508:	7c3b      	ldrb	r3, [r7, #16]
 800a50a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800a50e:	7bfb      	ldrb	r3, [r7, #15]
 800a510:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 800a514:	7bbb      	ldrb	r3, [r7, #14]
 800a516:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800a51a:	7b7b      	ldrb	r3, [r7, #13]
 800a51c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 800a520:	7b3b      	ldrb	r3, [r7, #12]
 800a522:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a526:	7afb      	ldrb	r3, [r7, #11]
 800a528:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 800a52c:	7abb      	ldrb	r3, [r7, #10]
 800a52e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 800a532:	7a7b      	ldrb	r3, [r7, #9]
 800a534:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800a538:	7a3b      	ldrb	r3, [r7, #8]
 800a53a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800a53e:	79fb      	ldrb	r3, [r7, #7]
 800a540:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 800a544:	79bb      	ldrb	r3, [r7, #6]
 800a546:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 800a54a:	797b      	ldrb	r3, [r7, #5]
 800a54c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a550:	793b      	ldrb	r3, [r7, #4]
 800a552:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  hciCmdResult = aci_gatt_add_char(
 800a556:	4b48      	ldr	r3, [pc, #288]	; (800a678 <CRS_STM_Init+0x270>)
 800a558:	8818      	ldrh	r0, [r3, #0]
 800a55a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800a55e:	4b49      	ldr	r3, [pc, #292]	; (800a684 <CRS_STM_Init+0x27c>)
 800a560:	9305      	str	r3, [sp, #20]
 800a562:	2301      	movs	r3, #1
 800a564:	9304      	str	r3, [sp, #16]
 800a566:	230a      	movs	r3, #10
 800a568:	9303      	str	r3, [sp, #12]
 800a56a:	2301      	movs	r3, #1
 800a56c:	9302      	str	r3, [sp, #8]
 800a56e:	2300      	movs	r3, #0
 800a570:	9301      	str	r3, [sp, #4]
 800a572:	2306      	movs	r3, #6
 800a574:	9300      	str	r3, [sp, #0]
 800a576:	2314      	movs	r3, #20
 800a578:	2102      	movs	r1, #2
 800a57a:	f000 ff91 	bl	800b4a0 <aci_gatt_add_char>
 800a57e:	4603      	mov	r3, r0
 800a580:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                                   GATT_NOTIFY_ATTRIBUTE_WRITE, /* gattEvtMask */
                                   10, /* encryKeySize */
                                   1, /* isVariable */
                                   &(CRSContext.CRSTXCharHdle));

  if (hciCmdResult == BLE_STATUS_SUCCESS)
 800a584:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d106      	bne.n	800a59a <CRS_STM_Init+0x192>
  {
    BLE_DBG_CRS_STM_MSG("TX Characteristic is added Successfully 0x%02X\n", 
                        CRSContext.CRSTXCharHdle);
 800a58c:	4b3a      	ldr	r3, [pc, #232]	; (800a678 <CRS_STM_Init+0x270>)
 800a58e:	885b      	ldrh	r3, [r3, #2]
    BLE_DBG_CRS_STM_MSG("TX Characteristic is added Successfully 0x%02X\n", 
 800a590:	4619      	mov	r1, r3
 800a592:	483d      	ldr	r0, [pc, #244]	; (800a688 <CRS_STM_Init+0x280>)
 800a594:	f004 f838 	bl	800e608 <iprintf>
 800a598:	e005      	b.n	800a5a6 <CRS_STM_Init+0x19e>
  }
  else 
  {
    BLE_DBG_CRS_STM_MSG ("FAILED to add TX Characteristic, Error: 0x%02X !!\n", 
 800a59a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a59e:	4619      	mov	r1, r3
 800a5a0:	483a      	ldr	r0, [pc, #232]	; (800a68c <CRS_STM_Init+0x284>)
 800a5a2:	f004 f831 	bl	800e608 <iprintf>
  }

  /**
   *   Add RX Characteristic
   */
  COPY_CRS_UUID(uuid.Char_UUID_128, rx_uuid);
 800a5a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a5aa:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 800a5ae:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a5b2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800a5b6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800a5ba:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800a5be:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a5c2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800a5c6:	7ffb      	ldrb	r3, [r7, #31]
 800a5c8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 800a5cc:	7fbb      	ldrb	r3, [r7, #30]
 800a5ce:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800a5d2:	7f7b      	ldrb	r3, [r7, #29]
 800a5d4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 800a5d8:	7f3b      	ldrb	r3, [r7, #28]
 800a5da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a5de:	7efb      	ldrb	r3, [r7, #27]
 800a5e0:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 800a5e4:	7ebb      	ldrb	r3, [r7, #26]
 800a5e6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 800a5ea:	7e7b      	ldrb	r3, [r7, #25]
 800a5ec:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800a5f0:	7e3b      	ldrb	r3, [r7, #24]
 800a5f2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800a5f6:	7dfb      	ldrb	r3, [r7, #23]
 800a5f8:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 800a5fc:	7dbb      	ldrb	r3, [r7, #22]
 800a5fe:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 800a602:	7d7b      	ldrb	r3, [r7, #21]
 800a604:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a608:	7d3b      	ldrb	r3, [r7, #20]
 800a60a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  hciCmdResult = aci_gatt_add_char(CRSContext.SvcHdle,
 800a60e:	4b1a      	ldr	r3, [pc, #104]	; (800a678 <CRS_STM_Init+0x270>)
 800a610:	8818      	ldrh	r0, [r3, #0]
 800a612:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800a616:	4b1e      	ldr	r3, [pc, #120]	; (800a690 <CRS_STM_Init+0x288>)
 800a618:	9305      	str	r3, [sp, #20]
 800a61a:	2301      	movs	r3, #1
 800a61c:	9304      	str	r3, [sp, #16]
 800a61e:	230a      	movs	r3, #10
 800a620:	9303      	str	r3, [sp, #12]
 800a622:	2301      	movs	r3, #1
 800a624:	9302      	str	r3, [sp, #8]
 800a626:	2300      	movs	r3, #0
 800a628:	9301      	str	r3, [sp, #4]
 800a62a:	2312      	movs	r3, #18
 800a62c:	9300      	str	r3, [sp, #0]
 800a62e:	2314      	movs	r3, #20
 800a630:	2102      	movs	r1, #2
 800a632:	f000 ff35 	bl	800b4a0 <aci_gatt_add_char>
 800a636:	4603      	mov	r3, r0
 800a638:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                                   ATTR_PERMISSION_NONE,
                                   GATT_NOTIFY_ATTRIBUTE_WRITE, /* gattEvtMask */
                                   10, /* encryKeySize */
                                   1, /* isVariable: 1 */
                                   &(CRSContext.CRSRXCharHdle));    
  if (hciCmdResult == BLE_STATUS_SUCCESS)
 800a63c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a640:	2b00      	cmp	r3, #0
 800a642:	d106      	bne.n	800a652 <CRS_STM_Init+0x24a>
  {
    BLE_DBG_CRS_STM_MSG("RX Characteristic is added Successfully 0x%02X\n", 
                        CRSContext.CRSRXCharHdle);
 800a644:	4b0c      	ldr	r3, [pc, #48]	; (800a678 <CRS_STM_Init+0x270>)
 800a646:	889b      	ldrh	r3, [r3, #4]
    BLE_DBG_CRS_STM_MSG("RX Characteristic is added Successfully 0x%02X\n", 
 800a648:	4619      	mov	r1, r3
 800a64a:	4812      	ldr	r0, [pc, #72]	; (800a694 <CRS_STM_Init+0x28c>)
 800a64c:	f003 ffdc 	bl	800e608 <iprintf>
  {
    BLE_DBG_CRS_STM_MSG ("FAILED to add RX Characteristic, Error: 0x%02X !!\n", 
                 hciCmdResult);
  }

  return;
 800a650:	e006      	b.n	800a660 <CRS_STM_Init+0x258>
    BLE_DBG_CRS_STM_MSG ("FAILED to add RX Characteristic, Error: 0x%02X !!\n", 
 800a652:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a656:	4619      	mov	r1, r3
 800a658:	480f      	ldr	r0, [pc, #60]	; (800a698 <CRS_STM_Init+0x290>)
 800a65a:	f003 ffd5 	bl	800e608 <iprintf>
  return;
 800a65e:	bf00      	nop
}
 800a660:	374c      	adds	r7, #76	; 0x4c
 800a662:	46bd      	mov	sp, r7
 800a664:	bd90      	pop	{r4, r7, pc}
 800a666:	bf00      	nop
 800a668:	08011be4 	.word	0x08011be4
 800a66c:	08011bf4 	.word	0x08011bf4
 800a670:	08011c04 	.word	0x08011c04
 800a674:	0800a335 	.word	0x0800a335
 800a678:	2000020c 	.word	0x2000020c
 800a67c:	08011a9c 	.word	0x08011a9c
 800a680:	08011adc 	.word	0x08011adc
 800a684:	2000020e 	.word	0x2000020e
 800a688:	08011b1c 	.word	0x08011b1c
 800a68c:	08011b4c 	.word	0x08011b4c
 800a690:	20000210 	.word	0x20000210
 800a694:	08011b80 	.word	0x08011b80
 800a698:	08011bb0 	.word	0x08011bb0

0800a69c <CRS_STM_Update_Char_Len>:

  return result;
}/* end CRS_STM_Update_Char() */

tBleStatus CRS_STM_Update_Char_Len(uint16_t UUID,  uint8_t *p_Payload, size_t len)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b088      	sub	sp, #32
 800a6a0:	af02      	add	r7, sp, #8
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	60b9      	str	r1, [r7, #8]
 800a6a6:	607a      	str	r2, [r7, #4]
 800a6a8:	81fb      	strh	r3, [r7, #14]
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 800a6aa:	2392      	movs	r3, #146	; 0x92
 800a6ac:	75fb      	strb	r3, [r7, #23]
  switch(UUID)
 800a6ae:	89fb      	ldrh	r3, [r7, #14]
 800a6b0:	f64f 6262 	movw	r2, #65122	; 0xfe62
 800a6b4:	4293      	cmp	r3, r2
 800a6b6:	d11a      	bne.n	800a6ee <CRS_STM_Update_Char_Len+0x52>
  {
    case CRS_RX_CHAR_UUID:
    {
      uint8_t size;

      size = 0;
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	75bb      	strb	r3, [r7, #22]
      while(p_Payload[size] != '\0')
 800a6bc:	e002      	b.n	800a6c4 <CRS_STM_Update_Char_Len+0x28>
      {
        size++;
 800a6be:	7dbb      	ldrb	r3, [r7, #22]
 800a6c0:	3301      	adds	r3, #1
 800a6c2:	75bb      	strb	r3, [r7, #22]
      while(p_Payload[size] != '\0')
 800a6c4:	7dbb      	ldrb	r3, [r7, #22]
 800a6c6:	68ba      	ldr	r2, [r7, #8]
 800a6c8:	4413      	add	r3, r2
 800a6ca:	781b      	ldrb	r3, [r3, #0]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d1f6      	bne.n	800a6be <CRS_STM_Update_Char_Len+0x22>
      }
      result = aci_gatt_update_char_value(CRSContext.SvcHdle,
 800a6d0:	4b0a      	ldr	r3, [pc, #40]	; (800a6fc <CRS_STM_Update_Char_Len+0x60>)
 800a6d2:	8818      	ldrh	r0, [r3, #0]
 800a6d4:	4b09      	ldr	r3, [pc, #36]	; (800a6fc <CRS_STM_Update_Char_Len+0x60>)
 800a6d6:	8899      	ldrh	r1, [r3, #4]
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	b2da      	uxtb	r2, r3
 800a6dc:	68bb      	ldr	r3, [r7, #8]
 800a6de:	9300      	str	r3, [sp, #0]
 800a6e0:	4613      	mov	r3, r2
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	f000 ffe4 	bl	800b6b0 <aci_gatt_update_char_value>
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	75fb      	strb	r3, [r7, #23]
                                          CRSContext.CRSRXCharHdle,
                                          0, /* charValOffset */
										  len/*CRS_MAX_RX_CHAR_LEN*/, /* charValueLen */
                                          (uint8_t *)  p_Payload);
    }
    break;
 800a6ec:	e000      	b.n	800a6f0 <CRS_STM_Update_Char_Len+0x54>

    default:
      break;
 800a6ee:	bf00      	nop
  }

  return result;
 800a6f0:	7dfb      	ldrb	r3, [r7, #23]
}/* end CRS_STM_Update_Char() */
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	3718      	adds	r7, #24
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bd80      	pop	{r7, pc}
 800a6fa:	bf00      	nop
 800a6fc:	2000020c 	.word	0x2000020c

0800a700 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800a700:	b480      	push	{r7}
 800a702:	af00      	add	r7, sp, #0
  return;
 800a704:	bf00      	nop
}
 800a706:	46bd      	mov	sp, r7
 800a708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70c:	4770      	bx	lr

0800a70e <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800a70e:	b480      	push	{r7}
 800a710:	af00      	add	r7, sp, #0
  return;
 800a712:	bf00      	nop
}
 800a714:	46bd      	mov	sp, r7
 800a716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71a:	4770      	bx	lr

0800a71c <DIS_Init>:
__WEAK void CRS_STM_Init( void )
{
  return;
}
__WEAK void DIS_Init( void )
{
 800a71c:	b480      	push	{r7}
 800a71e:	af00      	add	r7, sp, #0
  return;
 800a720:	bf00      	nop
}
 800a722:	46bd      	mov	sp, r7
 800a724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a728:	4770      	bx	lr

0800a72a <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 800a72a:	b480      	push	{r7}
 800a72c:	af00      	add	r7, sp, #0
  return;
 800a72e:	bf00      	nop
}
 800a730:	46bd      	mov	sp, r7
 800a732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a736:	4770      	bx	lr

0800a738 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800a738:	b480      	push	{r7}
 800a73a:	af00      	add	r7, sp, #0
  return;
 800a73c:	bf00      	nop
}
 800a73e:	46bd      	mov	sp, r7
 800a740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a744:	4770      	bx	lr

0800a746 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 800a746:	b480      	push	{r7}
 800a748:	af00      	add	r7, sp, #0
  return;
 800a74a:	bf00      	nop
}
 800a74c:	46bd      	mov	sp, r7
 800a74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a752:	4770      	bx	lr

0800a754 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 800a754:	b480      	push	{r7}
 800a756:	af00      	add	r7, sp, #0
  return;
 800a758:	bf00      	nop
}
 800a75a:	46bd      	mov	sp, r7
 800a75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a760:	4770      	bx	lr

0800a762 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800a762:	b480      	push	{r7}
 800a764:	af00      	add	r7, sp, #0
  return;
 800a766:	bf00      	nop
}
 800a768:	46bd      	mov	sp, r7
 800a76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76e:	4770      	bx	lr

0800a770 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800a770:	b480      	push	{r7}
 800a772:	af00      	add	r7, sp, #0
  return;
 800a774:	bf00      	nop
}
 800a776:	46bd      	mov	sp, r7
 800a778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77c:	4770      	bx	lr

0800a77e <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800a77e:	b480      	push	{r7}
 800a780:	af00      	add	r7, sp, #0
  return;
 800a782:	bf00      	nop
}
 800a784:	46bd      	mov	sp, r7
 800a786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78a:	4770      	bx	lr

0800a78c <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800a78c:	b480      	push	{r7}
 800a78e:	af00      	add	r7, sp, #0
  return;
 800a790:	bf00      	nop
}
 800a792:	46bd      	mov	sp, r7
 800a794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a798:	4770      	bx	lr

0800a79a <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 800a79a:	b480      	push	{r7}
 800a79c:	af00      	add	r7, sp, #0
  return;
 800a79e:	bf00      	nop
}
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a6:	4770      	bx	lr

0800a7a8 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 800a7a8:	b480      	push	{r7}
 800a7aa:	af00      	add	r7, sp, #0
  return;
 800a7ac:	bf00      	nop
}
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b4:	4770      	bx	lr

0800a7b6 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 800a7b6:	b480      	push	{r7}
 800a7b8:	af00      	add	r7, sp, #0
  return;
 800a7ba:	bf00      	nop
}
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c2:	4770      	bx	lr

0800a7c4 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800a7c4:	b480      	push	{r7}
 800a7c6:	af00      	add	r7, sp, #0
  return;
 800a7c8:	bf00      	nop
}
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d0:	4770      	bx	lr

0800a7d2 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800a7d2:	b480      	push	{r7}
 800a7d4:	af00      	add	r7, sp, #0
  return;
 800a7d6:	bf00      	nop
}
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7de:	4770      	bx	lr

0800a7e0 <SVCCTL_InitCustomSvc>:
__WEAK void SVCCTL_InitCustomSvc( void )
{
 800a7e0:	b480      	push	{r7}
 800a7e2:	af00      	add	r7, sp, #0
  return;
 800a7e4:	bf00      	nop
}
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ec:	4770      	bx	lr
	...

0800a7f0 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800a7f4:	4b04      	ldr	r3, [pc, #16]	; (800a808 <SVCCTL_Init+0x18>)
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800a7fa:	4b04      	ldr	r3, [pc, #16]	; (800a80c <SVCCTL_Init+0x1c>)
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	711a      	strb	r2, [r3, #4]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800a800:	f000 f806 	bl	800a810 <SVCCTL_SvcInit>

  return;
 800a804:	bf00      	nop
}
 800a806:	bd80      	pop	{r7, pc}
 800a808:	20000214 	.word	0x20000214
 800a80c:	20000234 	.word	0x20000234

0800a810 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	af00      	add	r7, sp, #0
  BAS_Init();
 800a814:	f7ff ff74 	bl	800a700 <BAS_Init>

  BLS_Init();
 800a818:	f7ff ff79 	bl	800a70e <BLS_Init>

  CRS_STM_Init();
 800a81c:	f7ff fdf4 	bl	800a408 <CRS_STM_Init>

  DIS_Init();
 800a820:	f7ff ff7c 	bl	800a71c <DIS_Init>

  EDS_STM_Init();
 800a824:	f7ff ff81 	bl	800a72a <EDS_STM_Init>

  HIDS_Init();
 800a828:	f7ff ff86 	bl	800a738 <HIDS_Init>

  HRS_Init();
 800a82c:	f7ff ff8b 	bl	800a746 <HRS_Init>

  HTS_Init();
 800a830:	f7ff ff90 	bl	800a754 <HTS_Init>

  IAS_Init();
 800a834:	f7ff ff95 	bl	800a762 <IAS_Init>

  LLS_Init();
 800a838:	f7ff ff9a 	bl	800a770 <LLS_Init>

  TPS_Init();
 800a83c:	f7ff ff9f 	bl	800a77e <TPS_Init>

  MOTENV_STM_Init();
 800a840:	f7ff ffa4 	bl	800a78c <MOTENV_STM_Init>

  P2PS_STM_Init();
 800a844:	f7ff ffa9 	bl	800a79a <P2PS_STM_Init>

  ZDD_STM_Init();
 800a848:	f7ff ffae 	bl	800a7a8 <ZDD_STM_Init>

  OTAS_STM_Init();
 800a84c:	f7ff ffb3 	bl	800a7b6 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800a850:	f7ff ffbf 	bl	800a7d2 <BVOPUS_STM_Init>

  MESH_Init();
 800a854:	f7ff ffb6 	bl	800a7c4 <MESH_Init>

  SVCCTL_InitCustomSvc();
 800a858:	f7ff ffc2 	bl	800a7e0 <SVCCTL_InitCustomSvc>
  
  return;
 800a85c:	bf00      	nop
}
 800a85e:	bd80      	pop	{r7, pc}

0800a860 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800a860:	b480      	push	{r7}
 800a862:	b083      	sub	sp, #12
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800a868:	4b09      	ldr	r3, [pc, #36]	; (800a890 <SVCCTL_RegisterSvcHandler+0x30>)
 800a86a:	7f1b      	ldrb	r3, [r3, #28]
 800a86c:	4619      	mov	r1, r3
 800a86e:	4a08      	ldr	r2, [pc, #32]	; (800a890 <SVCCTL_RegisterSvcHandler+0x30>)
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800a876:	4b06      	ldr	r3, [pc, #24]	; (800a890 <SVCCTL_RegisterSvcHandler+0x30>)
 800a878:	7f1b      	ldrb	r3, [r3, #28]
 800a87a:	3301      	adds	r3, #1
 800a87c:	b2da      	uxtb	r2, r3
 800a87e:	4b04      	ldr	r3, [pc, #16]	; (800a890 <SVCCTL_RegisterSvcHandler+0x30>)
 800a880:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800a882:	bf00      	nop
}
 800a884:	370c      	adds	r7, #12
 800a886:	46bd      	mov	sp, r7
 800a888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88c:	4770      	bx	lr
 800a88e:	bf00      	nop
 800a890:	20000214 	.word	0x20000214

0800a894 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b086      	sub	sp, #24
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	3301      	adds	r3, #1
 800a8a0:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800a8a6:	693b      	ldr	r3, [r7, #16]
 800a8a8:	781b      	ldrb	r3, [r3, #0]
 800a8aa:	2bff      	cmp	r3, #255	; 0xff
 800a8ac:	d13f      	bne.n	800a92e <SVCCTL_UserEvtRx+0x9a>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800a8ae:	693b      	ldr	r3, [r7, #16]
 800a8b0:	3302      	adds	r3, #2
 800a8b2:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	881b      	ldrh	r3, [r3, #0]
 800a8b8:	b29b      	uxth	r3, r3
 800a8ba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a8be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a8c2:	d132      	bne.n	800a92a <SVCCTL_UserEvtRx+0x96>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	757b      	strb	r3, [r7, #21]
 800a8c8:	e00d      	b.n	800a8e6 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800a8ca:	7d7b      	ldrb	r3, [r7, #21]
 800a8cc:	4a27      	ldr	r2, [pc, #156]	; (800a96c <SVCCTL_UserEvtRx+0xd8>)
 800a8ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a8d2:	6878      	ldr	r0, [r7, #4]
 800a8d4:	4798      	blx	r3
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800a8da:	7dfb      	ldrb	r3, [r7, #23]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d108      	bne.n	800a8f2 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800a8e0:	7d7b      	ldrb	r3, [r7, #21]
 800a8e2:	3301      	adds	r3, #1
 800a8e4:	757b      	strb	r3, [r7, #21]
 800a8e6:	4b21      	ldr	r3, [pc, #132]	; (800a96c <SVCCTL_UserEvtRx+0xd8>)
 800a8e8:	7f1b      	ldrb	r3, [r3, #28]
 800a8ea:	7d7a      	ldrb	r2, [r7, #21]
 800a8ec:	429a      	cmp	r2, r3
 800a8ee:	d3ec      	bcc.n	800a8ca <SVCCTL_UserEvtRx+0x36>
 800a8f0:	e000      	b.n	800a8f4 <SVCCTL_UserEvtRx+0x60>
            {
              /**
               *  The event has been managed. The Event processing should be stopped
               */
              break;
 800a8f2:	bf00      	nop
            }
          }
#endif
#if (BLE_CFG_CLT_MAX_NBR_CB > 0)
          /* For Client event handler */
          event_notification_status = SVCCTL_EvtNotAck;
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	75fb      	strb	r3, [r7, #23]
          for(index = 0; index <SVCCTL_CltHandler.NbreOfRegisteredHandler; index++)
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	757b      	strb	r3, [r7, #21]
 800a8fc:	e00d      	b.n	800a91a <SVCCTL_UserEvtRx+0x86>
          {
            event_notification_status = SVCCTL_CltHandler.SVCCTL_CltHandlerTable[index](pckt);
 800a8fe:	7d7b      	ldrb	r3, [r7, #21]
 800a900:	4a1b      	ldr	r2, [pc, #108]	; (800a970 <SVCCTL_UserEvtRx+0xdc>)
 800a902:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a906:	6878      	ldr	r0, [r7, #4]
 800a908:	4798      	blx	r3
 800a90a:	4603      	mov	r3, r0
 800a90c:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Client, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Client
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800a90e:	7dfb      	ldrb	r3, [r7, #23]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d108      	bne.n	800a926 <SVCCTL_UserEvtRx+0x92>
          for(index = 0; index <SVCCTL_CltHandler.NbreOfRegisteredHandler; index++)
 800a914:	7d7b      	ldrb	r3, [r7, #21]
 800a916:	3301      	adds	r3, #1
 800a918:	757b      	strb	r3, [r7, #21]
 800a91a:	4b15      	ldr	r3, [pc, #84]	; (800a970 <SVCCTL_UserEvtRx+0xdc>)
 800a91c:	791b      	ldrb	r3, [r3, #4]
 800a91e:	7d7a      	ldrb	r2, [r7, #21]
 800a920:	429a      	cmp	r2, r3
 800a922:	d3ec      	bcc.n	800a8fe <SVCCTL_UserEvtRx+0x6a>
               */
              break;
            }
          }
#endif
          break;
 800a924:	e002      	b.n	800a92c <SVCCTL_UserEvtRx+0x98>
              break;
 800a926:	bf00      	nop
          break;
 800a928:	e000      	b.n	800a92c <SVCCTL_UserEvtRx+0x98>

        default:
          break;
 800a92a:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800a92c:	e000      	b.n	800a930 <SVCCTL_UserEvtRx+0x9c>

    default:
      break;
 800a92e:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 800a930:	7dfb      	ldrb	r3, [r7, #23]
 800a932:	2b02      	cmp	r3, #2
 800a934:	d00f      	beq.n	800a956 <SVCCTL_UserEvtRx+0xc2>
 800a936:	2b02      	cmp	r3, #2
 800a938:	dc10      	bgt.n	800a95c <SVCCTL_UserEvtRx+0xc8>
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d002      	beq.n	800a944 <SVCCTL_UserEvtRx+0xb0>
 800a93e:	2b01      	cmp	r3, #1
 800a940:	d006      	beq.n	800a950 <SVCCTL_UserEvtRx+0xbc>
 800a942:	e00b      	b.n	800a95c <SVCCTL_UserEvtRx+0xc8>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800a944:	6878      	ldr	r0, [r7, #4]
 800a946:	f7f8 febf 	bl	80036c8 <SVCCTL_App_Notification>
 800a94a:	4603      	mov	r3, r0
 800a94c:	75bb      	strb	r3, [r7, #22]
      break;
 800a94e:	e008      	b.n	800a962 <SVCCTL_UserEvtRx+0xce>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800a950:	2301      	movs	r3, #1
 800a952:	75bb      	strb	r3, [r7, #22]
      break;
 800a954:	e005      	b.n	800a962 <SVCCTL_UserEvtRx+0xce>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800a956:	2300      	movs	r3, #0
 800a958:	75bb      	strb	r3, [r7, #22]
      break;
 800a95a:	e002      	b.n	800a962 <SVCCTL_UserEvtRx+0xce>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800a95c:	2301      	movs	r3, #1
 800a95e:	75bb      	strb	r3, [r7, #22]
      break;
 800a960:	bf00      	nop
  }

  return (return_status);
 800a962:	7dbb      	ldrb	r3, [r7, #22]
}
 800a964:	4618      	mov	r0, r3
 800a966:	3718      	adds	r7, #24
 800a968:	46bd      	mov	sp, r7
 800a96a:	bd80      	pop	{r7, pc}
 800a96c:	20000214 	.word	0x20000214
 800a970:	20000234 	.word	0x20000234

0800a974 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b088      	sub	sp, #32
 800a978:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800a97a:	2300      	movs	r3, #0
 800a97c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a97e:	f107 0308 	add.w	r3, r7, #8
 800a982:	2218      	movs	r2, #24
 800a984:	2100      	movs	r1, #0
 800a986:	4618      	mov	r0, r3
 800a988:	f001 f956 	bl	800bc38 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a98c:	233f      	movs	r3, #63	; 0x3f
 800a98e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 800a990:	2381      	movs	r3, #129	; 0x81
 800a992:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800a994:	1dfb      	adds	r3, r7, #7
 800a996:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800a998:	2301      	movs	r3, #1
 800a99a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a99c:	f107 0308 	add.w	r3, r7, #8
 800a9a0:	2100      	movs	r1, #0
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	f001 fc38 	bl	800c218 <hci_send_req>
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	da01      	bge.n	800a9b2 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800a9ae:	23ff      	movs	r3, #255	; 0xff
 800a9b0:	e000      	b.n	800a9b4 <aci_gap_set_non_discoverable+0x40>
  return status;
 800a9b2:	79fb      	ldrb	r3, [r7, #7]
}
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	3720      	adds	r7, #32
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bd80      	pop	{r7, pc}

0800a9bc <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 800a9bc:	b5b0      	push	{r4, r5, r7, lr}
 800a9be:	b0ce      	sub	sp, #312	; 0x138
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	4605      	mov	r5, r0
 800a9c4:	460c      	mov	r4, r1
 800a9c6:	4610      	mov	r0, r2
 800a9c8:	4619      	mov	r1, r3
 800a9ca:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a9ce:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800a9d2:	462a      	mov	r2, r5
 800a9d4:	701a      	strb	r2, [r3, #0]
 800a9d6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a9da:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800a9de:	4622      	mov	r2, r4
 800a9e0:	801a      	strh	r2, [r3, #0]
 800a9e2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a9e6:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 800a9ea:	4602      	mov	r2, r0
 800a9ec:	801a      	strh	r2, [r3, #0]
 800a9ee:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a9f2:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800a9f6:	460a      	mov	r2, r1
 800a9f8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800a9fa:	f107 0310 	add.w	r3, r7, #16
 800a9fe:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800aa02:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800aa06:	3308      	adds	r3, #8
 800aa08:	f107 0210 	add.w	r2, r7, #16
 800aa0c:	4413      	add	r3, r2
 800aa0e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800aa12:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800aa16:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800aa1a:	4413      	add	r3, r2
 800aa1c:	3309      	adds	r3, #9
 800aa1e:	f107 0210 	add.w	r2, r7, #16
 800aa22:	4413      	add	r3, r2
 800aa24:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800aa28:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800aa2c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800aa30:	2200      	movs	r2, #0
 800aa32:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800aa34:	2300      	movs	r3, #0
 800aa36:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 800aa3a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800aa3e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800aa42:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 800aa46:	7812      	ldrb	r2, [r2, #0]
 800aa48:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800aa4a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aa4e:	3301      	adds	r3, #1
 800aa50:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 800aa54:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800aa58:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800aa5c:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800aa60:	8812      	ldrh	r2, [r2, #0]
 800aa62:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800aa66:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aa6a:	3302      	adds	r3, #2
 800aa6c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 800aa70:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800aa74:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800aa78:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 800aa7c:	8812      	ldrh	r2, [r2, #0]
 800aa7e:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800aa82:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aa86:	3302      	adds	r3, #2
 800aa88:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 800aa8c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800aa90:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800aa94:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800aa98:	7812      	ldrb	r2, [r2, #0]
 800aa9a:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800aa9c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aaa0:	3301      	adds	r3, #1
 800aaa2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 800aaa6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800aaaa:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800aaae:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800aab0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aab4:	3301      	adds	r3, #1
 800aab6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 800aaba:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800aabe:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800aac2:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800aac4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aac8:	3301      	adds	r3, #1
 800aaca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800aace:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800aad2:	3308      	adds	r3, #8
 800aad4:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800aad8:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 800aadc:	4618      	mov	r0, r3
 800aade:	f001 f89b 	bl	800bc18 <Osal_MemCpy>
    index_input += Local_Name_Length;
 800aae2:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800aae6:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800aaea:	4413      	add	r3, r2
 800aaec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 800aaf0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800aaf4:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800aaf8:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800aafa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aafe:	3301      	adds	r3, #1
 800ab00:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 800ab04:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ab08:	3301      	adds	r3, #1
 800ab0a:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800ab0e:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 800ab12:	4618      	mov	r0, r3
 800ab14:	f001 f880 	bl	800bc18 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800ab18:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800ab1c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800ab20:	4413      	add	r3, r2
 800ab22:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 800ab26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ab2a:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 800ab2e:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800ab30:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ab34:	3302      	adds	r3, #2
 800ab36:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 800ab3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ab3e:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 800ab42:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800ab44:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ab48:	3302      	adds	r3, #2
 800ab4a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ab4e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ab52:	2218      	movs	r2, #24
 800ab54:	2100      	movs	r1, #0
 800ab56:	4618      	mov	r0, r3
 800ab58:	f001 f86e 	bl	800bc38 <Osal_MemSet>
  rq.ogf = 0x3f;
 800ab5c:	233f      	movs	r3, #63	; 0x3f
 800ab5e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 800ab62:	2383      	movs	r3, #131	; 0x83
 800ab64:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800ab68:	f107 0310 	add.w	r3, r7, #16
 800ab6c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800ab70:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ab74:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800ab78:	f107 030f 	add.w	r3, r7, #15
 800ab7c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800ab80:	2301      	movs	r3, #1
 800ab82:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ab86:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ab8a:	2100      	movs	r1, #0
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	f001 fb43 	bl	800c218 <hci_send_req>
 800ab92:	4603      	mov	r3, r0
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	da01      	bge.n	800ab9c <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 800ab98:	23ff      	movs	r3, #255	; 0xff
 800ab9a:	e004      	b.n	800aba6 <aci_gap_set_discoverable+0x1ea>
  return status;
 800ab9c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800aba0:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800aba4:	781b      	ldrb	r3, [r3, #0]
}
 800aba6:	4618      	mov	r0, r3
 800aba8:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800abac:	46bd      	mov	sp, r7
 800abae:	bdb0      	pop	{r4, r5, r7, pc}

0800abb0 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b0cc      	sub	sp, #304	; 0x130
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	4602      	mov	r2, r0
 800abb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800abbc:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800abc0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800abc2:	f107 0310 	add.w	r3, r7, #16
 800abc6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800abca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800abce:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800abd2:	2200      	movs	r2, #0
 800abd4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800abd6:	2300      	movs	r3, #0
 800abd8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 800abdc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800abe0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800abe4:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800abe8:	7812      	ldrb	r2, [r2, #0]
 800abea:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800abec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800abf0:	3301      	adds	r3, #1
 800abf2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800abf6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800abfa:	2218      	movs	r2, #24
 800abfc:	2100      	movs	r1, #0
 800abfe:	4618      	mov	r0, r3
 800ac00:	f001 f81a 	bl	800bc38 <Osal_MemSet>
  rq.ogf = 0x3f;
 800ac04:	233f      	movs	r3, #63	; 0x3f
 800ac06:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 800ac0a:	2385      	movs	r3, #133	; 0x85
 800ac0c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800ac10:	f107 0310 	add.w	r3, r7, #16
 800ac14:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800ac18:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ac1c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800ac20:	f107 030f 	add.w	r3, r7, #15
 800ac24:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800ac28:	2301      	movs	r3, #1
 800ac2a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ac2e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ac32:	2100      	movs	r1, #0
 800ac34:	4618      	mov	r0, r3
 800ac36:	f001 faef 	bl	800c218 <hci_send_req>
 800ac3a:	4603      	mov	r3, r0
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	da01      	bge.n	800ac44 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 800ac40:	23ff      	movs	r3, #255	; 0xff
 800ac42:	e004      	b.n	800ac4e <aci_gap_set_io_capability+0x9e>
  return status;
 800ac44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ac48:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800ac4c:	781b      	ldrb	r3, [r3, #0]
}
 800ac4e:	4618      	mov	r0, r3
 800ac50:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800ac54:	46bd      	mov	sp, r7
 800ac56:	bd80      	pop	{r7, pc}

0800ac58 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 800ac58:	b5b0      	push	{r4, r5, r7, lr}
 800ac5a:	b0cc      	sub	sp, #304	; 0x130
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	4605      	mov	r5, r0
 800ac60:	460c      	mov	r4, r1
 800ac62:	4610      	mov	r0, r2
 800ac64:	4619      	mov	r1, r3
 800ac66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ac6a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800ac6e:	462a      	mov	r2, r5
 800ac70:	701a      	strb	r2, [r3, #0]
 800ac72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ac76:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800ac7a:	4622      	mov	r2, r4
 800ac7c:	701a      	strb	r2, [r3, #0]
 800ac7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ac82:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800ac86:	4602      	mov	r2, r0
 800ac88:	701a      	strb	r2, [r3, #0]
 800ac8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ac8e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ac92:	460a      	mov	r2, r1
 800ac94:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800ac96:	f107 0310 	add.w	r3, r7, #16
 800ac9a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800ac9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aca2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800aca6:	2200      	movs	r2, #0
 800aca8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800acaa:	2300      	movs	r3, #0
 800acac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 800acb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800acb4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800acb8:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800acbc:	7812      	ldrb	r2, [r2, #0]
 800acbe:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800acc0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800acc4:	3301      	adds	r3, #1
 800acc6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 800acca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800acce:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800acd2:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800acd6:	7812      	ldrb	r2, [r2, #0]
 800acd8:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800acda:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800acde:	3301      	adds	r3, #1
 800ace0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 800ace4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ace8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800acec:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800acf0:	7812      	ldrb	r2, [r2, #0]
 800acf2:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800acf4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800acf8:	3301      	adds	r3, #1
 800acfa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 800acfe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ad02:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800ad06:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800ad0a:	7812      	ldrb	r2, [r2, #0]
 800ad0c:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800ad0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ad12:	3301      	adds	r3, #1
 800ad14:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 800ad18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ad1c:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 800ad20:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800ad22:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ad26:	3301      	adds	r3, #1
 800ad28:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 800ad2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ad30:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 800ad34:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800ad36:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ad3a:	3301      	adds	r3, #1
 800ad3c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 800ad40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ad44:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800ad48:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800ad4a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ad4e:	3301      	adds	r3, #1
 800ad50:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 800ad54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ad58:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800ad5c:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800ad60:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ad64:	3304      	adds	r3, #4
 800ad66:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800ad6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ad6e:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800ad72:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800ad74:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ad78:	3301      	adds	r3, #1
 800ad7a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ad7e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ad82:	2218      	movs	r2, #24
 800ad84:	2100      	movs	r1, #0
 800ad86:	4618      	mov	r0, r3
 800ad88:	f000 ff56 	bl	800bc38 <Osal_MemSet>
  rq.ogf = 0x3f;
 800ad8c:	233f      	movs	r3, #63	; 0x3f
 800ad8e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 800ad92:	2386      	movs	r3, #134	; 0x86
 800ad94:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800ad98:	f107 0310 	add.w	r3, r7, #16
 800ad9c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800ada0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ada4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800ada8:	f107 030f 	add.w	r3, r7, #15
 800adac:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800adb0:	2301      	movs	r3, #1
 800adb2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800adb6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800adba:	2100      	movs	r1, #0
 800adbc:	4618      	mov	r0, r3
 800adbe:	f001 fa2b 	bl	800c218 <hci_send_req>
 800adc2:	4603      	mov	r3, r0
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	da01      	bge.n	800adcc <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 800adc8:	23ff      	movs	r3, #255	; 0xff
 800adca:	e004      	b.n	800add6 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 800adcc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800add0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800add4:	781b      	ldrb	r3, [r3, #0]
}
 800add6:	4618      	mov	r0, r3
 800add8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800addc:	46bd      	mov	sp, r7
 800adde:	bdb0      	pop	{r4, r5, r7, pc}

0800ade0 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b0cc      	sub	sp, #304	; 0x130
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	4602      	mov	r2, r0
 800ade8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800adec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800adf0:	6019      	str	r1, [r3, #0]
 800adf2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800adf6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800adfa:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 800adfc:	f107 0310 	add.w	r3, r7, #16
 800ae00:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800ae04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ae08:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800ae0c:	2200      	movs	r2, #0
 800ae0e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ae10:	2300      	movs	r3, #0
 800ae12:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800ae16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ae1a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800ae1e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800ae22:	8812      	ldrh	r2, [r2, #0]
 800ae24:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800ae26:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ae2a:	3302      	adds	r3, #2
 800ae2c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 800ae30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ae34:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800ae38:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800ae3c:	6812      	ldr	r2, [r2, #0]
 800ae3e:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 800ae42:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ae46:	3304      	adds	r3, #4
 800ae48:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ae4c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ae50:	2218      	movs	r2, #24
 800ae52:	2100      	movs	r1, #0
 800ae54:	4618      	mov	r0, r3
 800ae56:	f000 feef 	bl	800bc38 <Osal_MemSet>
  rq.ogf = 0x3f;
 800ae5a:	233f      	movs	r3, #63	; 0x3f
 800ae5c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 800ae60:	2388      	movs	r3, #136	; 0x88
 800ae62:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800ae66:	f107 0310 	add.w	r3, r7, #16
 800ae6a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800ae6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ae72:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800ae76:	f107 030f 	add.w	r3, r7, #15
 800ae7a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800ae7e:	2301      	movs	r3, #1
 800ae80:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ae84:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ae88:	2100      	movs	r1, #0
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	f001 f9c4 	bl	800c218 <hci_send_req>
 800ae90:	4603      	mov	r3, r0
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	da01      	bge.n	800ae9a <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 800ae96:	23ff      	movs	r3, #255	; 0xff
 800ae98:	e004      	b.n	800aea4 <aci_gap_pass_key_resp+0xc4>
  return status;
 800ae9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ae9e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800aea2:	781b      	ldrb	r3, [r3, #0]
}
 800aea4:	4618      	mov	r0, r3
 800aea6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	bd80      	pop	{r7, pc}

0800aeae <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800aeae:	b590      	push	{r4, r7, lr}
 800aeb0:	b0cd      	sub	sp, #308	; 0x134
 800aeb2:	af00      	add	r7, sp, #0
 800aeb4:	4604      	mov	r4, r0
 800aeb6:	4608      	mov	r0, r1
 800aeb8:	4611      	mov	r1, r2
 800aeba:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800aebe:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800aec2:	6013      	str	r3, [r2, #0]
 800aec4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aec8:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800aecc:	4622      	mov	r2, r4
 800aece:	701a      	strb	r2, [r3, #0]
 800aed0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aed4:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800aed8:	4602      	mov	r2, r0
 800aeda:	701a      	strb	r2, [r3, #0]
 800aedc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aee0:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800aee4:	460a      	mov	r2, r1
 800aee6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800aee8:	f107 0310 	add.w	r3, r7, #16
 800aeec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800aef0:	f107 0308 	add.w	r3, r7, #8
 800aef4:	2207      	movs	r2, #7
 800aef6:	2100      	movs	r1, #0
 800aef8:	4618      	mov	r0, r3
 800aefa:	f000 fe9d 	bl	800bc38 <Osal_MemSet>
  int index_input = 0;
 800aefe:	2300      	movs	r3, #0
 800af00:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 800af04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800af08:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800af0c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800af10:	7812      	ldrb	r2, [r2, #0]
 800af12:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800af14:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800af18:	3301      	adds	r3, #1
 800af1a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 800af1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800af22:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800af26:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800af2a:	7812      	ldrb	r2, [r2, #0]
 800af2c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800af2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800af32:	3301      	adds	r3, #1
 800af34:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 800af38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800af3c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800af40:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800af44:	7812      	ldrb	r2, [r2, #0]
 800af46:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800af48:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800af4c:	3301      	adds	r3, #1
 800af4e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800af52:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800af56:	2218      	movs	r2, #24
 800af58:	2100      	movs	r1, #0
 800af5a:	4618      	mov	r0, r3
 800af5c:	f000 fe6c 	bl	800bc38 <Osal_MemSet>
  rq.ogf = 0x3f;
 800af60:	233f      	movs	r3, #63	; 0x3f
 800af62:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 800af66:	238a      	movs	r3, #138	; 0x8a
 800af68:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800af6c:	f107 0310 	add.w	r3, r7, #16
 800af70:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800af74:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800af78:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800af7c:	f107 0308 	add.w	r3, r7, #8
 800af80:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800af84:	2307      	movs	r3, #7
 800af86:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800af8a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800af8e:	2100      	movs	r1, #0
 800af90:	4618      	mov	r0, r3
 800af92:	f001 f941 	bl	800c218 <hci_send_req>
 800af96:	4603      	mov	r3, r0
 800af98:	2b00      	cmp	r3, #0
 800af9a:	da01      	bge.n	800afa0 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 800af9c:	23ff      	movs	r3, #255	; 0xff
 800af9e:	e02e      	b.n	800affe <aci_gap_init+0x150>
  if ( resp.Status )
 800afa0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800afa4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800afa8:	781b      	ldrb	r3, [r3, #0]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d005      	beq.n	800afba <aci_gap_init+0x10c>
    return resp.Status;
 800afae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800afb2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800afb6:	781b      	ldrb	r3, [r3, #0]
 800afb8:	e021      	b.n	800affe <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 800afba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800afbe:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800afc2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800afc6:	b29a      	uxth	r2, r3
 800afc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800afcc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800afd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800afd8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800afdc:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800afe0:	b29a      	uxth	r2, r3
 800afe2:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800afe6:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800afe8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800afec:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800aff0:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800aff4:	b29a      	uxth	r2, r3
 800aff6:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800affa:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800affc:	2300      	movs	r3, #0
}
 800affe:	4618      	mov	r0, r3
 800b000:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800b004:	46bd      	mov	sp, r7
 800b006:	bd90      	pop	{r4, r7, pc}

0800b008 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	b0cc      	sub	sp, #304	; 0x130
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	4602      	mov	r2, r0
 800b010:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b014:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b018:	6019      	str	r1, [r3, #0]
 800b01a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b01e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800b022:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800b024:	f107 0310 	add.w	r3, r7, #16
 800b028:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b02c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b030:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800b034:	2200      	movs	r2, #0
 800b036:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b038:	2300      	movs	r3, #0
 800b03a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 800b03e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b042:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b046:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800b04a:	7812      	ldrb	r2, [r2, #0]
 800b04c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800b04e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b052:	3301      	adds	r3, #1
 800b054:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 800b058:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b05c:	1c58      	adds	r0, r3, #1
 800b05e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b062:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800b066:	781a      	ldrb	r2, [r3, #0]
 800b068:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b06c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b070:	6819      	ldr	r1, [r3, #0]
 800b072:	f000 fdd1 	bl	800bc18 <Osal_MemCpy>
  index_input += AdvDataLen;
 800b076:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b07a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800b07e:	781b      	ldrb	r3, [r3, #0]
 800b080:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800b084:	4413      	add	r3, r2
 800b086:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b08a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b08e:	2218      	movs	r2, #24
 800b090:	2100      	movs	r1, #0
 800b092:	4618      	mov	r0, r3
 800b094:	f000 fdd0 	bl	800bc38 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b098:	233f      	movs	r3, #63	; 0x3f
 800b09a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 800b09e:	238e      	movs	r3, #142	; 0x8e
 800b0a0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b0a4:	f107 0310 	add.w	r3, r7, #16
 800b0a8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b0ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b0b0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b0b4:	f107 030f 	add.w	r3, r7, #15
 800b0b8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b0bc:	2301      	movs	r3, #1
 800b0be:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b0c2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b0c6:	2100      	movs	r1, #0
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	f001 f8a5 	bl	800c218 <hci_send_req>
 800b0ce:	4603      	mov	r3, r0
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	da01      	bge.n	800b0d8 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 800b0d4:	23ff      	movs	r3, #255	; 0xff
 800b0d6:	e004      	b.n	800b0e2 <aci_gap_update_adv_data+0xda>
  return status;
 800b0d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b0dc:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800b0e0:	781b      	ldrb	r3, [r3, #0]
}
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	bd80      	pop	{r7, pc}

0800b0ec <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b088      	sub	sp, #32
 800b0f0:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b0f6:	f107 0308 	add.w	r3, r7, #8
 800b0fa:	2218      	movs	r2, #24
 800b0fc:	2100      	movs	r1, #0
 800b0fe:	4618      	mov	r0, r3
 800b100:	f000 fd9a 	bl	800bc38 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b104:	233f      	movs	r3, #63	; 0x3f
 800b106:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800b108:	2392      	movs	r3, #146	; 0x92
 800b10a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800b10c:	1dfb      	adds	r3, r7, #7
 800b10e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800b110:	2301      	movs	r3, #1
 800b112:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b114:	f107 0308 	add.w	r3, r7, #8
 800b118:	2100      	movs	r1, #0
 800b11a:	4618      	mov	r0, r3
 800b11c:	f001 f87c 	bl	800c218 <hci_send_req>
 800b120:	4603      	mov	r3, r0
 800b122:	2b00      	cmp	r3, #0
 800b124:	da01      	bge.n	800b12a <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 800b126:	23ff      	movs	r3, #255	; 0xff
 800b128:	e000      	b.n	800b12c <aci_gap_configure_filter_accept_list+0x40>
  return status;
 800b12a:	79fb      	ldrb	r3, [r7, #7]
}
 800b12c:	4618      	mov	r0, r3
 800b12e:	3720      	adds	r7, #32
 800b130:	46bd      	mov	sp, r7
 800b132:	bd80      	pop	{r7, pc}

0800b134 <aci_gap_terminate_gap_proc>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_terminate_gap_proc( uint8_t Procedure_Code )
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b0cc      	sub	sp, #304	; 0x130
 800b138:	af00      	add	r7, sp, #0
 800b13a:	4602      	mov	r2, r0
 800b13c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b140:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800b144:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_terminate_gap_proc_cp0 *cp0 = (aci_gap_terminate_gap_proc_cp0*)(cmd_buffer);
 800b146:	f107 0310 	add.w	r3, r7, #16
 800b14a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b14e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b152:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800b156:	2200      	movs	r2, #0
 800b158:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b15a:	2300      	movs	r3, #0
 800b15c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Procedure_Code = Procedure_Code;
 800b160:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b164:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b168:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800b16c:	7812      	ldrb	r2, [r2, #0]
 800b16e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800b170:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b174:	3301      	adds	r3, #1
 800b176:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b17a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b17e:	2218      	movs	r2, #24
 800b180:	2100      	movs	r1, #0
 800b182:	4618      	mov	r0, r3
 800b184:	f000 fd58 	bl	800bc38 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b188:	233f      	movs	r3, #63	; 0x3f
 800b18a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x09d;
 800b18e:	239d      	movs	r3, #157	; 0x9d
 800b190:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b194:	f107 0310 	add.w	r3, r7, #16
 800b198:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b19c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b1a0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b1a4:	f107 030f 	add.w	r3, r7, #15
 800b1a8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b1ac:	2301      	movs	r3, #1
 800b1ae:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b1b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b1b6:	2100      	movs	r1, #0
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	f001 f82d 	bl	800c218 <hci_send_req>
 800b1be:	4603      	mov	r3, r0
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	da01      	bge.n	800b1c8 <aci_gap_terminate_gap_proc+0x94>
    return BLE_STATUS_TIMEOUT;
 800b1c4:	23ff      	movs	r3, #255	; 0xff
 800b1c6:	e004      	b.n	800b1d2 <aci_gap_terminate_gap_proc+0x9e>
  return status;
 800b1c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b1cc:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800b1d0:	781b      	ldrb	r3, [r3, #0]
}
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	bd80      	pop	{r7, pc}

0800b1dc <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b0cc      	sub	sp, #304	; 0x130
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	4602      	mov	r2, r0
 800b1e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b1e8:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800b1ec:	801a      	strh	r2, [r3, #0]
 800b1ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b1f2:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800b1f6:	460a      	mov	r2, r1
 800b1f8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 800b1fa:	f107 0310 	add.w	r3, r7, #16
 800b1fe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b202:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b206:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800b20a:	2200      	movs	r2, #0
 800b20c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b20e:	2300      	movs	r3, #0
 800b210:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800b214:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b218:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b21c:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800b220:	8812      	ldrh	r2, [r2, #0]
 800b222:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800b224:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b228:	3302      	adds	r3, #2
 800b22a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 800b22e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b232:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b236:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800b23a:	7812      	ldrb	r2, [r2, #0]
 800b23c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800b23e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b242:	3301      	adds	r3, #1
 800b244:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b248:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b24c:	2218      	movs	r2, #24
 800b24e:	2100      	movs	r1, #0
 800b250:	4618      	mov	r0, r3
 800b252:	f000 fcf1 	bl	800bc38 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b256:	233f      	movs	r3, #63	; 0x3f
 800b258:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 800b25c:	23a5      	movs	r3, #165	; 0xa5
 800b25e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b262:	f107 0310 	add.w	r3, r7, #16
 800b266:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b26a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b26e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b272:	f107 030f 	add.w	r3, r7, #15
 800b276:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b27a:	2301      	movs	r3, #1
 800b27c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b280:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b284:	2100      	movs	r1, #0
 800b286:	4618      	mov	r0, r3
 800b288:	f000 ffc6 	bl	800c218 <hci_send_req>
 800b28c:	4603      	mov	r3, r0
 800b28e:	2b00      	cmp	r3, #0
 800b290:	da01      	bge.n	800b296 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 800b292:	23ff      	movs	r3, #255	; 0xff
 800b294:	e004      	b.n	800b2a0 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 800b296:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b29a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800b29e:	781b      	ldrb	r3, [r3, #0]
}
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	bd80      	pop	{r7, pc}

0800b2aa <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 800b2aa:	b580      	push	{r7, lr}
 800b2ac:	b088      	sub	sp, #32
 800b2ae:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b2b4:	f107 0308 	add.w	r3, r7, #8
 800b2b8:	2218      	movs	r2, #24
 800b2ba:	2100      	movs	r1, #0
 800b2bc:	4618      	mov	r0, r3
 800b2be:	f000 fcbb 	bl	800bc38 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b2c2:	233f      	movs	r3, #63	; 0x3f
 800b2c4:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800b2c6:	f240 1301 	movw	r3, #257	; 0x101
 800b2ca:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800b2cc:	1dfb      	adds	r3, r7, #7
 800b2ce:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800b2d0:	2301      	movs	r3, #1
 800b2d2:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b2d4:	f107 0308 	add.w	r3, r7, #8
 800b2d8:	2100      	movs	r1, #0
 800b2da:	4618      	mov	r0, r3
 800b2dc:	f000 ff9c 	bl	800c218 <hci_send_req>
 800b2e0:	4603      	mov	r3, r0
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	da01      	bge.n	800b2ea <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800b2e6:	23ff      	movs	r3, #255	; 0xff
 800b2e8:	e000      	b.n	800b2ec <aci_gatt_init+0x42>
  return status;
 800b2ea:	79fb      	ldrb	r3, [r7, #7]
}
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	3720      	adds	r7, #32
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	bd80      	pop	{r7, pc}

0800b2f4 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 800b2f4:	b590      	push	{r4, r7, lr}
 800b2f6:	b0cf      	sub	sp, #316	; 0x13c
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	4604      	mov	r4, r0
 800b2fc:	f507 709c 	add.w	r0, r7, #312	; 0x138
 800b300:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800b304:	6001      	str	r1, [r0, #0]
 800b306:	4610      	mov	r0, r2
 800b308:	4619      	mov	r1, r3
 800b30a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800b30e:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800b312:	4622      	mov	r2, r4
 800b314:	701a      	strb	r2, [r3, #0]
 800b316:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800b31a:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800b31e:	4602      	mov	r2, r0
 800b320:	701a      	strb	r2, [r3, #0]
 800b322:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800b326:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800b32a:	460a      	mov	r2, r1
 800b32c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800b32e:	f107 0310 	add.w	r3, r7, #16
 800b332:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800b336:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800b33a:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800b33e:	781b      	ldrb	r3, [r3, #0]
 800b340:	2b01      	cmp	r3, #1
 800b342:	d00a      	beq.n	800b35a <aci_gatt_add_service+0x66>
 800b344:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800b348:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800b34c:	781b      	ldrb	r3, [r3, #0]
 800b34e:	2b02      	cmp	r3, #2
 800b350:	d101      	bne.n	800b356 <aci_gatt_add_service+0x62>
 800b352:	2311      	movs	r3, #17
 800b354:	e002      	b.n	800b35c <aci_gatt_add_service+0x68>
 800b356:	2301      	movs	r3, #1
 800b358:	e000      	b.n	800b35c <aci_gatt_add_service+0x68>
 800b35a:	2303      	movs	r3, #3
 800b35c:	f107 0210 	add.w	r2, r7, #16
 800b360:	4413      	add	r3, r2
 800b362:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800b366:	f107 030c 	add.w	r3, r7, #12
 800b36a:	2203      	movs	r2, #3
 800b36c:	2100      	movs	r1, #0
 800b36e:	4618      	mov	r0, r3
 800b370:	f000 fc62 	bl	800bc38 <Osal_MemSet>
  int index_input = 0;
 800b374:	2300      	movs	r3, #0
 800b376:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 800b37a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b37e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800b382:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 800b386:	7812      	ldrb	r2, [r2, #0]
 800b388:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800b38a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b38e:	3301      	adds	r3, #1
 800b390:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 800b394:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800b398:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800b39c:	781b      	ldrb	r3, [r3, #0]
 800b39e:	2b01      	cmp	r3, #1
 800b3a0:	d002      	beq.n	800b3a8 <aci_gatt_add_service+0xb4>
 800b3a2:	2b02      	cmp	r3, #2
 800b3a4:	d004      	beq.n	800b3b0 <aci_gatt_add_service+0xbc>
 800b3a6:	e007      	b.n	800b3b8 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 800b3a8:	2302      	movs	r3, #2
 800b3aa:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800b3ae:	e005      	b.n	800b3bc <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 800b3b0:	2310      	movs	r3, #16
 800b3b2:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800b3b6:	e001      	b.n	800b3bc <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 800b3b8:	2397      	movs	r3, #151	; 0x97
 800b3ba:	e06c      	b.n	800b496 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 800b3bc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b3c0:	1c58      	adds	r0, r3, #1
 800b3c2:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 800b3c6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800b3ca:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800b3ce:	6819      	ldr	r1, [r3, #0]
 800b3d0:	f000 fc22 	bl	800bc18 <Osal_MemCpy>
    index_input += size;
 800b3d4:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800b3d8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800b3dc:	4413      	add	r3, r2
 800b3de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 800b3e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b3e6:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800b3ea:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800b3ee:	7812      	ldrb	r2, [r2, #0]
 800b3f0:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800b3f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b3f6:	3301      	adds	r3, #1
 800b3f8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 800b3fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b400:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800b404:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 800b408:	7812      	ldrb	r2, [r2, #0]
 800b40a:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800b40c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b410:	3301      	adds	r3, #1
 800b412:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b416:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b41a:	2218      	movs	r2, #24
 800b41c:	2100      	movs	r1, #0
 800b41e:	4618      	mov	r0, r3
 800b420:	f000 fc0a 	bl	800bc38 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b424:	233f      	movs	r3, #63	; 0x3f
 800b426:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 800b42a:	f44f 7381 	mov.w	r3, #258	; 0x102
 800b42e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b432:	f107 0310 	add.w	r3, r7, #16
 800b436:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b43a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b43e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800b442:	f107 030c 	add.w	r3, r7, #12
 800b446:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800b44a:	2303      	movs	r3, #3
 800b44c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b450:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b454:	2100      	movs	r1, #0
 800b456:	4618      	mov	r0, r3
 800b458:	f000 fede 	bl	800c218 <hci_send_req>
 800b45c:	4603      	mov	r3, r0
 800b45e:	2b00      	cmp	r3, #0
 800b460:	da01      	bge.n	800b466 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 800b462:	23ff      	movs	r3, #255	; 0xff
 800b464:	e017      	b.n	800b496 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 800b466:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800b46a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b46e:	781b      	ldrb	r3, [r3, #0]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d005      	beq.n	800b480 <aci_gatt_add_service+0x18c>
    return resp.Status;
 800b474:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800b478:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b47c:	781b      	ldrb	r3, [r3, #0]
 800b47e:	e00a      	b.n	800b496 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 800b480:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800b484:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b488:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800b48c:	b29a      	uxth	r2, r3
 800b48e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800b492:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800b494:	2300      	movs	r3, #0
}
 800b496:	4618      	mov	r0, r3
 800b498:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800b49c:	46bd      	mov	sp, r7
 800b49e:	bd90      	pop	{r4, r7, pc}

0800b4a0 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 800b4a0:	b590      	push	{r4, r7, lr}
 800b4a2:	b0d1      	sub	sp, #324	; 0x144
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	4604      	mov	r4, r0
 800b4a8:	4608      	mov	r0, r1
 800b4aa:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 800b4ae:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 800b4b2:	600a      	str	r2, [r1, #0]
 800b4b4:	4619      	mov	r1, r3
 800b4b6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800b4ba:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800b4be:	4622      	mov	r2, r4
 800b4c0:	801a      	strh	r2, [r3, #0]
 800b4c2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800b4c6:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800b4ca:	4602      	mov	r2, r0
 800b4cc:	701a      	strb	r2, [r3, #0]
 800b4ce:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800b4d2:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800b4d6:	460a      	mov	r2, r1
 800b4d8:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800b4da:	f107 0318 	add.w	r3, r7, #24
 800b4de:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800b4e2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800b4e6:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800b4ea:	781b      	ldrb	r3, [r3, #0]
 800b4ec:	2b01      	cmp	r3, #1
 800b4ee:	d00a      	beq.n	800b506 <aci_gatt_add_char+0x66>
 800b4f0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800b4f4:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800b4f8:	781b      	ldrb	r3, [r3, #0]
 800b4fa:	2b02      	cmp	r3, #2
 800b4fc:	d101      	bne.n	800b502 <aci_gatt_add_char+0x62>
 800b4fe:	2313      	movs	r3, #19
 800b500:	e002      	b.n	800b508 <aci_gatt_add_char+0x68>
 800b502:	2303      	movs	r3, #3
 800b504:	e000      	b.n	800b508 <aci_gatt_add_char+0x68>
 800b506:	2305      	movs	r3, #5
 800b508:	f107 0218 	add.w	r2, r7, #24
 800b50c:	4413      	add	r3, r2
 800b50e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800b512:	f107 0314 	add.w	r3, r7, #20
 800b516:	2203      	movs	r2, #3
 800b518:	2100      	movs	r1, #0
 800b51a:	4618      	mov	r0, r3
 800b51c:	f000 fb8c 	bl	800bc38 <Osal_MemSet>
  int index_input = 0;
 800b520:	2300      	movs	r3, #0
 800b522:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 800b526:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800b52a:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800b52e:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800b532:	8812      	ldrh	r2, [r2, #0]
 800b534:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800b536:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b53a:	3302      	adds	r3, #2
 800b53c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 800b540:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800b544:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800b548:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 800b54c:	7812      	ldrb	r2, [r2, #0]
 800b54e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800b550:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b554:	3301      	adds	r3, #1
 800b556:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 800b55a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800b55e:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800b562:	781b      	ldrb	r3, [r3, #0]
 800b564:	2b01      	cmp	r3, #1
 800b566:	d002      	beq.n	800b56e <aci_gatt_add_char+0xce>
 800b568:	2b02      	cmp	r3, #2
 800b56a:	d004      	beq.n	800b576 <aci_gatt_add_char+0xd6>
 800b56c:	e007      	b.n	800b57e <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 800b56e:	2302      	movs	r3, #2
 800b570:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800b574:	e005      	b.n	800b582 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 800b576:	2310      	movs	r3, #16
 800b578:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800b57c:	e001      	b.n	800b582 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 800b57e:	2397      	movs	r3, #151	; 0x97
 800b580:	e091      	b.n	800b6a6 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 800b582:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800b586:	1cd8      	adds	r0, r3, #3
 800b588:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 800b58c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800b590:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800b594:	6819      	ldr	r1, [r3, #0]
 800b596:	f000 fb3f 	bl	800bc18 <Osal_MemCpy>
    index_input += size;
 800b59a:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800b59e:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800b5a2:	4413      	add	r3, r2
 800b5a4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 800b5a8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b5ac:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800b5b0:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 800b5b4:	8812      	ldrh	r2, [r2, #0]
 800b5b6:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800b5b8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b5bc:	3302      	adds	r3, #2
 800b5be:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 800b5c2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b5c6:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800b5ca:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800b5cc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b5d0:	3301      	adds	r3, #1
 800b5d2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800b5d6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b5da:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800b5de:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800b5e0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b5e4:	3301      	adds	r3, #1
 800b5e6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800b5ea:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b5ee:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 800b5f2:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800b5f4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b5f8:	3301      	adds	r3, #1
 800b5fa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800b5fe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b602:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 800b606:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800b608:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b60c:	3301      	adds	r3, #1
 800b60e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 800b612:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b616:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 800b61a:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800b61c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b620:	3301      	adds	r3, #1
 800b622:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b626:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800b62a:	2218      	movs	r2, #24
 800b62c:	2100      	movs	r1, #0
 800b62e:	4618      	mov	r0, r3
 800b630:	f000 fb02 	bl	800bc38 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b634:	233f      	movs	r3, #63	; 0x3f
 800b636:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 800b63a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800b63e:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800b642:	f107 0318 	add.w	r3, r7, #24
 800b646:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800b64a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b64e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800b652:	f107 0314 	add.w	r3, r7, #20
 800b656:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800b65a:	2303      	movs	r3, #3
 800b65c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b660:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800b664:	2100      	movs	r1, #0
 800b666:	4618      	mov	r0, r3
 800b668:	f000 fdd6 	bl	800c218 <hci_send_req>
 800b66c:	4603      	mov	r3, r0
 800b66e:	2b00      	cmp	r3, #0
 800b670:	da01      	bge.n	800b676 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 800b672:	23ff      	movs	r3, #255	; 0xff
 800b674:	e017      	b.n	800b6a6 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 800b676:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800b67a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b67e:	781b      	ldrb	r3, [r3, #0]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d005      	beq.n	800b690 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 800b684:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800b688:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b68c:	781b      	ldrb	r3, [r3, #0]
 800b68e:	e00a      	b.n	800b6a6 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 800b690:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800b694:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b698:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800b69c:	b29a      	uxth	r2, r3
 800b69e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800b6a2:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800b6a4:	2300      	movs	r3, #0
}
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	bd90      	pop	{r4, r7, pc}

0800b6b0 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800b6b0:	b5b0      	push	{r4, r5, r7, lr}
 800b6b2:	b0cc      	sub	sp, #304	; 0x130
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	4605      	mov	r5, r0
 800b6b8:	460c      	mov	r4, r1
 800b6ba:	4610      	mov	r0, r2
 800b6bc:	4619      	mov	r1, r3
 800b6be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b6c2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800b6c6:	462a      	mov	r2, r5
 800b6c8:	801a      	strh	r2, [r3, #0]
 800b6ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b6ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b6d2:	4622      	mov	r2, r4
 800b6d4:	801a      	strh	r2, [r3, #0]
 800b6d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b6da:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800b6de:	4602      	mov	r2, r0
 800b6e0:	701a      	strb	r2, [r3, #0]
 800b6e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b6e6:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800b6ea:	460a      	mov	r2, r1
 800b6ec:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800b6ee:	f107 0310 	add.w	r3, r7, #16
 800b6f2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b6f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b6fa:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800b6fe:	2200      	movs	r2, #0
 800b700:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b702:	2300      	movs	r3, #0
 800b704:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 800b708:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b70c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b710:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800b714:	8812      	ldrh	r2, [r2, #0]
 800b716:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800b718:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b71c:	3302      	adds	r3, #2
 800b71e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 800b722:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b726:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b72a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800b72e:	8812      	ldrh	r2, [r2, #0]
 800b730:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800b732:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b736:	3302      	adds	r3, #2
 800b738:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 800b73c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b740:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b744:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 800b748:	7812      	ldrb	r2, [r2, #0]
 800b74a:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800b74c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b750:	3301      	adds	r3, #1
 800b752:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800b756:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b75a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b75e:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 800b762:	7812      	ldrb	r2, [r2, #0]
 800b764:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800b766:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b76a:	3301      	adds	r3, #1
 800b76c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800b770:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b774:	1d98      	adds	r0, r3, #6
 800b776:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b77a:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800b77e:	781b      	ldrb	r3, [r3, #0]
 800b780:	461a      	mov	r2, r3
 800b782:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800b786:	f000 fa47 	bl	800bc18 <Osal_MemCpy>
  index_input += Char_Value_Length;
 800b78a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b78e:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800b792:	781b      	ldrb	r3, [r3, #0]
 800b794:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800b798:	4413      	add	r3, r2
 800b79a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b79e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b7a2:	2218      	movs	r2, #24
 800b7a4:	2100      	movs	r1, #0
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	f000 fa46 	bl	800bc38 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b7ac:	233f      	movs	r3, #63	; 0x3f
 800b7ae:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 800b7b2:	f44f 7383 	mov.w	r3, #262	; 0x106
 800b7b6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b7ba:	f107 0310 	add.w	r3, r7, #16
 800b7be:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b7c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b7c6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b7ca:	f107 030f 	add.w	r3, r7, #15
 800b7ce:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b7d2:	2301      	movs	r3, #1
 800b7d4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b7d8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b7dc:	2100      	movs	r1, #0
 800b7de:	4618      	mov	r0, r3
 800b7e0:	f000 fd1a 	bl	800c218 <hci_send_req>
 800b7e4:	4603      	mov	r3, r0
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	da01      	bge.n	800b7ee <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800b7ea:	23ff      	movs	r3, #255	; 0xff
 800b7ec:	e004      	b.n	800b7f8 <aci_gatt_update_char_value+0x148>
  return status;
 800b7ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b7f2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800b7f6:	781b      	ldrb	r3, [r3, #0]
}
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800b7fe:	46bd      	mov	sp, r7
 800b800:	bdb0      	pop	{r4, r5, r7, pc}

0800b802 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800b802:	b580      	push	{r7, lr}
 800b804:	b0cc      	sub	sp, #304	; 0x130
 800b806:	af00      	add	r7, sp, #0
 800b808:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b80c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b810:	601a      	str	r2, [r3, #0]
 800b812:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b816:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800b81a:	4602      	mov	r2, r0
 800b81c:	701a      	strb	r2, [r3, #0]
 800b81e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b822:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800b826:	460a      	mov	r2, r1
 800b828:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800b82a:	f107 0310 	add.w	r3, r7, #16
 800b82e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b832:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b836:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800b83a:	2200      	movs	r2, #0
 800b83c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b83e:	2300      	movs	r3, #0
 800b840:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 800b844:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b848:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b84c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800b850:	7812      	ldrb	r2, [r2, #0]
 800b852:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800b854:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b858:	3301      	adds	r3, #1
 800b85a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 800b85e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b862:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b866:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800b86a:	7812      	ldrb	r2, [r2, #0]
 800b86c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800b86e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b872:	3301      	adds	r3, #1
 800b874:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800b878:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b87c:	1c98      	adds	r0, r3, #2
 800b87e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b882:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800b886:	781a      	ldrb	r2, [r3, #0]
 800b888:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b88c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b890:	6819      	ldr	r1, [r3, #0]
 800b892:	f000 f9c1 	bl	800bc18 <Osal_MemCpy>
  index_input += Length;
 800b896:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b89a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800b89e:	781b      	ldrb	r3, [r3, #0]
 800b8a0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800b8a4:	4413      	add	r3, r2
 800b8a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b8aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b8ae:	2218      	movs	r2, #24
 800b8b0:	2100      	movs	r1, #0
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	f000 f9c0 	bl	800bc38 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b8b8:	233f      	movs	r3, #63	; 0x3f
 800b8ba:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 800b8be:	230c      	movs	r3, #12
 800b8c0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b8c4:	f107 0310 	add.w	r3, r7, #16
 800b8c8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b8cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b8d0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b8d4:	f107 030f 	add.w	r3, r7, #15
 800b8d8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b8dc:	2301      	movs	r3, #1
 800b8de:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b8e2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b8e6:	2100      	movs	r1, #0
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	f000 fc95 	bl	800c218 <hci_send_req>
 800b8ee:	4603      	mov	r3, r0
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	da01      	bge.n	800b8f8 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800b8f4:	23ff      	movs	r3, #255	; 0xff
 800b8f6:	e004      	b.n	800b902 <aci_hal_write_config_data+0x100>
  return status;
 800b8f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b8fc:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800b900:	781b      	ldrb	r3, [r3, #0]
}
 800b902:	4618      	mov	r0, r3
 800b904:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800b908:	46bd      	mov	sp, r7
 800b90a:	bd80      	pop	{r7, pc}

0800b90c <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b0cc      	sub	sp, #304	; 0x130
 800b910:	af00      	add	r7, sp, #0
 800b912:	4602      	mov	r2, r0
 800b914:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b918:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800b91c:	701a      	strb	r2, [r3, #0]
 800b91e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b922:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800b926:	460a      	mov	r2, r1
 800b928:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800b92a:	f107 0310 	add.w	r3, r7, #16
 800b92e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b932:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b936:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800b93a:	2200      	movs	r2, #0
 800b93c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b93e:	2300      	movs	r3, #0
 800b940:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 800b944:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b948:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b94c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800b950:	7812      	ldrb	r2, [r2, #0]
 800b952:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800b954:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b958:	3301      	adds	r3, #1
 800b95a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 800b95e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b962:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b966:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800b96a:	7812      	ldrb	r2, [r2, #0]
 800b96c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800b96e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b972:	3301      	adds	r3, #1
 800b974:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b978:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b97c:	2218      	movs	r2, #24
 800b97e:	2100      	movs	r1, #0
 800b980:	4618      	mov	r0, r3
 800b982:	f000 f959 	bl	800bc38 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b986:	233f      	movs	r3, #63	; 0x3f
 800b988:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 800b98c:	230f      	movs	r3, #15
 800b98e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b992:	f107 0310 	add.w	r3, r7, #16
 800b996:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b99a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b99e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b9a2:	f107 030f 	add.w	r3, r7, #15
 800b9a6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b9aa:	2301      	movs	r3, #1
 800b9ac:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b9b0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b9b4:	2100      	movs	r1, #0
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	f000 fc2e 	bl	800c218 <hci_send_req>
 800b9bc:	4603      	mov	r3, r0
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	da01      	bge.n	800b9c6 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800b9c2:	23ff      	movs	r3, #255	; 0xff
 800b9c4:	e004      	b.n	800b9d0 <aci_hal_set_tx_power_level+0xc4>
  return status;
 800b9c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b9ca:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800b9ce:	781b      	ldrb	r3, [r3, #0]
}
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	bd80      	pop	{r7, pc}

0800b9da <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800b9da:	b580      	push	{r7, lr}
 800b9dc:	b088      	sub	sp, #32
 800b9de:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b9e4:	f107 0308 	add.w	r3, r7, #8
 800b9e8:	2218      	movs	r2, #24
 800b9ea:	2100      	movs	r1, #0
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	f000 f923 	bl	800bc38 <Osal_MemSet>
  rq.ogf = 0x03;
 800b9f2:	2303      	movs	r3, #3
 800b9f4:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800b9f6:	2303      	movs	r3, #3
 800b9f8:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800b9fa:	1dfb      	adds	r3, r7, #7
 800b9fc:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800b9fe:	2301      	movs	r3, #1
 800ba00:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ba02:	f107 0308 	add.w	r3, r7, #8
 800ba06:	2100      	movs	r1, #0
 800ba08:	4618      	mov	r0, r3
 800ba0a:	f000 fc05 	bl	800c218 <hci_send_req>
 800ba0e:	4603      	mov	r3, r0
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	da01      	bge.n	800ba18 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800ba14:	23ff      	movs	r3, #255	; 0xff
 800ba16:	e000      	b.n	800ba1a <hci_reset+0x40>
  return status;
 800ba18:	79fb      	ldrb	r3, [r7, #7]
}
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	3720      	adds	r7, #32
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	bd80      	pop	{r7, pc}

0800ba22 <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy( uint16_t Connection_Handle,
                            uint8_t* TX_PHY,
                            uint8_t* RX_PHY )
{
 800ba22:	b580      	push	{r7, lr}
 800ba24:	b0ce      	sub	sp, #312	; 0x138
 800ba26:	af00      	add	r7, sp, #0
 800ba28:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ba2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ba30:	6019      	str	r1, [r3, #0]
 800ba32:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ba36:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800ba3a:	601a      	str	r2, [r3, #0]
 800ba3c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ba40:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800ba44:	4602      	mov	r2, r0
 800ba46:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 800ba48:	f107 0318 	add.w	r3, r7, #24
 800ba4c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800ba50:	f107 0310 	add.w	r3, r7, #16
 800ba54:	2205      	movs	r2, #5
 800ba56:	2100      	movs	r1, #0
 800ba58:	4618      	mov	r0, r3
 800ba5a:	f000 f8ed 	bl	800bc38 <Osal_MemSet>
  int index_input = 0;
 800ba5e:	2300      	movs	r3, #0
 800ba60:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = Connection_Handle;
 800ba64:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ba68:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800ba6c:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800ba70:	8812      	ldrh	r2, [r2, #0]
 800ba72:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800ba74:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ba78:	3302      	adds	r3, #2
 800ba7a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ba7e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800ba82:	2218      	movs	r2, #24
 800ba84:	2100      	movs	r1, #0
 800ba86:	4618      	mov	r0, r3
 800ba88:	f000 f8d6 	bl	800bc38 <Osal_MemSet>
  rq.ogf = 0x08;
 800ba8c:	2308      	movs	r3, #8
 800ba8e:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x030;
 800ba92:	2330      	movs	r3, #48	; 0x30
 800ba94:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800ba98:	f107 0318 	add.w	r3, r7, #24
 800ba9c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800baa0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800baa4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800baa8:	f107 0310 	add.w	r3, r7, #16
 800baac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800bab0:	2305      	movs	r3, #5
 800bab2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800bab6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800baba:	2100      	movs	r1, #0
 800babc:	4618      	mov	r0, r3
 800babe:	f000 fbab 	bl	800c218 <hci_send_req>
 800bac2:	4603      	mov	r3, r0
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	da01      	bge.n	800bacc <hci_le_read_phy+0xaa>
    return BLE_STATUS_TIMEOUT;
 800bac8:	23ff      	movs	r3, #255	; 0xff
 800baca:	e023      	b.n	800bb14 <hci_le_read_phy+0xf2>
  if ( resp.Status )
 800bacc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800bad0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800bad4:	781b      	ldrb	r3, [r3, #0]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d005      	beq.n	800bae6 <hci_le_read_phy+0xc4>
    return resp.Status;
 800bada:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800bade:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800bae2:	781b      	ldrb	r3, [r3, #0]
 800bae4:	e016      	b.n	800bb14 <hci_le_read_phy+0xf2>
  *TX_PHY = resp.TX_PHY;
 800bae6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800baea:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800baee:	78da      	ldrb	r2, [r3, #3]
 800baf0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800baf4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	701a      	strb	r2, [r3, #0]
  *RX_PHY = resp.RX_PHY;
 800bafc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800bb00:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800bb04:	791a      	ldrb	r2, [r3, #4]
 800bb06:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800bb0a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800bb12:	2300      	movs	r3, #0
}
 800bb14:	4618      	mov	r0, r3
 800bb16:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	bd80      	pop	{r7, pc}

0800bb1e <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800bb1e:	b590      	push	{r4, r7, lr}
 800bb20:	b0cd      	sub	sp, #308	; 0x134
 800bb22:	af00      	add	r7, sp, #0
 800bb24:	4604      	mov	r4, r0
 800bb26:	4608      	mov	r0, r1
 800bb28:	4611      	mov	r1, r2
 800bb2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bb2e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800bb32:	4622      	mov	r2, r4
 800bb34:	701a      	strb	r2, [r3, #0]
 800bb36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bb3a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800bb3e:	4602      	mov	r2, r0
 800bb40:	701a      	strb	r2, [r3, #0]
 800bb42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bb46:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800bb4a:	460a      	mov	r2, r1
 800bb4c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800bb4e:	f107 0310 	add.w	r3, r7, #16
 800bb52:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800bb56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bb5a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800bb5e:	2200      	movs	r2, #0
 800bb60:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800bb62:	2300      	movs	r3, #0
 800bb64:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800bb68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bb6c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800bb70:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800bb74:	7812      	ldrb	r2, [r2, #0]
 800bb76:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800bb78:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bb7c:	3301      	adds	r3, #1
 800bb7e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 800bb82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bb86:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800bb8a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800bb8e:	7812      	ldrb	r2, [r2, #0]
 800bb90:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800bb92:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bb96:	3301      	adds	r3, #1
 800bb98:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 800bb9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bba0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800bba4:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800bba8:	7812      	ldrb	r2, [r2, #0]
 800bbaa:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800bbac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bbb0:	3301      	adds	r3, #1
 800bbb2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800bbb6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800bbba:	2218      	movs	r2, #24
 800bbbc:	2100      	movs	r1, #0
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	f000 f83a 	bl	800bc38 <Osal_MemSet>
  rq.ogf = 0x08;
 800bbc4:	2308      	movs	r3, #8
 800bbc6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 800bbca:	2331      	movs	r3, #49	; 0x31
 800bbcc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800bbd0:	f107 0310 	add.w	r3, r7, #16
 800bbd4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800bbd8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bbdc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800bbe0:	f107 030f 	add.w	r3, r7, #15
 800bbe4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800bbe8:	2301      	movs	r3, #1
 800bbea:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800bbee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800bbf2:	2100      	movs	r1, #0
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	f000 fb0f 	bl	800c218 <hci_send_req>
 800bbfa:	4603      	mov	r3, r0
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	da01      	bge.n	800bc04 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 800bc00:	23ff      	movs	r3, #255	; 0xff
 800bc02:	e004      	b.n	800bc0e <hci_le_set_default_phy+0xf0>
  return status;
 800bc04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bc08:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800bc0c:	781b      	ldrb	r3, [r3, #0]
}
 800bc0e:	4618      	mov	r0, r3
 800bc10:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800bc14:	46bd      	mov	sp, r7
 800bc16:	bd90      	pop	{r4, r7, pc}

0800bc18 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	b084      	sub	sp, #16
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	60f8      	str	r0, [r7, #12]
 800bc20:	60b9      	str	r1, [r7, #8]
 800bc22:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 800bc24:	687a      	ldr	r2, [r7, #4]
 800bc26:	68b9      	ldr	r1, [r7, #8]
 800bc28:	68f8      	ldr	r0, [r7, #12]
 800bc2a:	f002 fed2 	bl	800e9d2 <memcpy>
 800bc2e:	4603      	mov	r3, r0
}
 800bc30:	4618      	mov	r0, r3
 800bc32:	3710      	adds	r7, #16
 800bc34:	46bd      	mov	sp, r7
 800bc36:	bd80      	pop	{r7, pc}

0800bc38 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b084      	sub	sp, #16
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	60f8      	str	r0, [r7, #12]
 800bc40:	60b9      	str	r1, [r7, #8]
 800bc42:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800bc44:	687a      	ldr	r2, [r7, #4]
 800bc46:	68b9      	ldr	r1, [r7, #8]
 800bc48:	68f8      	ldr	r0, [r7, #12]
 800bc4a:	f002 fe43 	bl	800e8d4 <memset>
 800bc4e:	4603      	mov	r3, r0
}
 800bc50:	4618      	mov	r0, r3
 800bc52:	3710      	adds	r7, #16
 800bc54:	46bd      	mov	sp, r7
 800bc56:	bd80      	pop	{r7, pc}

0800bc58 <UartTransmitStr>:
 }
#endif


uint16_t UartTransmitStr(char *StrToDisp)
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b084      	sub	sp, #16
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
#ifdef CFG_CONSOLE_MENU
  uint16_t jj;

  jj = 0;
 800bc60:	2300      	movs	r3, #0
 800bc62:	81fb      	strh	r3, [r7, #14]
  while (StrToDisp[jj] != 0)
 800bc64:	e00b      	b.n	800bc7e <UartTransmitStr+0x26>
  {
    HW_UART_Transmit(CFG_CONSOLE_MENU, (uint8_t*)&StrToDisp[jj++], 1, 0xFFFFFFFF);
 800bc66:	89fb      	ldrh	r3, [r7, #14]
 800bc68:	1c5a      	adds	r2, r3, #1
 800bc6a:	81fa      	strh	r2, [r7, #14]
 800bc6c:	461a      	mov	r2, r3
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	1899      	adds	r1, r3, r2
 800bc72:	f04f 33ff 	mov.w	r3, #4294967295
 800bc76:	2201      	movs	r2, #1
 800bc78:	2000      	movs	r0, #0
 800bc7a:	f7f6 fe13 	bl	80028a4 <HW_UART_Transmit>
  while (StrToDisp[jj] != 0)
 800bc7e:	89fb      	ldrh	r3, [r7, #14]
 800bc80:	687a      	ldr	r2, [r7, #4]
 800bc82:	4413      	add	r3, r2
 800bc84:	781b      	ldrb	r3, [r3, #0]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d1ed      	bne.n	800bc66 <UartTransmitStr+0xe>
  }
  return jj;
 800bc8a:	89fb      	ldrh	r3, [r7, #14]
#else
  return 0;
#endif
}
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	3710      	adds	r7, #16
 800bc90:	46bd      	mov	sp, r7
 800bc92:	bd80      	pop	{r7, pc}

0800bc94 <UartTransmitStrSz>:

uint16_t UartTransmitStrSz (char *StrToDisp, size_t len)
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b084      	sub	sp, #16
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
 800bc9c:	6039      	str	r1, [r7, #0]
#ifdef CFG_CONSOLE_MENU
  uint16_t jj;

  jj = 0;
 800bc9e:	2300      	movs	r3, #0
 800bca0:	81fb      	strh	r3, [r7, #14]
  while (jj < len)
 800bca2:	e00b      	b.n	800bcbc <UartTransmitStrSz+0x28>
  {
    HW_UART_Transmit(CFG_CONSOLE_MENU, (uint8_t*)&StrToDisp[jj++], 1, 0xFFFFFFFF);
 800bca4:	89fb      	ldrh	r3, [r7, #14]
 800bca6:	1c5a      	adds	r2, r3, #1
 800bca8:	81fa      	strh	r2, [r7, #14]
 800bcaa:	461a      	mov	r2, r3
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	1899      	adds	r1, r3, r2
 800bcb0:	f04f 33ff 	mov.w	r3, #4294967295
 800bcb4:	2201      	movs	r2, #1
 800bcb6:	2000      	movs	r0, #0
 800bcb8:	f7f6 fdf4 	bl	80028a4 <HW_UART_Transmit>
  while (jj < len)
 800bcbc:	89fb      	ldrh	r3, [r7, #14]
 800bcbe:	683a      	ldr	r2, [r7, #0]
 800bcc0:	429a      	cmp	r2, r3
 800bcc2:	d8ef      	bhi.n	800bca4 <UartTransmitStrSz+0x10>
  }
  return jj;
 800bcc4:	89fb      	ldrh	r3, [r7, #14]
#else
  return 0;
#endif
}
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	3710      	adds	r7, #16
 800bcca:	46bd      	mov	sp, r7
 800bccc:	bd80      	pop	{r7, pc}
	...

0800bcd0 <ClearScreen>:
 * @param None
 * @return  none.
 *******************************************************************************
 **/
void ClearScreen()
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	af00      	add	r7, sp, #0
  UartTransmitStr("\033[2J");
 800bcd4:	4804      	ldr	r0, [pc, #16]	; (800bce8 <ClearScreen+0x18>)
 800bcd6:	f7ff ffbf 	bl	800bc58 <UartTransmitStr>
  PosCur(1, 1);
 800bcda:	2101      	movs	r1, #1
 800bcdc:	2001      	movs	r0, #1
 800bcde:	f000 f805 	bl	800bcec <PosCur>
}
 800bce2:	bf00      	nop
 800bce4:	bd80      	pop	{r7, pc}
 800bce6:	bf00      	nop
 800bce8:	08011c1c 	.word	0x08011c1c

0800bcec <PosCur>:
 * @param iX, iY : Column & Line cursor position.
 * @return none.
 *******************************************************************************
 **/
void PosCur(uint8_t iX, uint8_t iY)
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b08a      	sub	sp, #40	; 0x28
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	4603      	mov	r3, r0
 800bcf4:	460a      	mov	r2, r1
 800bcf6:	71fb      	strb	r3, [r7, #7]
 800bcf8:	4613      	mov	r3, r2
 800bcfa:	71bb      	strb	r3, [r7, #6]
  char szCtrl[30] = "\33[01;01H";
 800bcfc:	4a22      	ldr	r2, [pc, #136]	; (800bd88 <PosCur+0x9c>)
 800bcfe:	f107 0308 	add.w	r3, r7, #8
 800bd02:	ca07      	ldmia	r2, {r0, r1, r2}
 800bd04:	c303      	stmia	r3!, {r0, r1}
 800bd06:	701a      	strb	r2, [r3, #0]
 800bd08:	f107 0311 	add.w	r3, r7, #17
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	601a      	str	r2, [r3, #0]
 800bd10:	605a      	str	r2, [r3, #4]
 800bd12:	609a      	str	r2, [r3, #8]
 800bd14:	60da      	str	r2, [r3, #12]
 800bd16:	611a      	str	r2, [r3, #16]
 800bd18:	751a      	strb	r2, [r3, #20]

  szCtrl[3] = (int8_t) ((iY % 10) + '0');
 800bd1a:	79ba      	ldrb	r2, [r7, #6]
 800bd1c:	4b1b      	ldr	r3, [pc, #108]	; (800bd8c <PosCur+0xa0>)
 800bd1e:	fba3 1302 	umull	r1, r3, r3, r2
 800bd22:	08d9      	lsrs	r1, r3, #3
 800bd24:	460b      	mov	r3, r1
 800bd26:	009b      	lsls	r3, r3, #2
 800bd28:	440b      	add	r3, r1
 800bd2a:	005b      	lsls	r3, r3, #1
 800bd2c:	1ad3      	subs	r3, r2, r3
 800bd2e:	b2db      	uxtb	r3, r3
 800bd30:	3330      	adds	r3, #48	; 0x30
 800bd32:	b2db      	uxtb	r3, r3
 800bd34:	72fb      	strb	r3, [r7, #11]
  szCtrl[2] = (int8_t) ((iY / 10) + '0');
 800bd36:	79bb      	ldrb	r3, [r7, #6]
 800bd38:	4a14      	ldr	r2, [pc, #80]	; (800bd8c <PosCur+0xa0>)
 800bd3a:	fba2 2303 	umull	r2, r3, r2, r3
 800bd3e:	08db      	lsrs	r3, r3, #3
 800bd40:	b2db      	uxtb	r3, r3
 800bd42:	3330      	adds	r3, #48	; 0x30
 800bd44:	b2db      	uxtb	r3, r3
 800bd46:	72bb      	strb	r3, [r7, #10]
  szCtrl[6] = (int8_t) ((iX % 10) + '0');
 800bd48:	79fa      	ldrb	r2, [r7, #7]
 800bd4a:	4b10      	ldr	r3, [pc, #64]	; (800bd8c <PosCur+0xa0>)
 800bd4c:	fba3 1302 	umull	r1, r3, r3, r2
 800bd50:	08d9      	lsrs	r1, r3, #3
 800bd52:	460b      	mov	r3, r1
 800bd54:	009b      	lsls	r3, r3, #2
 800bd56:	440b      	add	r3, r1
 800bd58:	005b      	lsls	r3, r3, #1
 800bd5a:	1ad3      	subs	r3, r2, r3
 800bd5c:	b2db      	uxtb	r3, r3
 800bd5e:	3330      	adds	r3, #48	; 0x30
 800bd60:	b2db      	uxtb	r3, r3
 800bd62:	73bb      	strb	r3, [r7, #14]
  szCtrl[5] = (int8_t) ((iX / 10) + '0');
 800bd64:	79fb      	ldrb	r3, [r7, #7]
 800bd66:	4a09      	ldr	r2, [pc, #36]	; (800bd8c <PosCur+0xa0>)
 800bd68:	fba2 2303 	umull	r2, r3, r2, r3
 800bd6c:	08db      	lsrs	r3, r3, #3
 800bd6e:	b2db      	uxtb	r3, r3
 800bd70:	3330      	adds	r3, #48	; 0x30
 800bd72:	b2db      	uxtb	r3, r3
 800bd74:	737b      	strb	r3, [r7, #13]

  UartTransmitStr(szCtrl);
 800bd76:	f107 0308 	add.w	r3, r7, #8
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	f7ff ff6c 	bl	800bc58 <UartTransmitStr>
}
 800bd80:	bf00      	nop
 800bd82:	3728      	adds	r7, #40	; 0x28
 800bd84:	46bd      	mov	sp, r7
 800bd86:	bd80      	pop	{r7, pc}
 800bd88:	08011c24 	.word	0x08011c24
 800bd8c:	cccccccd 	.word	0xcccccccd

0800bd90 <PrintPcCrt>:
 *             to be displayed. %d, %x, %s. %c, %u (unsigned int32_t) are supported.
 * @return  none
 *******************************************************************************
 */
void PrintPcCrt(uint8_t x, uint8_t y, char *szFormat, ...)
{
 800bd90:	b40c      	push	{r2, r3}
 800bd92:	b580      	push	{r7, lr}
 800bd94:	b088      	sub	sp, #32
 800bd96:	af00      	add	r7, sp, #0
 800bd98:	4603      	mov	r3, r0
 800bd9a:	460a      	mov	r2, r1
 800bd9c:	71fb      	strb	r3, [r7, #7]
 800bd9e:	4613      	mov	r3, r2
 800bda0:	71bb      	strb	r3, [r7, #6]
  char fmtDetect, *pt;
  int32_t slval;
  va_list ptArg;

  /* -------   Execute the print if BusyFlag = FREE_FLAG  -------- */
  if (BusyFlag == FREE_FLAG)
 800bda2:	4b6c      	ldr	r3, [pc, #432]	; (800bf54 <PrintPcCrt+0x1c4>)
 800bda4:	781b      	ldrb	r3, [r3, #0]
 800bda6:	2b01      	cmp	r3, #1
 800bda8:	f040 80cc 	bne.w	800bf44 <PrintPcCrt+0x1b4>
  {
    BusyFlag = BUSY_FLAG;
 800bdac:	4b69      	ldr	r3, [pc, #420]	; (800bf54 <PrintPcCrt+0x1c4>)
 800bdae:	2202      	movs	r2, #2
 800bdb0:	701a      	strb	r2, [r3, #0]
    /* -------  This is for multi-thread */
    //PosCur(x, y);
    fmtDetect = FALSE;
 800bdb2:	2300      	movs	r3, #0
 800bdb4:	77bb      	strb	r3, [r7, #30]
    va_start(ptArg, szFormat);
 800bdb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bdba:	60bb      	str	r3, [r7, #8]
    i = 0;
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	77fb      	strb	r3, [r7, #31]

    for (pt = szFormat; *pt != 0; pt++)
 800bdc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdc2:	61bb      	str	r3, [r7, #24]
 800bdc4:	e0ac      	b.n	800bf20 <PrintPcCrt+0x190>
    {
      str[i++] = *pt;
 800bdc6:	7ffb      	ldrb	r3, [r7, #31]
 800bdc8:	1c5a      	adds	r2, r3, #1
 800bdca:	77fa      	strb	r2, [r7, #31]
 800bdcc:	461a      	mov	r2, r3
 800bdce:	69bb      	ldr	r3, [r7, #24]
 800bdd0:	7819      	ldrb	r1, [r3, #0]
 800bdd2:	4b61      	ldr	r3, [pc, #388]	; (800bf58 <PrintPcCrt+0x1c8>)
 800bdd4:	5499      	strb	r1, [r3, r2]
      if (fmtDetect == FALSE)
 800bdd6:	7fbb      	ldrb	r3, [r7, #30]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d107      	bne.n	800bdec <PrintPcCrt+0x5c>
      {
        if (*pt == '%')
 800bddc:	69bb      	ldr	r3, [r7, #24]
 800bdde:	781b      	ldrb	r3, [r3, #0]
 800bde0:	2b25      	cmp	r3, #37	; 0x25
 800bde2:	f040 809a 	bne.w	800bf1a <PrintPcCrt+0x18a>
        {
          fmtDetect = TRUE;
 800bde6:	2301      	movs	r3, #1
 800bde8:	77bb      	strb	r3, [r7, #30]
 800bdea:	e096      	b.n	800bf1a <PrintPcCrt+0x18a>
        }
      }
      else
      {
        switch (*pt)
 800bdec:	69bb      	ldr	r3, [r7, #24]
 800bdee:	781b      	ldrb	r3, [r3, #0]
 800bdf0:	3b58      	subs	r3, #88	; 0x58
 800bdf2:	2b20      	cmp	r3, #32
 800bdf4:	f200 8091 	bhi.w	800bf1a <PrintPcCrt+0x18a>
 800bdf8:	a201      	add	r2, pc, #4	; (adr r2, 800be00 <PrintPcCrt+0x70>)
 800bdfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdfe:	bf00      	nop
 800be00:	0800beb7 	.word	0x0800beb7
 800be04:	0800bf1b 	.word	0x0800bf1b
 800be08:	0800bf1b 	.word	0x0800bf1b
 800be0c:	0800bf1b 	.word	0x0800bf1b
 800be10:	0800bf1b 	.word	0x0800bf1b
 800be14:	0800bf1b 	.word	0x0800bf1b
 800be18:	0800bf1b 	.word	0x0800bf1b
 800be1c:	0800bf1b 	.word	0x0800bf1b
 800be20:	0800bf1b 	.word	0x0800bf1b
 800be24:	0800bf1b 	.word	0x0800bf1b
 800be28:	0800bf1b 	.word	0x0800bf1b
 800be2c:	0800be85 	.word	0x0800be85
 800be30:	0800be85 	.word	0x0800be85
 800be34:	0800bf1b 	.word	0x0800bf1b
 800be38:	0800bf1b 	.word	0x0800bf1b
 800be3c:	0800bf1b 	.word	0x0800bf1b
 800be40:	0800bf1b 	.word	0x0800bf1b
 800be44:	0800bf1b 	.word	0x0800bf1b
 800be48:	0800bf1b 	.word	0x0800bf1b
 800be4c:	0800bf1b 	.word	0x0800bf1b
 800be50:	0800bf1b 	.word	0x0800bf1b
 800be54:	0800bf1b 	.word	0x0800bf1b
 800be58:	0800bf1b 	.word	0x0800bf1b
 800be5c:	0800bf1b 	.word	0x0800bf1b
 800be60:	0800bf1b 	.word	0x0800bf1b
 800be64:	0800bf1b 	.word	0x0800bf1b
 800be68:	0800bf1b 	.word	0x0800bf1b
 800be6c:	0800bee9 	.word	0x0800bee9
 800be70:	0800bf1b 	.word	0x0800bf1b
 800be74:	0800beb7 	.word	0x0800beb7
 800be78:	0800bf1b 	.word	0x0800bf1b
 800be7c:	0800bf1b 	.word	0x0800bf1b
 800be80:	0800beb7 	.word	0x0800beb7
        {
        case 'd':
        case 'c':
          fmtDetect = FALSE;
 800be84:	2300      	movs	r3, #0
 800be86:	77bb      	strb	r3, [r7, #30]
          str[i++] = 0;
 800be88:	7ffb      	ldrb	r3, [r7, #31]
 800be8a:	1c5a      	adds	r2, r3, #1
 800be8c:	77fa      	strb	r2, [r7, #31]
 800be8e:	461a      	mov	r2, r3
 800be90:	4b31      	ldr	r3, [pc, #196]	; (800bf58 <PrintPcCrt+0x1c8>)
 800be92:	2100      	movs	r1, #0
 800be94:	5499      	strb	r1, [r3, r2]
          slval = va_arg(ptArg, long int);
 800be96:	68bb      	ldr	r3, [r7, #8]
 800be98:	1d1a      	adds	r2, r3, #4
 800be9a:	60ba      	str	r2, [r7, #8]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	613b      	str	r3, [r7, #16]

          sprintf((char *) strDisplay, (char *) str, slval);
 800bea0:	693a      	ldr	r2, [r7, #16]
 800bea2:	492d      	ldr	r1, [pc, #180]	; (800bf58 <PrintPcCrt+0x1c8>)
 800bea4:	482d      	ldr	r0, [pc, #180]	; (800bf5c <PrintPcCrt+0x1cc>)
 800bea6:	f002 fc1d 	bl	800e6e4 <siprintf>
          i = 0;
 800beaa:	2300      	movs	r3, #0
 800beac:	77fb      	strb	r3, [r7, #31]
          UartTransmitStr(strDisplay);
 800beae:	482b      	ldr	r0, [pc, #172]	; (800bf5c <PrintPcCrt+0x1cc>)
 800beb0:	f7ff fed2 	bl	800bc58 <UartTransmitStr>
          break;
 800beb4:	e031      	b.n	800bf1a <PrintPcCrt+0x18a>

        case 'X':
        case 'x':
        case 'u':
          fmtDetect = FALSE;
 800beb6:	2300      	movs	r3, #0
 800beb8:	77bb      	strb	r3, [r7, #30]
          str[i++] = 0;
 800beba:	7ffb      	ldrb	r3, [r7, #31]
 800bebc:	1c5a      	adds	r2, r3, #1
 800bebe:	77fa      	strb	r2, [r7, #31]
 800bec0:	461a      	mov	r2, r3
 800bec2:	4b25      	ldr	r3, [pc, #148]	; (800bf58 <PrintPcCrt+0x1c8>)
 800bec4:	2100      	movs	r1, #0
 800bec6:	5499      	strb	r1, [r3, r2]
          ulval = va_arg(ptArg, unsigned long int);
 800bec8:	68bb      	ldr	r3, [r7, #8]
 800beca:	1d1a      	adds	r2, r3, #4
 800becc:	60ba      	str	r2, [r7, #8]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	60fb      	str	r3, [r7, #12]

          sprintf((char *) strDisplay, (char *) str, ulval);
 800bed2:	68fa      	ldr	r2, [r7, #12]
 800bed4:	4920      	ldr	r1, [pc, #128]	; (800bf58 <PrintPcCrt+0x1c8>)
 800bed6:	4821      	ldr	r0, [pc, #132]	; (800bf5c <PrintPcCrt+0x1cc>)
 800bed8:	f002 fc04 	bl	800e6e4 <siprintf>
          i = 0;
 800bedc:	2300      	movs	r3, #0
 800bede:	77fb      	strb	r3, [r7, #31]
          UartTransmitStr(strDisplay);
 800bee0:	481e      	ldr	r0, [pc, #120]	; (800bf5c <PrintPcCrt+0x1cc>)
 800bee2:	f7ff feb9 	bl	800bc58 <UartTransmitStr>
          break;
 800bee6:	e018      	b.n	800bf1a <PrintPcCrt+0x18a>

        case 's':
          fmtDetect = FALSE;
 800bee8:	2300      	movs	r3, #0
 800beea:	77bb      	strb	r3, [r7, #30]
          str[i++] = 0;
 800beec:	7ffb      	ldrb	r3, [r7, #31]
 800beee:	1c5a      	adds	r2, r3, #1
 800bef0:	77fa      	strb	r2, [r7, #31]
 800bef2:	461a      	mov	r2, r3
 800bef4:	4b18      	ldr	r3, [pc, #96]	; (800bf58 <PrintPcCrt+0x1c8>)
 800bef6:	2100      	movs	r1, #0
 800bef8:	5499      	strb	r1, [r3, r2]
          sval = va_arg(ptArg, int8_t *);
 800befa:	68bb      	ldr	r3, [r7, #8]
 800befc:	1d1a      	adds	r2, r3, #4
 800befe:	60ba      	str	r2, [r7, #8]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	617b      	str	r3, [r7, #20]
          sprintf((char *) strDisplay, (char *) str, sval);
 800bf04:	697a      	ldr	r2, [r7, #20]
 800bf06:	4914      	ldr	r1, [pc, #80]	; (800bf58 <PrintPcCrt+0x1c8>)
 800bf08:	4814      	ldr	r0, [pc, #80]	; (800bf5c <PrintPcCrt+0x1cc>)
 800bf0a:	f002 fbeb 	bl	800e6e4 <siprintf>
          i = 0;
 800bf0e:	2300      	movs	r3, #0
 800bf10:	77fb      	strb	r3, [r7, #31]
          UartTransmitStr(strDisplay);
 800bf12:	4812      	ldr	r0, [pc, #72]	; (800bf5c <PrintPcCrt+0x1cc>)
 800bf14:	f7ff fea0 	bl	800bc58 <UartTransmitStr>
          break;
 800bf18:	bf00      	nop
    for (pt = szFormat; *pt != 0; pt++)
 800bf1a:	69bb      	ldr	r3, [r7, #24]
 800bf1c:	3301      	adds	r3, #1
 800bf1e:	61bb      	str	r3, [r7, #24]
 800bf20:	69bb      	ldr	r3, [r7, #24]
 800bf22:	781b      	ldrb	r3, [r3, #0]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	f47f af4e 	bne.w	800bdc6 <PrintPcCrt+0x36>
        }
      }
    }
    str[i++] = 0;
 800bf2a:	7ffb      	ldrb	r3, [r7, #31]
 800bf2c:	1c5a      	adds	r2, r3, #1
 800bf2e:	77fa      	strb	r2, [r7, #31]
 800bf30:	461a      	mov	r2, r3
 800bf32:	4b09      	ldr	r3, [pc, #36]	; (800bf58 <PrintPcCrt+0x1c8>)
 800bf34:	2100      	movs	r1, #0
 800bf36:	5499      	strb	r1, [r3, r2]
    UartTransmitStr(str);
 800bf38:	4807      	ldr	r0, [pc, #28]	; (800bf58 <PrintPcCrt+0x1c8>)
 800bf3a:	f7ff fe8d 	bl	800bc58 <UartTransmitStr>
    va_end(ptArg);
    BusyFlag = FREE_FLAG;       /* allow another printf to be executed */
 800bf3e:	4b05      	ldr	r3, [pc, #20]	; (800bf54 <PrintPcCrt+0x1c4>)
 800bf40:	2201      	movs	r2, #1
 800bf42:	701a      	strb	r2, [r3, #0]
  }
}
 800bf44:	bf00      	nop
 800bf46:	3720      	adds	r7, #32
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bf4e:	b002      	add	sp, #8
 800bf50:	4770      	bx	lr
 800bf52:	bf00      	nop
 800bf54:	20000039 	.word	0x20000039
 800bf58:	200007d0 	.word	0x200007d0
 800bf5c:	20000858 	.word	0x20000858

0800bf60 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b088      	sub	sp, #32
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800bf68:	f107 030c 	add.w	r3, r7, #12
 800bf6c:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800bf74:	69fb      	ldr	r3, [r7, #28]
 800bf76:	212e      	movs	r1, #46	; 0x2e
 800bf78:	f64f 4066 	movw	r0, #64614	; 0xfc66
 800bf7c:	f000 fae8 	bl	800c550 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800bf80:	69fb      	ldr	r3, [r7, #28]
 800bf82:	330b      	adds	r3, #11
 800bf84:	78db      	ldrb	r3, [r3, #3]
}
 800bf86:	4618      	mov	r0, r3
 800bf88:	3720      	adds	r7, #32
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	bd80      	pop	{r7, pc}

0800bf8e <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800bf8e:	b580      	push	{r7, lr}
 800bf90:	b088      	sub	sp, #32
 800bf92:	af00      	add	r7, sp, #0
 800bf94:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800bf96:	f107 030c 	add.w	r3, r7, #12
 800bf9a:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800bfa2:	69fb      	ldr	r3, [r7, #28]
 800bfa4:	210f      	movs	r1, #15
 800bfa6:	f64f 4068 	movw	r0, #64616	; 0xfc68
 800bfaa:	f000 fad1 	bl	800c550 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800bfae:	69fb      	ldr	r3, [r7, #28]
 800bfb0:	330b      	adds	r3, #11
 800bfb2:	78db      	ldrb	r3, [r3, #3]
}
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	3720      	adds	r7, #32
 800bfb8:	46bd      	mov	sp, r7
 800bfba:	bd80      	pop	{r7, pc}

0800bfbc <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b088      	sub	sp, #32
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800bfc4:	f107 030c 	add.w	r3, r7, #12
 800bfc8:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800bfca:	69fb      	ldr	r3, [r7, #28]
 800bfcc:	687a      	ldr	r2, [r7, #4]
 800bfce:	2110      	movs	r1, #16
 800bfd0:	f64f 4075 	movw	r0, #64629	; 0xfc75
 800bfd4:	f000 fabc 	bl	800c550 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800bfd8:	69fb      	ldr	r3, [r7, #28]
 800bfda:	330b      	adds	r3, #11
 800bfdc:	78db      	ldrb	r3, [r3, #3]
}
 800bfde:	4618      	mov	r0, r3
 800bfe0:	3720      	adds	r7, #32
 800bfe2:	46bd      	mov	sp, r7
 800bfe4:	bd80      	pop	{r7, pc}
	...

0800bfe8 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800bfe8:	b480      	push	{r7}
 800bfea:	b08b      	sub	sp, #44	; 0x2c
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800bff0:	2300      	movs	r3, #0
 800bff2:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800bff4:	2300      	movs	r3, #0
 800bff6:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800bff8:	2300      	movs	r3, #0
 800bffa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800bffc:	2300      	movs	r3, #0
 800bffe:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800c000:	2300      	movs	r3, #0
 800c002:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800c004:	2300      	movs	r3, #0
 800c006:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800c008:	2300      	movs	r3, #0
 800c00a:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800c00c:	2300      	movs	r3, #0
 800c00e:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800c010:	4b4a      	ldr	r3, [pc, #296]	; (800c13c <SHCI_GetWirelessFwInfo+0x154>)
 800c012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c014:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c018:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800c01a:	693b      	ldr	r3, [r7, #16]
 800c01c:	009b      	lsls	r3, r3, #2
 800c01e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800c022:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800c02a:	68bb      	ldr	r3, [r7, #8]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	4a44      	ldr	r2, [pc, #272]	; (800c140 <SHCI_GetWirelessFwInfo+0x158>)
 800c030:	4293      	cmp	r3, r2
 800c032:	d10f      	bne.n	800c054 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800c034:	68bb      	ldr	r3, [r7, #8]
 800c036:	695b      	ldr	r3, [r3, #20]
 800c038:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800c03a:	68bb      	ldr	r3, [r7, #8]
 800c03c:	699b      	ldr	r3, [r3, #24]
 800c03e:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800c040:	68bb      	ldr	r3, [r7, #8]
 800c042:	69db      	ldr	r3, [r3, #28]
 800c044:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800c046:	68bb      	ldr	r3, [r7, #8]
 800c048:	68db      	ldr	r3, [r3, #12]
 800c04a:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800c04c:	68bb      	ldr	r3, [r7, #8]
 800c04e:	691b      	ldr	r3, [r3, #16]
 800c050:	617b      	str	r3, [r7, #20]
 800c052:	e01a      	b.n	800c08a <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800c054:	693b      	ldr	r3, [r7, #16]
 800c056:	009b      	lsls	r3, r3, #2
 800c058:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800c05c:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800c060:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	691b      	ldr	r3, [r3, #16]
 800c068:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	695b      	ldr	r3, [r3, #20]
 800c070:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	699b      	ldr	r3, [r3, #24]
 800c078:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	685b      	ldr	r3, [r3, #4]
 800c080:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	689b      	ldr	r3, [r3, #8]
 800c088:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800c08a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c08c:	0e1b      	lsrs	r3, r3, #24
 800c08e:	b2da      	uxtb	r2, r3
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800c094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c096:	0c1b      	lsrs	r3, r3, #16
 800c098:	b2da      	uxtb	r2, r3
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800c09e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0a0:	0a1b      	lsrs	r3, r3, #8
 800c0a2:	b2da      	uxtb	r2, r3
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800c0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0aa:	091b      	lsrs	r3, r3, #4
 800c0ac:	b2db      	uxtb	r3, r3
 800c0ae:	f003 030f 	and.w	r3, r3, #15
 800c0b2:	b2da      	uxtb	r2, r3
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800c0b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0ba:	b2db      	uxtb	r3, r3
 800c0bc:	f003 030f 	and.w	r3, r3, #15
 800c0c0:	b2da      	uxtb	r2, r3
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800c0c6:	6a3b      	ldr	r3, [r7, #32]
 800c0c8:	0e1b      	lsrs	r3, r3, #24
 800c0ca:	b2da      	uxtb	r2, r3
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800c0d0:	6a3b      	ldr	r3, [r7, #32]
 800c0d2:	0c1b      	lsrs	r3, r3, #16
 800c0d4:	b2da      	uxtb	r2, r3
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800c0da:	6a3b      	ldr	r3, [r7, #32]
 800c0dc:	0a1b      	lsrs	r3, r3, #8
 800c0de:	b2da      	uxtb	r2, r3
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800c0e4:	6a3b      	ldr	r3, [r7, #32]
 800c0e6:	b2da      	uxtb	r2, r3
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800c0ec:	69fb      	ldr	r3, [r7, #28]
 800c0ee:	b2da      	uxtb	r2, r3
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800c0f4:	69bb      	ldr	r3, [r7, #24]
 800c0f6:	0e1b      	lsrs	r3, r3, #24
 800c0f8:	b2da      	uxtb	r2, r3
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800c0fe:	69bb      	ldr	r3, [r7, #24]
 800c100:	0c1b      	lsrs	r3, r3, #16
 800c102:	b2da      	uxtb	r2, r3
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800c108:	69bb      	ldr	r3, [r7, #24]
 800c10a:	0a1b      	lsrs	r3, r3, #8
 800c10c:	b2da      	uxtb	r2, r3
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800c112:	697b      	ldr	r3, [r7, #20]
 800c114:	0e1b      	lsrs	r3, r3, #24
 800c116:	b2da      	uxtb	r2, r3
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800c11c:	697b      	ldr	r3, [r7, #20]
 800c11e:	0c1b      	lsrs	r3, r3, #16
 800c120:	b2da      	uxtb	r2, r3
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800c126:	697b      	ldr	r3, [r7, #20]
 800c128:	b2da      	uxtb	r2, r3
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800c12e:	2300      	movs	r3, #0
}
 800c130:	4618      	mov	r0, r3
 800c132:	372c      	adds	r7, #44	; 0x2c
 800c134:	46bd      	mov	sp, r7
 800c136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13a:	4770      	bx	lr
 800c13c:	58004000 	.word	0x58004000
 800c140:	a94656b9 	.word	0xa94656b9

0800c144 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800c144:	b580      	push	{r7, lr}
 800c146:	b082      	sub	sp, #8
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
 800c14c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800c14e:	683b      	ldr	r3, [r7, #0]
 800c150:	685b      	ldr	r3, [r3, #4]
 800c152:	4a08      	ldr	r2, [pc, #32]	; (800c174 <hci_init+0x30>)
 800c154:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800c156:	4a08      	ldr	r2, [pc, #32]	; (800c178 <hci_init+0x34>)
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800c15c:	4806      	ldr	r0, [pc, #24]	; (800c178 <hci_init+0x34>)
 800c15e:	f000 f979 	bl	800c454 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800c162:	683b      	ldr	r3, [r7, #0]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	4618      	mov	r0, r3
 800c168:	f000 f8da 	bl	800c320 <TlInit>

  return;
 800c16c:	bf00      	nop
}
 800c16e:	3708      	adds	r7, #8
 800c170:	46bd      	mov	sp, r7
 800c172:	bd80      	pop	{r7, pc}
 800c174:	20000908 	.word	0x20000908
 800c178:	200008e0 	.word	0x200008e0

0800c17c <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b084      	sub	sp, #16
 800c180:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800c182:	4822      	ldr	r0, [pc, #136]	; (800c20c <hci_user_evt_proc+0x90>)
 800c184:	f000 fde8 	bl	800cd58 <LST_is_empty>
 800c188:	4603      	mov	r3, r0
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d12b      	bne.n	800c1e6 <hci_user_evt_proc+0x6a>
 800c18e:	4b20      	ldr	r3, [pc, #128]	; (800c210 <hci_user_evt_proc+0x94>)
 800c190:	781b      	ldrb	r3, [r3, #0]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d027      	beq.n	800c1e6 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800c196:	f107 030c 	add.w	r3, r7, #12
 800c19a:	4619      	mov	r1, r3
 800c19c:	481b      	ldr	r0, [pc, #108]	; (800c20c <hci_user_evt_proc+0x90>)
 800c19e:	f000 fe6a 	bl	800ce76 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800c1a2:	4b1c      	ldr	r3, [pc, #112]	; (800c214 <hci_user_evt_proc+0x98>)
 800c1a4:	69db      	ldr	r3, [r3, #28]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d00c      	beq.n	800c1c4 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800c1ae:	2301      	movs	r3, #1
 800c1b0:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800c1b2:	4b18      	ldr	r3, [pc, #96]	; (800c214 <hci_user_evt_proc+0x98>)
 800c1b4:	69db      	ldr	r3, [r3, #28]
 800c1b6:	1d3a      	adds	r2, r7, #4
 800c1b8:	4610      	mov	r0, r2
 800c1ba:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800c1bc:	793a      	ldrb	r2, [r7, #4]
 800c1be:	4b14      	ldr	r3, [pc, #80]	; (800c210 <hci_user_evt_proc+0x94>)
 800c1c0:	701a      	strb	r2, [r3, #0]
 800c1c2:	e002      	b.n	800c1ca <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800c1c4:	4b12      	ldr	r3, [pc, #72]	; (800c210 <hci_user_evt_proc+0x94>)
 800c1c6:	2201      	movs	r2, #1
 800c1c8:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800c1ca:	4b11      	ldr	r3, [pc, #68]	; (800c210 <hci_user_evt_proc+0x94>)
 800c1cc:	781b      	ldrb	r3, [r3, #0]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d004      	beq.n	800c1dc <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	f000 fc0d 	bl	800c9f4 <TL_MM_EvtDone>
 800c1da:	e004      	b.n	800c1e6 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	4619      	mov	r1, r3
 800c1e0:	480a      	ldr	r0, [pc, #40]	; (800c20c <hci_user_evt_proc+0x90>)
 800c1e2:	f000 fddb 	bl	800cd9c <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800c1e6:	4809      	ldr	r0, [pc, #36]	; (800c20c <hci_user_evt_proc+0x90>)
 800c1e8:	f000 fdb6 	bl	800cd58 <LST_is_empty>
 800c1ec:	4603      	mov	r3, r0
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d107      	bne.n	800c202 <hci_user_evt_proc+0x86>
 800c1f2:	4b07      	ldr	r3, [pc, #28]	; (800c210 <hci_user_evt_proc+0x94>)
 800c1f4:	781b      	ldrb	r3, [r3, #0]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d003      	beq.n	800c202 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800c1fa:	4804      	ldr	r0, [pc, #16]	; (800c20c <hci_user_evt_proc+0x90>)
 800c1fc:	f7f8 f86c 	bl	80042d8 <hci_notify_asynch_evt>
  }


  return;
 800c200:	bf00      	nop
 800c202:	bf00      	nop
}
 800c204:	3710      	adds	r7, #16
 800c206:	46bd      	mov	sp, r7
 800c208:	bd80      	pop	{r7, pc}
 800c20a:	bf00      	nop
 800c20c:	20000240 	.word	0x20000240
 800c210:	2000024c 	.word	0x2000024c
 800c214:	200008e0 	.word	0x200008e0

0800c218 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800c218:	b580      	push	{r7, lr}
 800c21a:	b088      	sub	sp, #32
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	6078      	str	r0, [r7, #4]
 800c220:	460b      	mov	r3, r1
 800c222:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800c224:	2000      	movs	r0, #0
 800c226:	f000 f8d1 	bl	800c3cc <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800c22a:	2300      	movs	r3, #0
 800c22c:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	885b      	ldrh	r3, [r3, #2]
 800c232:	b21b      	sxth	r3, r3
 800c234:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c238:	b21a      	sxth	r2, r3
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	881b      	ldrh	r3, [r3, #0]
 800c23e:	029b      	lsls	r3, r3, #10
 800c240:	b21b      	sxth	r3, r3
 800c242:	4313      	orrs	r3, r2
 800c244:	b21b      	sxth	r3, r3
 800c246:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 800c248:	4b33      	ldr	r3, [pc, #204]	; (800c318 <hci_send_req+0x100>)
 800c24a:	2201      	movs	r2, #1
 800c24c:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	68db      	ldr	r3, [r3, #12]
 800c252:	b2d9      	uxtb	r1, r3
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	689a      	ldr	r2, [r3, #8]
 800c258:	8bbb      	ldrh	r3, [r7, #28]
 800c25a:	4618      	mov	r0, r3
 800c25c:	f000 f890 	bl	800c380 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800c260:	e04e      	b.n	800c300 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800c262:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800c266:	f7f8 f84e 	bl	8004306 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800c26a:	e043      	b.n	800c2f4 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800c26c:	f107 030c 	add.w	r3, r7, #12
 800c270:	4619      	mov	r1, r3
 800c272:	482a      	ldr	r0, [pc, #168]	; (800c31c <hci_send_req+0x104>)
 800c274:	f000 fdff 	bl	800ce76 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	7a5b      	ldrb	r3, [r3, #9]
 800c27c:	2b0f      	cmp	r3, #15
 800c27e:	d114      	bne.n	800c2aa <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	330b      	adds	r3, #11
 800c284:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800c286:	693b      	ldr	r3, [r7, #16]
 800c288:	885b      	ldrh	r3, [r3, #2]
 800c28a:	b29b      	uxth	r3, r3
 800c28c:	8bba      	ldrh	r2, [r7, #28]
 800c28e:	429a      	cmp	r2, r3
 800c290:	d104      	bne.n	800c29c <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	691b      	ldr	r3, [r3, #16]
 800c296:	693a      	ldr	r2, [r7, #16]
 800c298:	7812      	ldrb	r2, [r2, #0]
 800c29a:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800c29c:	693b      	ldr	r3, [r7, #16]
 800c29e:	785b      	ldrb	r3, [r3, #1]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d027      	beq.n	800c2f4 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800c2a4:	2301      	movs	r3, #1
 800c2a6:	77fb      	strb	r3, [r7, #31]
 800c2a8:	e024      	b.n	800c2f4 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	330b      	adds	r3, #11
 800c2ae:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800c2b0:	69bb      	ldr	r3, [r7, #24]
 800c2b2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800c2b6:	b29b      	uxth	r3, r3
 800c2b8:	8bba      	ldrh	r2, [r7, #28]
 800c2ba:	429a      	cmp	r2, r3
 800c2bc:	d114      	bne.n	800c2e8 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	7a9b      	ldrb	r3, [r3, #10]
 800c2c2:	3b03      	subs	r3, #3
 800c2c4:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	695a      	ldr	r2, [r3, #20]
 800c2ca:	7dfb      	ldrb	r3, [r7, #23]
 800c2cc:	429a      	cmp	r2, r3
 800c2ce:	bfa8      	it	ge
 800c2d0:	461a      	movge	r2, r3
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	6918      	ldr	r0, [r3, #16]
 800c2da:	69bb      	ldr	r3, [r7, #24]
 800c2dc:	1cd9      	adds	r1, r3, #3
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	695b      	ldr	r3, [r3, #20]
 800c2e2:	461a      	mov	r2, r3
 800c2e4:	f002 fb75 	bl	800e9d2 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800c2e8:	69bb      	ldr	r3, [r7, #24]
 800c2ea:	781b      	ldrb	r3, [r3, #0]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d001      	beq.n	800c2f4 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800c2f0:	2301      	movs	r3, #1
 800c2f2:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800c2f4:	4809      	ldr	r0, [pc, #36]	; (800c31c <hci_send_req+0x104>)
 800c2f6:	f000 fd2f 	bl	800cd58 <LST_is_empty>
 800c2fa:	4603      	mov	r3, r0
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d0b5      	beq.n	800c26c <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800c300:	7ffb      	ldrb	r3, [r7, #31]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d0ad      	beq.n	800c262 <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800c306:	2001      	movs	r0, #1
 800c308:	f000 f860 	bl	800c3cc <NotifyCmdStatus>

  return 0;
 800c30c:	2300      	movs	r3, #0
}
 800c30e:	4618      	mov	r0, r3
 800c310:	3720      	adds	r7, #32
 800c312:	46bd      	mov	sp, r7
 800c314:	bd80      	pop	{r7, pc}
 800c316:	bf00      	nop
 800c318:	2000090c 	.word	0x2000090c
 800c31c:	20000900 	.word	0x20000900

0800c320 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800c320:	b580      	push	{r7, lr}
 800c322:	b086      	sub	sp, #24
 800c324:	af00      	add	r7, sp, #0
 800c326:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800c328:	480f      	ldr	r0, [pc, #60]	; (800c368 <TlInit+0x48>)
 800c32a:	f000 fd05 	bl	800cd38 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800c32e:	4a0f      	ldr	r2, [pc, #60]	; (800c36c <TlInit+0x4c>)
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800c334:	480e      	ldr	r0, [pc, #56]	; (800c370 <TlInit+0x50>)
 800c336:	f000 fcff 	bl	800cd38 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800c33a:	4b0e      	ldr	r3, [pc, #56]	; (800c374 <TlInit+0x54>)
 800c33c:	2201      	movs	r2, #1
 800c33e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800c340:	4b0d      	ldr	r3, [pc, #52]	; (800c378 <TlInit+0x58>)
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d00a      	beq.n	800c35e <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800c34c:	4b0b      	ldr	r3, [pc, #44]	; (800c37c <TlInit+0x5c>)
 800c34e:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800c350:	4b09      	ldr	r3, [pc, #36]	; (800c378 <TlInit+0x58>)
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	f107 0208 	add.w	r2, r7, #8
 800c358:	4610      	mov	r0, r2
 800c35a:	4798      	blx	r3
  }

  return;
 800c35c:	bf00      	nop
 800c35e:	bf00      	nop
}
 800c360:	3718      	adds	r7, #24
 800c362:	46bd      	mov	sp, r7
 800c364:	bd80      	pop	{r7, pc}
 800c366:	bf00      	nop
 800c368:	20000900 	.word	0x20000900
 800c36c:	20000248 	.word	0x20000248
 800c370:	20000240 	.word	0x20000240
 800c374:	2000024c 	.word	0x2000024c
 800c378:	200008e0 	.word	0x200008e0
 800c37c:	0800c40d 	.word	0x0800c40d

0800c380 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800c380:	b580      	push	{r7, lr}
 800c382:	b082      	sub	sp, #8
 800c384:	af00      	add	r7, sp, #0
 800c386:	4603      	mov	r3, r0
 800c388:	603a      	str	r2, [r7, #0]
 800c38a:	80fb      	strh	r3, [r7, #6]
 800c38c:	460b      	mov	r3, r1
 800c38e:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800c390:	4b0c      	ldr	r3, [pc, #48]	; (800c3c4 <SendCmd+0x44>)
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	88fa      	ldrh	r2, [r7, #6]
 800c396:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800c39a:	4b0a      	ldr	r3, [pc, #40]	; (800c3c4 <SendCmd+0x44>)
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	797a      	ldrb	r2, [r7, #5]
 800c3a0:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800c3a2:	4b08      	ldr	r3, [pc, #32]	; (800c3c4 <SendCmd+0x44>)
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	330c      	adds	r3, #12
 800c3a8:	797a      	ldrb	r2, [r7, #5]
 800c3aa:	6839      	ldr	r1, [r7, #0]
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	f002 fb10 	bl	800e9d2 <memcpy>

  hciContext.io.Send(0,0);
 800c3b2:	4b05      	ldr	r3, [pc, #20]	; (800c3c8 <SendCmd+0x48>)
 800c3b4:	691b      	ldr	r3, [r3, #16]
 800c3b6:	2100      	movs	r1, #0
 800c3b8:	2000      	movs	r0, #0
 800c3ba:	4798      	blx	r3

  return;
 800c3bc:	bf00      	nop
}
 800c3be:	3708      	adds	r7, #8
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	bd80      	pop	{r7, pc}
 800c3c4:	20000248 	.word	0x20000248
 800c3c8:	200008e0 	.word	0x200008e0

0800c3cc <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	b082      	sub	sp, #8
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	4603      	mov	r3, r0
 800c3d4:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800c3d6:	79fb      	ldrb	r3, [r7, #7]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d108      	bne.n	800c3ee <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800c3dc:	4b0a      	ldr	r3, [pc, #40]	; (800c408 <NotifyCmdStatus+0x3c>)
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d00d      	beq.n	800c400 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800c3e4:	4b08      	ldr	r3, [pc, #32]	; (800c408 <NotifyCmdStatus+0x3c>)
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	2000      	movs	r0, #0
 800c3ea:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800c3ec:	e008      	b.n	800c400 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800c3ee:	4b06      	ldr	r3, [pc, #24]	; (800c408 <NotifyCmdStatus+0x3c>)
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d004      	beq.n	800c400 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800c3f6:	4b04      	ldr	r3, [pc, #16]	; (800c408 <NotifyCmdStatus+0x3c>)
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	2001      	movs	r0, #1
 800c3fc:	4798      	blx	r3
  return;
 800c3fe:	bf00      	nop
 800c400:	bf00      	nop
}
 800c402:	3708      	adds	r7, #8
 800c404:	46bd      	mov	sp, r7
 800c406:	bd80      	pop	{r7, pc}
 800c408:	20000908 	.word	0x20000908

0800c40c <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800c40c:	b580      	push	{r7, lr}
 800c40e:	b082      	sub	sp, #8
 800c410:	af00      	add	r7, sp, #0
 800c412:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	7a5b      	ldrb	r3, [r3, #9]
 800c418:	2b0f      	cmp	r3, #15
 800c41a:	d003      	beq.n	800c424 <TlEvtReceived+0x18>
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	7a5b      	ldrb	r3, [r3, #9]
 800c420:	2b0e      	cmp	r3, #14
 800c422:	d107      	bne.n	800c434 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800c424:	6879      	ldr	r1, [r7, #4]
 800c426:	4809      	ldr	r0, [pc, #36]	; (800c44c <TlEvtReceived+0x40>)
 800c428:	f000 fcde 	bl	800cde8 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800c42c:	2000      	movs	r0, #0
 800c42e:	f7f7 ff5f 	bl	80042f0 <hci_cmd_resp_release>
 800c432:	e006      	b.n	800c442 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800c434:	6879      	ldr	r1, [r7, #4]
 800c436:	4806      	ldr	r0, [pc, #24]	; (800c450 <TlEvtReceived+0x44>)
 800c438:	f000 fcd6 	bl	800cde8 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800c43c:	4804      	ldr	r0, [pc, #16]	; (800c450 <TlEvtReceived+0x44>)
 800c43e:	f7f7 ff4b 	bl	80042d8 <hci_notify_asynch_evt>
  }

  return;
 800c442:	bf00      	nop
}
 800c444:	3708      	adds	r7, #8
 800c446:	46bd      	mov	sp, r7
 800c448:	bd80      	pop	{r7, pc}
 800c44a:	bf00      	nop
 800c44c:	20000900 	.word	0x20000900
 800c450:	20000240 	.word	0x20000240

0800c454 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800c454:	b480      	push	{r7}
 800c456:	b083      	sub	sp, #12
 800c458:	af00      	add	r7, sp, #0
 800c45a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	4a05      	ldr	r2, [pc, #20]	; (800c474 <hci_register_io_bus+0x20>)
 800c460:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	4a04      	ldr	r2, [pc, #16]	; (800c478 <hci_register_io_bus+0x24>)
 800c466:	611a      	str	r2, [r3, #16]

  return;
 800c468:	bf00      	nop
}
 800c46a:	370c      	adds	r7, #12
 800c46c:	46bd      	mov	sp, r7
 800c46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c472:	4770      	bx	lr
 800c474:	0800c76d 	.word	0x0800c76d
 800c478:	0800c7d5 	.word	0x0800c7d5

0800c47c <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b082      	sub	sp, #8
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
 800c484:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800c486:	683b      	ldr	r3, [r7, #0]
 800c488:	685b      	ldr	r3, [r3, #4]
 800c48a:	4a08      	ldr	r2, [pc, #32]	; (800c4ac <shci_init+0x30>)
 800c48c:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800c48e:	4a08      	ldr	r2, [pc, #32]	; (800c4b0 <shci_init+0x34>)
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800c494:	4806      	ldr	r0, [pc, #24]	; (800c4b0 <shci_init+0x34>)
 800c496:	f000 f915 	bl	800c6c4 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800c49a:	683b      	ldr	r3, [r7, #0]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	4618      	mov	r0, r3
 800c4a0:	f000 f898 	bl	800c5d4 <TlInit>

  return;
 800c4a4:	bf00      	nop
}
 800c4a6:	3708      	adds	r7, #8
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	bd80      	pop	{r7, pc}
 800c4ac:	20000930 	.word	0x20000930
 800c4b0:	20000910 	.word	0x20000910

0800c4b4 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800c4b4:	b580      	push	{r7, lr}
 800c4b6:	b084      	sub	sp, #16
 800c4b8:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800c4ba:	4822      	ldr	r0, [pc, #136]	; (800c544 <shci_user_evt_proc+0x90>)
 800c4bc:	f000 fc4c 	bl	800cd58 <LST_is_empty>
 800c4c0:	4603      	mov	r3, r0
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d12b      	bne.n	800c51e <shci_user_evt_proc+0x6a>
 800c4c6:	4b20      	ldr	r3, [pc, #128]	; (800c548 <shci_user_evt_proc+0x94>)
 800c4c8:	781b      	ldrb	r3, [r3, #0]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d027      	beq.n	800c51e <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800c4ce:	f107 030c 	add.w	r3, r7, #12
 800c4d2:	4619      	mov	r1, r3
 800c4d4:	481b      	ldr	r0, [pc, #108]	; (800c544 <shci_user_evt_proc+0x90>)
 800c4d6:	f000 fcce 	bl	800ce76 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800c4da:	4b1c      	ldr	r3, [pc, #112]	; (800c54c <shci_user_evt_proc+0x98>)
 800c4dc:	69db      	ldr	r3, [r3, #28]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d00c      	beq.n	800c4fc <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800c4e6:	2301      	movs	r3, #1
 800c4e8:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800c4ea:	4b18      	ldr	r3, [pc, #96]	; (800c54c <shci_user_evt_proc+0x98>)
 800c4ec:	69db      	ldr	r3, [r3, #28]
 800c4ee:	1d3a      	adds	r2, r7, #4
 800c4f0:	4610      	mov	r0, r2
 800c4f2:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800c4f4:	793a      	ldrb	r2, [r7, #4]
 800c4f6:	4b14      	ldr	r3, [pc, #80]	; (800c548 <shci_user_evt_proc+0x94>)
 800c4f8:	701a      	strb	r2, [r3, #0]
 800c4fa:	e002      	b.n	800c502 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800c4fc:	4b12      	ldr	r3, [pc, #72]	; (800c548 <shci_user_evt_proc+0x94>)
 800c4fe:	2201      	movs	r2, #1
 800c500:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800c502:	4b11      	ldr	r3, [pc, #68]	; (800c548 <shci_user_evt_proc+0x94>)
 800c504:	781b      	ldrb	r3, [r3, #0]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d004      	beq.n	800c514 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	4618      	mov	r0, r3
 800c50e:	f000 fa71 	bl	800c9f4 <TL_MM_EvtDone>
 800c512:	e004      	b.n	800c51e <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	4619      	mov	r1, r3
 800c518:	480a      	ldr	r0, [pc, #40]	; (800c544 <shci_user_evt_proc+0x90>)
 800c51a:	f000 fc3f 	bl	800cd9c <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800c51e:	4809      	ldr	r0, [pc, #36]	; (800c544 <shci_user_evt_proc+0x90>)
 800c520:	f000 fc1a 	bl	800cd58 <LST_is_empty>
 800c524:	4603      	mov	r3, r0
 800c526:	2b00      	cmp	r3, #0
 800c528:	d107      	bne.n	800c53a <shci_user_evt_proc+0x86>
 800c52a:	4b07      	ldr	r3, [pc, #28]	; (800c548 <shci_user_evt_proc+0x94>)
 800c52c:	781b      	ldrb	r3, [r3, #0]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d003      	beq.n	800c53a <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800c532:	4804      	ldr	r0, [pc, #16]	; (800c544 <shci_user_evt_proc+0x90>)
 800c534:	f7f5 fa0f 	bl	8001956 <shci_notify_asynch_evt>
  }


  return;
 800c538:	bf00      	nop
 800c53a:	bf00      	nop
}
 800c53c:	3710      	adds	r7, #16
 800c53e:	46bd      	mov	sp, r7
 800c540:	bd80      	pop	{r7, pc}
 800c542:	bf00      	nop
 800c544:	20000250 	.word	0x20000250
 800c548:	20000260 	.word	0x20000260
 800c54c:	20000910 	.word	0x20000910

0800c550 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800c550:	b580      	push	{r7, lr}
 800c552:	b084      	sub	sp, #16
 800c554:	af00      	add	r7, sp, #0
 800c556:	60ba      	str	r2, [r7, #8]
 800c558:	607b      	str	r3, [r7, #4]
 800c55a:	4603      	mov	r3, r0
 800c55c:	81fb      	strh	r3, [r7, #14]
 800c55e:	460b      	mov	r3, r1
 800c560:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800c562:	2000      	movs	r0, #0
 800c564:	f000 f868 	bl	800c638 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800c568:	4b17      	ldr	r3, [pc, #92]	; (800c5c8 <shci_send+0x78>)
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	89fa      	ldrh	r2, [r7, #14]
 800c56e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800c572:	4b15      	ldr	r3, [pc, #84]	; (800c5c8 <shci_send+0x78>)
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	7b7a      	ldrb	r2, [r7, #13]
 800c578:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800c57a:	4b13      	ldr	r3, [pc, #76]	; (800c5c8 <shci_send+0x78>)
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	330c      	adds	r3, #12
 800c580:	7b7a      	ldrb	r2, [r7, #13]
 800c582:	68b9      	ldr	r1, [r7, #8]
 800c584:	4618      	mov	r0, r3
 800c586:	f002 fa24 	bl	800e9d2 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 800c58a:	4b10      	ldr	r3, [pc, #64]	; (800c5cc <shci_send+0x7c>)
 800c58c:	2201      	movs	r2, #1
 800c58e:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 800c590:	4b0f      	ldr	r3, [pc, #60]	; (800c5d0 <shci_send+0x80>)
 800c592:	691b      	ldr	r3, [r3, #16]
 800c594:	2100      	movs	r1, #0
 800c596:	2000      	movs	r0, #0
 800c598:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800c59a:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800c59e:	f7f5 f9f2 	bl	8001986 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	f103 0008 	add.w	r0, r3, #8
 800c5a8:	4b07      	ldr	r3, [pc, #28]	; (800c5c8 <shci_send+0x78>)
 800c5aa:	6819      	ldr	r1, [r3, #0]
 800c5ac:	4b06      	ldr	r3, [pc, #24]	; (800c5c8 <shci_send+0x78>)
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	789b      	ldrb	r3, [r3, #2]
 800c5b2:	3303      	adds	r3, #3
 800c5b4:	461a      	mov	r2, r3
 800c5b6:	f002 fa0c 	bl	800e9d2 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800c5ba:	2001      	movs	r0, #1
 800c5bc:	f000 f83c 	bl	800c638 <Cmd_SetStatus>

  return;
 800c5c0:	bf00      	nop
}
 800c5c2:	3710      	adds	r7, #16
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	bd80      	pop	{r7, pc}
 800c5c8:	2000025c 	.word	0x2000025c
 800c5cc:	20000934 	.word	0x20000934
 800c5d0:	20000910 	.word	0x20000910

0800c5d4 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b086      	sub	sp, #24
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800c5dc:	4a10      	ldr	r2, [pc, #64]	; (800c620 <TlInit+0x4c>)
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800c5e2:	4810      	ldr	r0, [pc, #64]	; (800c624 <TlInit+0x50>)
 800c5e4:	f000 fba8 	bl	800cd38 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800c5e8:	2001      	movs	r0, #1
 800c5ea:	f000 f825 	bl	800c638 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800c5ee:	4b0e      	ldr	r3, [pc, #56]	; (800c628 <TlInit+0x54>)
 800c5f0:	2201      	movs	r2, #1
 800c5f2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800c5f4:	4b0d      	ldr	r3, [pc, #52]	; (800c62c <TlInit+0x58>)
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d00c      	beq.n	800c616 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800c600:	4b0b      	ldr	r3, [pc, #44]	; (800c630 <TlInit+0x5c>)
 800c602:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800c604:	4b0b      	ldr	r3, [pc, #44]	; (800c634 <TlInit+0x60>)
 800c606:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800c608:	4b08      	ldr	r3, [pc, #32]	; (800c62c <TlInit+0x58>)
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	f107 020c 	add.w	r2, r7, #12
 800c610:	4610      	mov	r0, r2
 800c612:	4798      	blx	r3
  }

  return;
 800c614:	bf00      	nop
 800c616:	bf00      	nop
}
 800c618:	3718      	adds	r7, #24
 800c61a:	46bd      	mov	sp, r7
 800c61c:	bd80      	pop	{r7, pc}
 800c61e:	bf00      	nop
 800c620:	2000025c 	.word	0x2000025c
 800c624:	20000250 	.word	0x20000250
 800c628:	20000260 	.word	0x20000260
 800c62c:	20000910 	.word	0x20000910
 800c630:	0800c689 	.word	0x0800c689
 800c634:	0800c6a1 	.word	0x0800c6a1

0800c638 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800c638:	b580      	push	{r7, lr}
 800c63a:	b082      	sub	sp, #8
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	4603      	mov	r3, r0
 800c640:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800c642:	79fb      	ldrb	r3, [r7, #7]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d10b      	bne.n	800c660 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800c648:	4b0d      	ldr	r3, [pc, #52]	; (800c680 <Cmd_SetStatus+0x48>)
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d003      	beq.n	800c658 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800c650:	4b0b      	ldr	r3, [pc, #44]	; (800c680 <Cmd_SetStatus+0x48>)
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	2000      	movs	r0, #0
 800c656:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800c658:	4b0a      	ldr	r3, [pc, #40]	; (800c684 <Cmd_SetStatus+0x4c>)
 800c65a:	2200      	movs	r2, #0
 800c65c:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800c65e:	e00b      	b.n	800c678 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800c660:	4b08      	ldr	r3, [pc, #32]	; (800c684 <Cmd_SetStatus+0x4c>)
 800c662:	2201      	movs	r2, #1
 800c664:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800c666:	4b06      	ldr	r3, [pc, #24]	; (800c680 <Cmd_SetStatus+0x48>)
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d004      	beq.n	800c678 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800c66e:	4b04      	ldr	r3, [pc, #16]	; (800c680 <Cmd_SetStatus+0x48>)
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	2001      	movs	r0, #1
 800c674:	4798      	blx	r3
  return;
 800c676:	bf00      	nop
 800c678:	bf00      	nop
}
 800c67a:	3708      	adds	r7, #8
 800c67c:	46bd      	mov	sp, r7
 800c67e:	bd80      	pop	{r7, pc}
 800c680:	20000930 	.word	0x20000930
 800c684:	20000258 	.word	0x20000258

0800c688 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b082      	sub	sp, #8
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800c690:	2000      	movs	r0, #0
 800c692:	f7f5 f96d 	bl	8001970 <shci_cmd_resp_release>

  return;
 800c696:	bf00      	nop
}
 800c698:	3708      	adds	r7, #8
 800c69a:	46bd      	mov	sp, r7
 800c69c:	bd80      	pop	{r7, pc}
	...

0800c6a0 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800c6a0:	b580      	push	{r7, lr}
 800c6a2:	b082      	sub	sp, #8
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800c6a8:	6879      	ldr	r1, [r7, #4]
 800c6aa:	4805      	ldr	r0, [pc, #20]	; (800c6c0 <TlUserEvtReceived+0x20>)
 800c6ac:	f000 fb9c 	bl	800cde8 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800c6b0:	4803      	ldr	r0, [pc, #12]	; (800c6c0 <TlUserEvtReceived+0x20>)
 800c6b2:	f7f5 f950 	bl	8001956 <shci_notify_asynch_evt>

  return;
 800c6b6:	bf00      	nop
}
 800c6b8:	3708      	adds	r7, #8
 800c6ba:	46bd      	mov	sp, r7
 800c6bc:	bd80      	pop	{r7, pc}
 800c6be:	bf00      	nop
 800c6c0:	20000250 	.word	0x20000250

0800c6c4 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800c6c4:	b480      	push	{r7}
 800c6c6:	b083      	sub	sp, #12
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	4a05      	ldr	r2, [pc, #20]	; (800c6e4 <shci_register_io_bus+0x20>)
 800c6d0:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	4a04      	ldr	r2, [pc, #16]	; (800c6e8 <shci_register_io_bus+0x24>)
 800c6d6:	611a      	str	r2, [r3, #16]

  return;
 800c6d8:	bf00      	nop
}
 800c6da:	370c      	adds	r7, #12
 800c6dc:	46bd      	mov	sp, r7
 800c6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e2:	4770      	bx	lr
 800c6e4:	0800c881 	.word	0x0800c881
 800c6e8:	0800c8d5 	.word	0x0800c8d5

0800c6ec <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800c6f0:	f7f8 f992 	bl	8004a18 <HW_IPCC_Enable>

  return;
 800c6f4:	bf00      	nop
}
 800c6f6:	bd80      	pop	{r7, pc}

0800c6f8 <TL_Init>:


void TL_Init( void )
{
 800c6f8:	b580      	push	{r7, lr}
 800c6fa:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800c6fc:	4b10      	ldr	r3, [pc, #64]	; (800c740 <TL_Init+0x48>)
 800c6fe:	4a11      	ldr	r2, [pc, #68]	; (800c744 <TL_Init+0x4c>)
 800c700:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800c702:	4b0f      	ldr	r3, [pc, #60]	; (800c740 <TL_Init+0x48>)
 800c704:	4a10      	ldr	r2, [pc, #64]	; (800c748 <TL_Init+0x50>)
 800c706:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800c708:	4b0d      	ldr	r3, [pc, #52]	; (800c740 <TL_Init+0x48>)
 800c70a:	4a10      	ldr	r2, [pc, #64]	; (800c74c <TL_Init+0x54>)
 800c70c:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800c70e:	4b0c      	ldr	r3, [pc, #48]	; (800c740 <TL_Init+0x48>)
 800c710:	4a0f      	ldr	r2, [pc, #60]	; (800c750 <TL_Init+0x58>)
 800c712:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800c714:	4b0a      	ldr	r3, [pc, #40]	; (800c740 <TL_Init+0x48>)
 800c716:	4a0f      	ldr	r2, [pc, #60]	; (800c754 <TL_Init+0x5c>)
 800c718:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800c71a:	4b09      	ldr	r3, [pc, #36]	; (800c740 <TL_Init+0x48>)
 800c71c:	4a0e      	ldr	r2, [pc, #56]	; (800c758 <TL_Init+0x60>)
 800c71e:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800c720:	4b07      	ldr	r3, [pc, #28]	; (800c740 <TL_Init+0x48>)
 800c722:	4a0e      	ldr	r2, [pc, #56]	; (800c75c <TL_Init+0x64>)
 800c724:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800c726:	4b06      	ldr	r3, [pc, #24]	; (800c740 <TL_Init+0x48>)
 800c728:	4a0d      	ldr	r2, [pc, #52]	; (800c760 <TL_Init+0x68>)
 800c72a:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800c72c:	4b04      	ldr	r3, [pc, #16]	; (800c740 <TL_Init+0x48>)
 800c72e:	4a0d      	ldr	r2, [pc, #52]	; (800c764 <TL_Init+0x6c>)
 800c730:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800c732:	4b03      	ldr	r3, [pc, #12]	; (800c740 <TL_Init+0x48>)
 800c734:	4a0c      	ldr	r2, [pc, #48]	; (800c768 <TL_Init+0x70>)
 800c736:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800c738:	f7f8 f982 	bl	8004a40 <HW_IPCC_Init>

  return;
 800c73c:	bf00      	nop
}
 800c73e:	bd80      	pop	{r7, pc}
 800c740:	20030000 	.word	0x20030000
 800c744:	20030134 	.word	0x20030134
 800c748:	20030154 	.word	0x20030154
 800c74c:	20030164 	.word	0x20030164
 800c750:	20030174 	.word	0x20030174
 800c754:	2003017c 	.word	0x2003017c
 800c758:	20030184 	.word	0x20030184
 800c75c:	2003018c 	.word	0x2003018c
 800c760:	200301a8 	.word	0x200301a8
 800c764:	200301ac 	.word	0x200301ac
 800c768:	200301b8 	.word	0x200301b8

0800c76c <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800c76c:	b580      	push	{r7, lr}
 800c76e:	b084      	sub	sp, #16
 800c770:	af00      	add	r7, sp, #0
 800c772:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800c778:	4811      	ldr	r0, [pc, #68]	; (800c7c0 <TL_BLE_Init+0x54>)
 800c77a:	f000 fadd 	bl	800cd38 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800c77e:	4b11      	ldr	r3, [pc, #68]	; (800c7c4 <TL_BLE_Init+0x58>)
 800c780:	685b      	ldr	r3, [r3, #4]
 800c782:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	689a      	ldr	r2, [r3, #8]
 800c788:	68bb      	ldr	r3, [r7, #8]
 800c78a:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	68da      	ldr	r2, [r3, #12]
 800c790:	68bb      	ldr	r3, [r7, #8]
 800c792:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800c794:	68bb      	ldr	r3, [r7, #8]
 800c796:	4a0c      	ldr	r2, [pc, #48]	; (800c7c8 <TL_BLE_Init+0x5c>)
 800c798:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800c79a:	68bb      	ldr	r3, [r7, #8]
 800c79c:	4a08      	ldr	r2, [pc, #32]	; (800c7c0 <TL_BLE_Init+0x54>)
 800c79e:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800c7a0:	f7f8 f964 	bl	8004a6c <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	4a08      	ldr	r2, [pc, #32]	; (800c7cc <TL_BLE_Init+0x60>)
 800c7aa:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	685b      	ldr	r3, [r3, #4]
 800c7b0:	4a07      	ldr	r2, [pc, #28]	; (800c7d0 <TL_BLE_Init+0x64>)
 800c7b2:	6013      	str	r3, [r2, #0]

  return 0;
 800c7b4:	2300      	movs	r3, #0
}
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	3710      	adds	r7, #16
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	bd80      	pop	{r7, pc}
 800c7be:	bf00      	nop
 800c7c0:	200301d4 	.word	0x200301d4
 800c7c4:	20030000 	.word	0x20030000
 800c7c8:	20030a58 	.word	0x20030a58
 800c7cc:	20000940 	.word	0x20000940
 800c7d0:	20000944 	.word	0x20000944

0800c7d4 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b082      	sub	sp, #8
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
 800c7dc:	460b      	mov	r3, r1
 800c7de:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800c7e0:	4b09      	ldr	r3, [pc, #36]	; (800c808 <TL_BLE_SendCmd+0x34>)
 800c7e2:	685b      	ldr	r3, [r3, #4]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	2201      	movs	r2, #1
 800c7e8:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800c7ea:	4b07      	ldr	r3, [pc, #28]	; (800c808 <TL_BLE_SendCmd+0x34>)
 800c7ec:	685b      	ldr	r3, [r3, #4]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	4619      	mov	r1, r3
 800c7f2:	2001      	movs	r0, #1
 800c7f4:	f000 f96c 	bl	800cad0 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800c7f8:	f7f8 f942 	bl	8004a80 <HW_IPCC_BLE_SendCmd>

  return 0;
 800c7fc:	2300      	movs	r3, #0
}
 800c7fe:	4618      	mov	r0, r3
 800c800:	3708      	adds	r7, #8
 800c802:	46bd      	mov	sp, r7
 800c804:	bd80      	pop	{r7, pc}
 800c806:	bf00      	nop
 800c808:	20030000 	.word	0x20030000

0800c80c <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800c80c:	b580      	push	{r7, lr}
 800c80e:	b082      	sub	sp, #8
 800c810:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800c812:	e01c      	b.n	800c84e <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800c814:	1d3b      	adds	r3, r7, #4
 800c816:	4619      	mov	r1, r3
 800c818:	4812      	ldr	r0, [pc, #72]	; (800c864 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800c81a:	f000 fb2c 	bl	800ce76 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	7a5b      	ldrb	r3, [r3, #9]
 800c822:	2b0f      	cmp	r3, #15
 800c824:	d003      	beq.n	800c82e <HW_IPCC_BLE_RxEvtNot+0x22>
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	7a5b      	ldrb	r3, [r3, #9]
 800c82a:	2b0e      	cmp	r3, #14
 800c82c:	d105      	bne.n	800c83a <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	4619      	mov	r1, r3
 800c832:	2002      	movs	r0, #2
 800c834:	f000 f94c 	bl	800cad0 <OutputDbgTrace>
 800c838:	e004      	b.n	800c844 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	4619      	mov	r1, r3
 800c83e:	2003      	movs	r0, #3
 800c840:	f000 f946 	bl	800cad0 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800c844:	4b08      	ldr	r3, [pc, #32]	; (800c868 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	687a      	ldr	r2, [r7, #4]
 800c84a:	4610      	mov	r0, r2
 800c84c:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800c84e:	4805      	ldr	r0, [pc, #20]	; (800c864 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800c850:	f000 fa82 	bl	800cd58 <LST_is_empty>
 800c854:	4603      	mov	r3, r0
 800c856:	2b00      	cmp	r3, #0
 800c858:	d0dc      	beq.n	800c814 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800c85a:	bf00      	nop
}
 800c85c:	3708      	adds	r7, #8
 800c85e:	46bd      	mov	sp, r7
 800c860:	bd80      	pop	{r7, pc}
 800c862:	bf00      	nop
 800c864:	200301d4 	.word	0x200301d4
 800c868:	20000940 	.word	0x20000940

0800c86c <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800c870:	4b02      	ldr	r3, [pc, #8]	; (800c87c <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	4798      	blx	r3

  return;
 800c876:	bf00      	nop
}
 800c878:	bd80      	pop	{r7, pc}
 800c87a:	bf00      	nop
 800c87c:	20000944 	.word	0x20000944

0800c880 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800c880:	b580      	push	{r7, lr}
 800c882:	b084      	sub	sp, #16
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800c88c:	480d      	ldr	r0, [pc, #52]	; (800c8c4 <TL_SYS_Init+0x44>)
 800c88e:	f000 fa53 	bl	800cd38 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800c892:	4b0d      	ldr	r3, [pc, #52]	; (800c8c8 <TL_SYS_Init+0x48>)
 800c894:	68db      	ldr	r3, [r3, #12]
 800c896:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	689a      	ldr	r2, [r3, #8]
 800c89c:	68bb      	ldr	r3, [r7, #8]
 800c89e:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800c8a0:	68bb      	ldr	r3, [r7, #8]
 800c8a2:	4a08      	ldr	r2, [pc, #32]	; (800c8c4 <TL_SYS_Init+0x44>)
 800c8a4:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800c8a6:	f7f8 f90d 	bl	8004ac4 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	4a07      	ldr	r2, [pc, #28]	; (800c8cc <TL_SYS_Init+0x4c>)
 800c8b0:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	685b      	ldr	r3, [r3, #4]
 800c8b6:	4a06      	ldr	r2, [pc, #24]	; (800c8d0 <TL_SYS_Init+0x50>)
 800c8b8:	6013      	str	r3, [r2, #0]

  return 0;
 800c8ba:	2300      	movs	r3, #0
}
 800c8bc:	4618      	mov	r0, r3
 800c8be:	3710      	adds	r7, #16
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	bd80      	pop	{r7, pc}
 800c8c4:	200301dc 	.word	0x200301dc
 800c8c8:	20030000 	.word	0x20030000
 800c8cc:	20000948 	.word	0x20000948
 800c8d0:	2000094c 	.word	0x2000094c

0800c8d4 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	b082      	sub	sp, #8
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	6078      	str	r0, [r7, #4]
 800c8dc:	460b      	mov	r3, r1
 800c8de:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800c8e0:	4b09      	ldr	r3, [pc, #36]	; (800c908 <TL_SYS_SendCmd+0x34>)
 800c8e2:	68db      	ldr	r3, [r3, #12]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	2210      	movs	r2, #16
 800c8e8:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800c8ea:	4b07      	ldr	r3, [pc, #28]	; (800c908 <TL_SYS_SendCmd+0x34>)
 800c8ec:	68db      	ldr	r3, [r3, #12]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	4619      	mov	r1, r3
 800c8f2:	2004      	movs	r0, #4
 800c8f4:	f000 f8ec 	bl	800cad0 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800c8f8:	f7f8 f8ee 	bl	8004ad8 <HW_IPCC_SYS_SendCmd>

  return 0;
 800c8fc:	2300      	movs	r3, #0
}
 800c8fe:	4618      	mov	r0, r3
 800c900:	3708      	adds	r7, #8
 800c902:	46bd      	mov	sp, r7
 800c904:	bd80      	pop	{r7, pc}
 800c906:	bf00      	nop
 800c908:	20030000 	.word	0x20030000

0800c90c <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800c90c:	b580      	push	{r7, lr}
 800c90e:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800c910:	4b07      	ldr	r3, [pc, #28]	; (800c930 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800c912:	68db      	ldr	r3, [r3, #12]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	4619      	mov	r1, r3
 800c918:	2005      	movs	r0, #5
 800c91a:	f000 f8d9 	bl	800cad0 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800c91e:	4b05      	ldr	r3, [pc, #20]	; (800c934 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	4a03      	ldr	r2, [pc, #12]	; (800c930 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800c924:	68d2      	ldr	r2, [r2, #12]
 800c926:	6812      	ldr	r2, [r2, #0]
 800c928:	4610      	mov	r0, r2
 800c92a:	4798      	blx	r3

  return;
 800c92c:	bf00      	nop
}
 800c92e:	bd80      	pop	{r7, pc}
 800c930:	20030000 	.word	0x20030000
 800c934:	20000948 	.word	0x20000948

0800c938 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800c938:	b580      	push	{r7, lr}
 800c93a:	b082      	sub	sp, #8
 800c93c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800c93e:	e00e      	b.n	800c95e <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800c940:	1d3b      	adds	r3, r7, #4
 800c942:	4619      	mov	r1, r3
 800c944:	480b      	ldr	r0, [pc, #44]	; (800c974 <HW_IPCC_SYS_EvtNot+0x3c>)
 800c946:	f000 fa96 	bl	800ce76 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	4619      	mov	r1, r3
 800c94e:	2006      	movs	r0, #6
 800c950:	f000 f8be 	bl	800cad0 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800c954:	4b08      	ldr	r3, [pc, #32]	; (800c978 <HW_IPCC_SYS_EvtNot+0x40>)
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	687a      	ldr	r2, [r7, #4]
 800c95a:	4610      	mov	r0, r2
 800c95c:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800c95e:	4805      	ldr	r0, [pc, #20]	; (800c974 <HW_IPCC_SYS_EvtNot+0x3c>)
 800c960:	f000 f9fa 	bl	800cd58 <LST_is_empty>
 800c964:	4603      	mov	r3, r0
 800c966:	2b00      	cmp	r3, #0
 800c968:	d0ea      	beq.n	800c940 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800c96a:	bf00      	nop
}
 800c96c:	3708      	adds	r7, #8
 800c96e:	46bd      	mov	sp, r7
 800c970:	bd80      	pop	{r7, pc}
 800c972:	bf00      	nop
 800c974:	200301dc 	.word	0x200301dc
 800c978:	2000094c 	.word	0x2000094c

0800c97c <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b082      	sub	sp, #8
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800c984:	4817      	ldr	r0, [pc, #92]	; (800c9e4 <TL_MM_Init+0x68>)
 800c986:	f000 f9d7 	bl	800cd38 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800c98a:	4817      	ldr	r0, [pc, #92]	; (800c9e8 <TL_MM_Init+0x6c>)
 800c98c:	f000 f9d4 	bl	800cd38 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800c990:	4b16      	ldr	r3, [pc, #88]	; (800c9ec <TL_MM_Init+0x70>)
 800c992:	691b      	ldr	r3, [r3, #16]
 800c994:	4a16      	ldr	r2, [pc, #88]	; (800c9f0 <TL_MM_Init+0x74>)
 800c996:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800c998:	4b15      	ldr	r3, [pc, #84]	; (800c9f0 <TL_MM_Init+0x74>)
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	687a      	ldr	r2, [r7, #4]
 800c99e:	6892      	ldr	r2, [r2, #8]
 800c9a0:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800c9a2:	4b13      	ldr	r3, [pc, #76]	; (800c9f0 <TL_MM_Init+0x74>)
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	687a      	ldr	r2, [r7, #4]
 800c9a8:	68d2      	ldr	r2, [r2, #12]
 800c9aa:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800c9ac:	4b10      	ldr	r3, [pc, #64]	; (800c9f0 <TL_MM_Init+0x74>)
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	4a0c      	ldr	r2, [pc, #48]	; (800c9e4 <TL_MM_Init+0x68>)
 800c9b2:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800c9b4:	4b0e      	ldr	r3, [pc, #56]	; (800c9f0 <TL_MM_Init+0x74>)
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	687a      	ldr	r2, [r7, #4]
 800c9ba:	6812      	ldr	r2, [r2, #0]
 800c9bc:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800c9be:	4b0c      	ldr	r3, [pc, #48]	; (800c9f0 <TL_MM_Init+0x74>)
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	687a      	ldr	r2, [r7, #4]
 800c9c4:	6852      	ldr	r2, [r2, #4]
 800c9c6:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800c9c8:	4b09      	ldr	r3, [pc, #36]	; (800c9f0 <TL_MM_Init+0x74>)
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	687a      	ldr	r2, [r7, #4]
 800c9ce:	6912      	ldr	r2, [r2, #16]
 800c9d0:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800c9d2:	4b07      	ldr	r3, [pc, #28]	; (800c9f0 <TL_MM_Init+0x74>)
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	687a      	ldr	r2, [r7, #4]
 800c9d8:	6952      	ldr	r2, [r2, #20]
 800c9da:	619a      	str	r2, [r3, #24]

  return;
 800c9dc:	bf00      	nop
}
 800c9de:	3708      	adds	r7, #8
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	bd80      	pop	{r7, pc}
 800c9e4:	200301c4 	.word	0x200301c4
 800c9e8:	20000938 	.word	0x20000938
 800c9ec:	20030000 	.word	0x20030000
 800c9f0:	20000950 	.word	0x20000950

0800c9f4 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800c9f4:	b580      	push	{r7, lr}
 800c9f6:	b082      	sub	sp, #8
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800c9fc:	6879      	ldr	r1, [r7, #4]
 800c9fe:	4807      	ldr	r0, [pc, #28]	; (800ca1c <TL_MM_EvtDone+0x28>)
 800ca00:	f000 f9f2 	bl	800cde8 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800ca04:	6879      	ldr	r1, [r7, #4]
 800ca06:	2000      	movs	r0, #0
 800ca08:	f000 f862 	bl	800cad0 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800ca0c:	4804      	ldr	r0, [pc, #16]	; (800ca20 <TL_MM_EvtDone+0x2c>)
 800ca0e:	f7f8 f889 	bl	8004b24 <HW_IPCC_MM_SendFreeBuf>

  return;
 800ca12:	bf00      	nop
}
 800ca14:	3708      	adds	r7, #8
 800ca16:	46bd      	mov	sp, r7
 800ca18:	bd80      	pop	{r7, pc}
 800ca1a:	bf00      	nop
 800ca1c:	20000938 	.word	0x20000938
 800ca20:	0800ca25 	.word	0x0800ca25

0800ca24 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b082      	sub	sp, #8
 800ca28:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800ca2a:	e00c      	b.n	800ca46 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800ca2c:	1d3b      	adds	r3, r7, #4
 800ca2e:	4619      	mov	r1, r3
 800ca30:	480a      	ldr	r0, [pc, #40]	; (800ca5c <SendFreeBuf+0x38>)
 800ca32:	f000 fa20 	bl	800ce76 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800ca36:	4b0a      	ldr	r3, [pc, #40]	; (800ca60 <SendFreeBuf+0x3c>)
 800ca38:	691b      	ldr	r3, [r3, #16]
 800ca3a:	691b      	ldr	r3, [r3, #16]
 800ca3c:	687a      	ldr	r2, [r7, #4]
 800ca3e:	4611      	mov	r1, r2
 800ca40:	4618      	mov	r0, r3
 800ca42:	f000 f9d1 	bl	800cde8 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800ca46:	4805      	ldr	r0, [pc, #20]	; (800ca5c <SendFreeBuf+0x38>)
 800ca48:	f000 f986 	bl	800cd58 <LST_is_empty>
 800ca4c:	4603      	mov	r3, r0
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d0ec      	beq.n	800ca2c <SendFreeBuf+0x8>
  }

  return;
 800ca52:	bf00      	nop
}
 800ca54:	3708      	adds	r7, #8
 800ca56:	46bd      	mov	sp, r7
 800ca58:	bd80      	pop	{r7, pc}
 800ca5a:	bf00      	nop
 800ca5c:	20000938 	.word	0x20000938
 800ca60:	20030000 	.word	0x20030000

0800ca64 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800ca68:	4805      	ldr	r0, [pc, #20]	; (800ca80 <TL_TRACES_Init+0x1c>)
 800ca6a:	f000 f965 	bl	800cd38 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800ca6e:	4b05      	ldr	r3, [pc, #20]	; (800ca84 <TL_TRACES_Init+0x20>)
 800ca70:	695b      	ldr	r3, [r3, #20]
 800ca72:	4a03      	ldr	r2, [pc, #12]	; (800ca80 <TL_TRACES_Init+0x1c>)
 800ca74:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800ca76:	f7f8 f88b 	bl	8004b90 <HW_IPCC_TRACES_Init>

  return;
 800ca7a:	bf00      	nop
}
 800ca7c:	bd80      	pop	{r7, pc}
 800ca7e:	bf00      	nop
 800ca80:	200301cc 	.word	0x200301cc
 800ca84:	20030000 	.word	0x20030000

0800ca88 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	b082      	sub	sp, #8
 800ca8c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800ca8e:	e008      	b.n	800caa2 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800ca90:	1d3b      	adds	r3, r7, #4
 800ca92:	4619      	mov	r1, r3
 800ca94:	4808      	ldr	r0, [pc, #32]	; (800cab8 <HW_IPCC_TRACES_EvtNot+0x30>)
 800ca96:	f000 f9ee 	bl	800ce76 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	f000 f80d 	bl	800cabc <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800caa2:	4805      	ldr	r0, [pc, #20]	; (800cab8 <HW_IPCC_TRACES_EvtNot+0x30>)
 800caa4:	f000 f958 	bl	800cd58 <LST_is_empty>
 800caa8:	4603      	mov	r3, r0
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d0f0      	beq.n	800ca90 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800caae:	bf00      	nop
}
 800cab0:	3708      	adds	r7, #8
 800cab2:	46bd      	mov	sp, r7
 800cab4:	bd80      	pop	{r7, pc}
 800cab6:	bf00      	nop
 800cab8:	200301cc 	.word	0x200301cc

0800cabc <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800cabc:	b480      	push	{r7}
 800cabe:	b083      	sub	sp, #12
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800cac4:	bf00      	nop
 800cac6:	370c      	adds	r7, #12
 800cac8:	46bd      	mov	sp, r7
 800caca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cace:	4770      	bx	lr

0800cad0 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800cad0:	b480      	push	{r7}
 800cad2:	b085      	sub	sp, #20
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	4603      	mov	r3, r0
 800cad8:	6039      	str	r1, [r7, #0]
 800cada:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800cadc:	79fb      	ldrb	r3, [r7, #7]
 800cade:	2b06      	cmp	r3, #6
 800cae0:	d845      	bhi.n	800cb6e <OutputDbgTrace+0x9e>
 800cae2:	a201      	add	r2, pc, #4	; (adr r2, 800cae8 <OutputDbgTrace+0x18>)
 800cae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cae8:	0800cb05 	.word	0x0800cb05
 800caec:	0800cb29 	.word	0x0800cb29
 800caf0:	0800cb2f 	.word	0x0800cb2f
 800caf4:	0800cb43 	.word	0x0800cb43
 800caf8:	0800cb4f 	.word	0x0800cb4f
 800cafc:	0800cb55 	.word	0x0800cb55
 800cb00:	0800cb63 	.word	0x0800cb63
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800cb04:	683b      	ldr	r3, [r7, #0]
 800cb06:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	7a5b      	ldrb	r3, [r3, #9]
 800cb0c:	2bff      	cmp	r3, #255	; 0xff
 800cb0e:	d005      	beq.n	800cb1c <OutputDbgTrace+0x4c>
 800cb10:	2bff      	cmp	r3, #255	; 0xff
 800cb12:	dc05      	bgt.n	800cb20 <OutputDbgTrace+0x50>
 800cb14:	2b0e      	cmp	r3, #14
 800cb16:	d005      	beq.n	800cb24 <OutputDbgTrace+0x54>
 800cb18:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800cb1a:	e001      	b.n	800cb20 <OutputDbgTrace+0x50>
          break;
 800cb1c:	bf00      	nop
 800cb1e:	e027      	b.n	800cb70 <OutputDbgTrace+0xa0>
          break;
 800cb20:	bf00      	nop
 800cb22:	e025      	b.n	800cb70 <OutputDbgTrace+0xa0>
          break;
 800cb24:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800cb26:	e023      	b.n	800cb70 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800cb28:	683b      	ldr	r3, [r7, #0]
 800cb2a:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800cb2c:	e020      	b.n	800cb70 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800cb2e:	683b      	ldr	r3, [r7, #0]
 800cb30:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	7a5b      	ldrb	r3, [r3, #9]
 800cb36:	2b0e      	cmp	r3, #14
 800cb38:	d001      	beq.n	800cb3e <OutputDbgTrace+0x6e>
 800cb3a:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800cb3c:	e000      	b.n	800cb40 <OutputDbgTrace+0x70>
          break;
 800cb3e:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800cb40:	e016      	b.n	800cb70 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800cb42:	683b      	ldr	r3, [r7, #0]
 800cb44:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	7a5b      	ldrb	r3, [r3, #9]
 800cb4a:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800cb4c:	e010      	b.n	800cb70 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800cb4e:	683b      	ldr	r3, [r7, #0]
 800cb50:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800cb52:	e00d      	b.n	800cb70 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800cb54:	683b      	ldr	r3, [r7, #0]
 800cb56:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	7a5b      	ldrb	r3, [r3, #9]
 800cb5c:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800cb5e:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800cb60:	e006      	b.n	800cb70 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800cb62:	683b      	ldr	r3, [r7, #0]
 800cb64:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	7a5b      	ldrb	r3, [r3, #9]
 800cb6a:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800cb6c:	e000      	b.n	800cb70 <OutputDbgTrace+0xa0>

    default:
      break;
 800cb6e:	bf00      	nop
  }

  return;
 800cb70:	bf00      	nop
}
 800cb72:	3714      	adds	r7, #20
 800cb74:	46bd      	mov	sp, r7
 800cb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7a:	4770      	bx	lr

0800cb7c <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 800cb7c:	b580      	push	{r7, lr}
 800cb7e:	b086      	sub	sp, #24
 800cb80:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cb82:	f3ef 8310 	mrs	r3, PRIMASK
 800cb86:	60fb      	str	r3, [r7, #12]
  return(result);
 800cb88:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 800cb8a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800cb8c:	b672      	cpsid	i
}
 800cb8e:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 800cb90:	1cbb      	adds	r3, r7, #2
 800cb92:	4619      	mov	r1, r3
 800cb94:	4812      	ldr	r0, [pc, #72]	; (800cbe0 <DbgTrace_TxCpltCallback+0x64>)
 800cb96:	f000 fbe6 	bl	800d366 <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 800cb9a:	1cbb      	adds	r3, r7, #2
 800cb9c:	4619      	mov	r1, r3
 800cb9e:	4810      	ldr	r0, [pc, #64]	; (800cbe0 <DbgTrace_TxCpltCallback+0x64>)
 800cba0:	f000 fcd2 	bl	800d548 <CircularQueue_Sense>
 800cba4:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 800cba6:	693b      	ldr	r3, [r7, #16]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d00c      	beq.n	800cbc6 <DbgTrace_TxCpltCallback+0x4a>
 800cbac:	697b      	ldr	r3, [r7, #20]
 800cbae:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cbb0:	68bb      	ldr	r3, [r7, #8]
 800cbb2:	f383 8810 	msr	PRIMASK, r3
}
 800cbb6:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 800cbb8:	887b      	ldrh	r3, [r7, #2]
 800cbba:	4a0a      	ldr	r2, [pc, #40]	; (800cbe4 <DbgTrace_TxCpltCallback+0x68>)
 800cbbc:	4619      	mov	r1, r3
 800cbbe:	6938      	ldr	r0, [r7, #16]
 800cbc0:	f7f4 fad0 	bl	8001164 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 800cbc4:	e008      	b.n	800cbd8 <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 800cbc6:	4b08      	ldr	r3, [pc, #32]	; (800cbe8 <DbgTrace_TxCpltCallback+0x6c>)
 800cbc8:	2201      	movs	r2, #1
 800cbca:	701a      	strb	r2, [r3, #0]
 800cbcc:	697b      	ldr	r3, [r7, #20]
 800cbce:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	f383 8810 	msr	PRIMASK, r3
}
 800cbd6:	bf00      	nop
}
 800cbd8:	bf00      	nop
 800cbda:	3718      	adds	r7, #24
 800cbdc:	46bd      	mov	sp, r7
 800cbde:	bd80      	pop	{r7, pc}
 800cbe0:	20000954 	.word	0x20000954
 800cbe4:	0800cb7d 	.word	0x0800cb7d
 800cbe8:	2000003a 	.word	0x2000003a

0800cbec <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 800cbec:	b580      	push	{r7, lr}
 800cbee:	b082      	sub	sp, #8
 800cbf0:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 800cbf2:	f7f4 fab0 	bl	8001156 <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 800cbf6:	2302      	movs	r3, #2
 800cbf8:	9300      	str	r3, [sp, #0]
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800cc00:	4903      	ldr	r1, [pc, #12]	; (800cc10 <DbgTraceInit+0x24>)
 800cc02:	4804      	ldr	r0, [pc, #16]	; (800cc14 <DbgTraceInit+0x28>)
 800cc04:	f000 f956 	bl	800ceb4 <CircularQueue_Init>
#endif 
#endif
  return;
 800cc08:	bf00      	nop
}
 800cc0a:	46bd      	mov	sp, r7
 800cc0c:	bd80      	pop	{r7, pc}
 800cc0e:	bf00      	nop
 800cc10:	20000974 	.word	0x20000974
 800cc14:	20000954 	.word	0x20000954

0800cc18 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 800cc18:	b580      	push	{r7, lr}
 800cc1a:	b084      	sub	sp, #16
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	60f8      	str	r0, [r7, #12]
 800cc20:	60b9      	str	r1, [r7, #8]
 800cc22:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 800cc24:	687a      	ldr	r2, [r7, #4]
 800cc26:	68b9      	ldr	r1, [r7, #8]
 800cc28:	68f8      	ldr	r0, [r7, #12]
 800cc2a:	f000 f805 	bl	800cc38 <DbgTraceWrite>
 800cc2e:	4603      	mov	r3, r0
}
 800cc30:	4618      	mov	r0, r3
 800cc32:	3710      	adds	r7, #16
 800cc34:	46bd      	mov	sp, r7
 800cc36:	bd80      	pop	{r7, pc}

0800cc38 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b08a      	sub	sp, #40	; 0x28
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	60f8      	str	r0, [r7, #12]
 800cc40:	60b9      	str	r1, [r7, #8]
 800cc42:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 800cc44:	2300      	movs	r3, #0
 800cc46:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cc48:	f3ef 8310 	mrs	r3, PRIMASK
 800cc4c:	61bb      	str	r3, [r7, #24]
  return(result);
 800cc4e:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 800cc50:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc58:	d102      	bne.n	800cc60 <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 800cc5a:	2300      	movs	r3, #0
 800cc5c:	627b      	str	r3, [r7, #36]	; 0x24
 800cc5e:	e037      	b.n	800ccd0 <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	2b01      	cmp	r3, #1
 800cc64:	d006      	beq.n	800cc74 <DbgTraceWrite+0x3c>
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	2b02      	cmp	r3, #2
 800cc6a:	d003      	beq.n	800cc74 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 800cc6c:	f04f 33ff 	mov.w	r3, #4294967295
 800cc70:	627b      	str	r3, [r7, #36]	; 0x24
 800cc72:	e02d      	b.n	800ccd0 <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d02a      	beq.n	800ccd0 <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800cc7e:	b672      	cpsid	i
}
 800cc80:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	b29a      	uxth	r2, r3
 800cc86:	2301      	movs	r3, #1
 800cc88:	68b9      	ldr	r1, [r7, #8]
 800cc8a:	4814      	ldr	r0, [pc, #80]	; (800ccdc <DbgTraceWrite+0xa4>)
 800cc8c:	f000 f944 	bl	800cf18 <CircularQueue_Add>
 800cc90:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 800cc92:	69fb      	ldr	r3, [r7, #28]
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d015      	beq.n	800ccc4 <DbgTraceWrite+0x8c>
 800cc98:	4b11      	ldr	r3, [pc, #68]	; (800cce0 <DbgTraceWrite+0xa8>)
 800cc9a:	781b      	ldrb	r3, [r3, #0]
 800cc9c:	b2db      	uxtb	r3, r3
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d010      	beq.n	800ccc4 <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 800cca2:	4b0f      	ldr	r3, [pc, #60]	; (800cce0 <DbgTraceWrite+0xa8>)
 800cca4:	2200      	movs	r2, #0
 800cca6:	701a      	strb	r2, [r3, #0]
 800cca8:	6a3b      	ldr	r3, [r7, #32]
 800ccaa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ccac:	697b      	ldr	r3, [r7, #20]
 800ccae:	f383 8810 	msr	PRIMASK, r3
}
 800ccb2:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	b29b      	uxth	r3, r3
 800ccb8:	4a0a      	ldr	r2, [pc, #40]	; (800cce4 <DbgTraceWrite+0xac>)
 800ccba:	4619      	mov	r1, r3
 800ccbc:	69f8      	ldr	r0, [r7, #28]
 800ccbe:	f7f4 fa51 	bl	8001164 <DbgOutputTraces>
 800ccc2:	e005      	b.n	800ccd0 <DbgTraceWrite+0x98>
 800ccc4:	6a3b      	ldr	r3, [r7, #32]
 800ccc6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ccc8:	693b      	ldr	r3, [r7, #16]
 800ccca:	f383 8810 	msr	PRIMASK, r3
}
 800ccce:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 800ccd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	3728      	adds	r7, #40	; 0x28
 800ccd6:	46bd      	mov	sp, r7
 800ccd8:	bd80      	pop	{r7, pc}
 800ccda:	bf00      	nop
 800ccdc:	20000954 	.word	0x20000954
 800cce0:	2000003a 	.word	0x2000003a
 800cce4:	0800cb7d 	.word	0x0800cb7d

0800cce8 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800cce8:	b480      	push	{r7}
 800ccea:	b085      	sub	sp, #20
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	4603      	mov	r3, r0
 800ccf0:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800ccf2:	4b0f      	ldr	r3, [pc, #60]	; (800cd30 <OTP_Read+0x48>)
 800ccf4:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800ccf6:	e002      	b.n	800ccfe <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	3b08      	subs	r3, #8
 800ccfc:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	3307      	adds	r3, #7
 800cd02:	781b      	ldrb	r3, [r3, #0]
 800cd04:	79fa      	ldrb	r2, [r7, #7]
 800cd06:	429a      	cmp	r2, r3
 800cd08:	d003      	beq.n	800cd12 <OTP_Read+0x2a>
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	4a09      	ldr	r2, [pc, #36]	; (800cd34 <OTP_Read+0x4c>)
 800cd0e:	4293      	cmp	r3, r2
 800cd10:	d1f2      	bne.n	800ccf8 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	3307      	adds	r3, #7
 800cd16:	781b      	ldrb	r3, [r3, #0]
 800cd18:	79fa      	ldrb	r2, [r7, #7]
 800cd1a:	429a      	cmp	r2, r3
 800cd1c:	d001      	beq.n	800cd22 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800cd1e:	2300      	movs	r3, #0
 800cd20:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800cd22:	68fb      	ldr	r3, [r7, #12]
}
 800cd24:	4618      	mov	r0, r3
 800cd26:	3714      	adds	r7, #20
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd2e:	4770      	bx	lr
 800cd30:	1fff73f8 	.word	0x1fff73f8
 800cd34:	1fff7000 	.word	0x1fff7000

0800cd38 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800cd38:	b480      	push	{r7}
 800cd3a:	b083      	sub	sp, #12
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	687a      	ldr	r2, [r7, #4]
 800cd44:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	687a      	ldr	r2, [r7, #4]
 800cd4a:	605a      	str	r2, [r3, #4]
}
 800cd4c:	bf00      	nop
 800cd4e:	370c      	adds	r7, #12
 800cd50:	46bd      	mov	sp, r7
 800cd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd56:	4770      	bx	lr

0800cd58 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800cd58:	b480      	push	{r7}
 800cd5a:	b087      	sub	sp, #28
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cd60:	f3ef 8310 	mrs	r3, PRIMASK
 800cd64:	60fb      	str	r3, [r7, #12]
  return(result);
 800cd66:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800cd68:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800cd6a:	b672      	cpsid	i
}
 800cd6c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	687a      	ldr	r2, [r7, #4]
 800cd74:	429a      	cmp	r2, r3
 800cd76:	d102      	bne.n	800cd7e <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800cd78:	2301      	movs	r3, #1
 800cd7a:	75fb      	strb	r3, [r7, #23]
 800cd7c:	e001      	b.n	800cd82 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800cd7e:	2300      	movs	r3, #0
 800cd80:	75fb      	strb	r3, [r7, #23]
 800cd82:	693b      	ldr	r3, [r7, #16]
 800cd84:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cd86:	68bb      	ldr	r3, [r7, #8]
 800cd88:	f383 8810 	msr	PRIMASK, r3
}
 800cd8c:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800cd8e:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd90:	4618      	mov	r0, r3
 800cd92:	371c      	adds	r7, #28
 800cd94:	46bd      	mov	sp, r7
 800cd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9a:	4770      	bx	lr

0800cd9c <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800cd9c:	b480      	push	{r7}
 800cd9e:	b087      	sub	sp, #28
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	6078      	str	r0, [r7, #4]
 800cda4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cda6:	f3ef 8310 	mrs	r3, PRIMASK
 800cdaa:	60fb      	str	r3, [r7, #12]
  return(result);
 800cdac:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800cdae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800cdb0:	b672      	cpsid	i
}
 800cdb2:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	681a      	ldr	r2, [r3, #0]
 800cdb8:	683b      	ldr	r3, [r7, #0]
 800cdba:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800cdbc:	683b      	ldr	r3, [r7, #0]
 800cdbe:	687a      	ldr	r2, [r7, #4]
 800cdc0:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	683a      	ldr	r2, [r7, #0]
 800cdc6:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800cdc8:	683b      	ldr	r3, [r7, #0]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	683a      	ldr	r2, [r7, #0]
 800cdce:	605a      	str	r2, [r3, #4]
 800cdd0:	697b      	ldr	r3, [r7, #20]
 800cdd2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cdd4:	693b      	ldr	r3, [r7, #16]
 800cdd6:	f383 8810 	msr	PRIMASK, r3
}
 800cdda:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800cddc:	bf00      	nop
 800cdde:	371c      	adds	r7, #28
 800cde0:	46bd      	mov	sp, r7
 800cde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde6:	4770      	bx	lr

0800cde8 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800cde8:	b480      	push	{r7}
 800cdea:	b087      	sub	sp, #28
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	6078      	str	r0, [r7, #4]
 800cdf0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cdf2:	f3ef 8310 	mrs	r3, PRIMASK
 800cdf6:	60fb      	str	r3, [r7, #12]
  return(result);
 800cdf8:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800cdfa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800cdfc:	b672      	cpsid	i
}
 800cdfe:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800ce00:	683b      	ldr	r3, [r7, #0]
 800ce02:	687a      	ldr	r2, [r7, #4]
 800ce04:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	685a      	ldr	r2, [r3, #4]
 800ce0a:	683b      	ldr	r3, [r7, #0]
 800ce0c:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	683a      	ldr	r2, [r7, #0]
 800ce12:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800ce14:	683b      	ldr	r3, [r7, #0]
 800ce16:	685b      	ldr	r3, [r3, #4]
 800ce18:	683a      	ldr	r2, [r7, #0]
 800ce1a:	601a      	str	r2, [r3, #0]
 800ce1c:	697b      	ldr	r3, [r7, #20]
 800ce1e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ce20:	693b      	ldr	r3, [r7, #16]
 800ce22:	f383 8810 	msr	PRIMASK, r3
}
 800ce26:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800ce28:	bf00      	nop
 800ce2a:	371c      	adds	r7, #28
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce32:	4770      	bx	lr

0800ce34 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800ce34:	b480      	push	{r7}
 800ce36:	b087      	sub	sp, #28
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ce3c:	f3ef 8310 	mrs	r3, PRIMASK
 800ce40:	60fb      	str	r3, [r7, #12]
  return(result);
 800ce42:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ce44:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ce46:	b672      	cpsid	i
}
 800ce48:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	685b      	ldr	r3, [r3, #4]
 800ce4e:	687a      	ldr	r2, [r7, #4]
 800ce50:	6812      	ldr	r2, [r2, #0]
 800ce52:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	687a      	ldr	r2, [r7, #4]
 800ce5a:	6852      	ldr	r2, [r2, #4]
 800ce5c:	605a      	str	r2, [r3, #4]
 800ce5e:	697b      	ldr	r3, [r7, #20]
 800ce60:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ce62:	693b      	ldr	r3, [r7, #16]
 800ce64:	f383 8810 	msr	PRIMASK, r3
}
 800ce68:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800ce6a:	bf00      	nop
 800ce6c:	371c      	adds	r7, #28
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce74:	4770      	bx	lr

0800ce76 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800ce76:	b580      	push	{r7, lr}
 800ce78:	b086      	sub	sp, #24
 800ce7a:	af00      	add	r7, sp, #0
 800ce7c:	6078      	str	r0, [r7, #4]
 800ce7e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ce80:	f3ef 8310 	mrs	r3, PRIMASK
 800ce84:	60fb      	str	r3, [r7, #12]
  return(result);
 800ce86:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ce88:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ce8a:	b672      	cpsid	i
}
 800ce8c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	681a      	ldr	r2, [r3, #0]
 800ce92:	683b      	ldr	r3, [r7, #0]
 800ce94:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	f7ff ffca 	bl	800ce34 <LST_remove_node>
 800cea0:	697b      	ldr	r3, [r7, #20]
 800cea2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cea4:	693b      	ldr	r3, [r7, #16]
 800cea6:	f383 8810 	msr	PRIMASK, r3
}
 800ceaa:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800ceac:	bf00      	nop
 800ceae:	3718      	adds	r7, #24
 800ceb0:	46bd      	mov	sp, r7
 800ceb2:	bd80      	pop	{r7, pc}

0800ceb4 <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 800ceb4:	b480      	push	{r7}
 800ceb6:	b085      	sub	sp, #20
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	60f8      	str	r0, [r7, #12]
 800cebc:	60b9      	str	r1, [r7, #8]
 800cebe:	607a      	str	r2, [r7, #4]
 800cec0:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	68ba      	ldr	r2, [r7, #8]
 800cec6:	601a      	str	r2, [r3, #0]
  q->first = 0;
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	2200      	movs	r2, #0
 800cecc:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	2200      	movs	r2, #0
 800ced2:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	2200      	movs	r2, #0
 800ced8:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	2200      	movs	r2, #0
 800cede:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	687a      	ldr	r2, [r7, #4]
 800cee4:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	887a      	ldrh	r2, [r7, #2]
 800ceea:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	7e3a      	ldrb	r2, [r7, #24]
 800cef0:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 800cef2:	7e3b      	ldrb	r3, [r7, #24]
 800cef4:	f003 0302 	and.w	r3, r3, #2
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d006      	beq.n	800cf0a <CircularQueue_Init+0x56>
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	891b      	ldrh	r3, [r3, #8]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d002      	beq.n	800cf0a <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 800cf04:	f04f 33ff 	mov.w	r3, #4294967295
 800cf08:	e000      	b.n	800cf0c <CircularQueue_Init+0x58>
  }
  return 0;
 800cf0a:	2300      	movs	r3, #0
}
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	3714      	adds	r7, #20
 800cf10:	46bd      	mov	sp, r7
 800cf12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf16:	4770      	bx	lr

0800cf18 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 800cf18:	b580      	push	{r7, lr}
 800cf1a:	b08e      	sub	sp, #56	; 0x38
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	60f8      	str	r0, [r7, #12]
 800cf20:	60b9      	str	r1, [r7, #8]
 800cf22:	603b      	str	r3, [r7, #0]
 800cf24:	4613      	mov	r3, r2
 800cf26:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 800cf28:	2300      	movs	r3, #0
 800cf2a:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size element (q->elementsize == 0) */
 800cf30:	2300      	movs	r3, #0
 800cf32:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 800cf34:	2300      	movs	r3, #0
 800cf36:	62bb      	str	r3, [r7, #40]	; 0x28
 800cf38:	2300      	movs	r3, #0
 800cf3a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 800cf3c:	2300      	movs	r3, #0
 800cf3e:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicate size of parta of element that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 800cf40:	2300      	movs	r3, #0
 800cf42:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	891b      	ldrh	r3, [r3, #8]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d101      	bne.n	800cf50 <CircularQueue_Add+0x38>
 800cf4c:	2302      	movs	r3, #2
 800cf4e:	e000      	b.n	800cf52 <CircularQueue_Add+0x3a>
 800cf50:	2300      	movs	r3, #0
 800cf52:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	695b      	ldr	r3, [r3, #20]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d02a      	beq.n	800cfb2 <CircularQueue_Add+0x9a>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	891b      	ldrh	r3, [r3, #8]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d123      	bne.n	800cfac <CircularQueue_Add+0x94>
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	681a      	ldr	r2, [r3, #0]
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	691b      	ldr	r3, [r3, #16]
 800cf6c:	4413      	add	r3, r2
 800cf6e:	781b      	ldrb	r3, [r3, #0]
 800cf70:	b29a      	uxth	r2, r3
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	6819      	ldr	r1, [r3, #0]
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	691b      	ldr	r3, [r3, #16]
 800cf7a:	1c58      	adds	r0, r3, #1
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	685b      	ldr	r3, [r3, #4]
 800cf80:	4298      	cmp	r0, r3
 800cf82:	d306      	bcc.n	800cf92 <CircularQueue_Add+0x7a>
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	6918      	ldr	r0, [r3, #16]
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	685b      	ldr	r3, [r3, #4]
 800cf8c:	1ac3      	subs	r3, r0, r3
 800cf8e:	3301      	adds	r3, #1
 800cf90:	e002      	b.n	800cf98 <CircularQueue_Add+0x80>
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	691b      	ldr	r3, [r3, #16]
 800cf96:	3301      	adds	r3, #1
 800cf98:	440b      	add	r3, r1
 800cf9a:	781b      	ldrb	r3, [r3, #0]
 800cf9c:	b29b      	uxth	r3, r3
 800cf9e:	021b      	lsls	r3, r3, #8
 800cfa0:	b29b      	uxth	r3, r3
 800cfa2:	4413      	add	r3, r2
 800cfa4:	b29b      	uxth	r3, r3
 800cfa6:	3302      	adds	r3, #2
 800cfa8:	b29b      	uxth	r3, r3
 800cfaa:	e001      	b.n	800cfb0 <CircularQueue_Add+0x98>
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	891b      	ldrh	r3, [r3, #8]
 800cfb0:	86fb      	strh	r3, [r7, #54]	; 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	891b      	ldrh	r3, [r3, #8]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d002      	beq.n	800cfc0 <CircularQueue_Add+0xa8>
  {
    elementSize = q->elementSize;
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	891b      	ldrh	r3, [r3, #8]
 800cfbe:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	691a      	ldr	r2, [r3, #16]
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	68db      	ldr	r3, [r3, #12]
 800cfc8:	429a      	cmp	r2, r3
 800cfca:	d307      	bcc.n	800cfdc <CircularQueue_Add+0xc4>
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	685a      	ldr	r2, [r3, #4]
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	6919      	ldr	r1, [r3, #16]
 800cfd4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800cfd6:	440b      	add	r3, r1
 800cfd8:	1ad3      	subs	r3, r2, r3
 800cfda:	e000      	b.n	800cfde <CircularQueue_Add+0xc6>
 800cfdc:	2300      	movs	r3, #0
 800cfde:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 800cfe0:	88fa      	ldrh	r2, [r7, #6]
 800cfe2:	7ffb      	ldrb	r3, [r7, #31]
 800cfe4:	4413      	add	r3, r2
 800cfe6:	461a      	mov	r2, r3
 800cfe8:	683b      	ldr	r3, [r7, #0]
 800cfea:	fb02 f303 	mul.w	r3, r2, r3
 800cfee:	69ba      	ldr	r2, [r7, #24]
 800cff0:	429a      	cmp	r2, r3
 800cff2:	d80b      	bhi.n	800d00c <CircularQueue_Add+0xf4>
 800cff4:	88fa      	ldrh	r2, [r7, #6]
 800cff6:	7ffb      	ldrb	r3, [r7, #31]
 800cff8:	4413      	add	r3, r2
 800cffa:	461a      	mov	r2, r3
 800cffc:	69bb      	ldr	r3, [r7, #24]
 800cffe:	fbb3 f1f2 	udiv	r1, r3, r2
 800d002:	fb01 f202 	mul.w	r2, r1, r2
 800d006:	1a9b      	subs	r3, r3, r2
 800d008:	b2db      	uxtb	r3, r3
 800d00a:	e000      	b.n	800d00e <CircularQueue_Add+0xf6>
 800d00c:	2300      	movs	r3, #0
 800d00e:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 800d010:	7dfa      	ldrb	r2, [r7, #23]
 800d012:	7ffb      	ldrb	r3, [r7, #31]
 800d014:	429a      	cmp	r2, r3
 800d016:	bf8c      	ite	hi
 800d018:	2301      	movhi	r3, #1
 800d01a:	2300      	movls	r3, #0
 800d01c:	b2db      	uxtb	r3, r3
 800d01e:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 800d020:	7fbb      	ldrb	r3, [r7, #30]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d008      	beq.n	800d038 <CircularQueue_Add+0x120>
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	7f1b      	ldrb	r3, [r3, #28]
 800d02a:	f003 0301 	and.w	r3, r3, #1
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d002      	beq.n	800d038 <CircularQueue_Add+0x120>
 800d032:	7dfb      	ldrb	r3, [r7, #23]
 800d034:	b29b      	uxth	r3, r3
 800d036:	e000      	b.n	800d03a <CircularQueue_Add+0x122>
 800d038:	8bbb      	ldrh	r3, [r7, #28]
 800d03a:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 800d03c:	7fbb      	ldrb	r3, [r7, #30]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d008      	beq.n	800d054 <CircularQueue_Add+0x13c>
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	7f1b      	ldrb	r3, [r3, #28]
 800d046:	f003 0302 	and.w	r3, r3, #2
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d002      	beq.n	800d054 <CircularQueue_Add+0x13c>
 800d04e:	7ffb      	ldrb	r3, [r7, #31]
 800d050:	b29b      	uxth	r3, r3
 800d052:	e000      	b.n	800d056 <CircularQueue_Add+0x13e>
 800d054:	8bbb      	ldrh	r3, [r7, #28]
 800d056:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 800d058:	88fb      	ldrh	r3, [r7, #6]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	f000 817e 	beq.w	800d35c <CircularQueue_Add+0x444>
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	695a      	ldr	r2, [r3, #20]
 800d064:	88f9      	ldrh	r1, [r7, #6]
 800d066:	7ffb      	ldrb	r3, [r7, #31]
 800d068:	440b      	add	r3, r1
 800d06a:	4619      	mov	r1, r3
 800d06c:	683b      	ldr	r3, [r7, #0]
 800d06e:	fb01 f303 	mul.w	r3, r1, r3
 800d072:	441a      	add	r2, r3
 800d074:	8bbb      	ldrh	r3, [r7, #28]
 800d076:	441a      	add	r2, r3
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	685b      	ldr	r3, [r3, #4]
 800d07c:	429a      	cmp	r2, r3
 800d07e:	f200 816d 	bhi.w	800d35c <CircularQueue_Add+0x444>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 800d082:	2300      	movs	r3, #0
 800d084:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d086:	e14a      	b.n	800d31e <CircularQueue_Add+0x406>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	691a      	ldr	r2, [r3, #16]
 800d08c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d08e:	441a      	add	r2, r3
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	685b      	ldr	r3, [r3, #4]
 800d094:	429a      	cmp	r2, r3
 800d096:	d307      	bcc.n	800d0a8 <CircularQueue_Add+0x190>
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	691a      	ldr	r2, [r3, #16]
 800d09c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d09e:	441a      	add	r2, r3
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	685b      	ldr	r3, [r3, #4]
 800d0a4:	1ad3      	subs	r3, r2, r3
 800d0a6:	e003      	b.n	800d0b0 <CircularQueue_Add+0x198>
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	691a      	ldr	r2, [r3, #16]
 800d0ac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d0ae:	4413      	add	r3, r2
 800d0b0:	68fa      	ldr	r2, [r7, #12]
 800d0b2:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	691b      	ldr	r3, [r3, #16]
 800d0b8:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* store the element  */
      /* store first the element size if element size is variable */
      if (q->elementSize == 0) 
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	891b      	ldrh	r3, [r3, #8]
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d130      	bne.n	800d124 <CircularQueue_Add+0x20c>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	681a      	ldr	r2, [r3, #0]
 800d0c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0c8:	1c59      	adds	r1, r3, #1
 800d0ca:	6339      	str	r1, [r7, #48]	; 0x30
 800d0cc:	4413      	add	r3, r2
 800d0ce:	88fa      	ldrh	r2, [r7, #6]
 800d0d0:	b2d2      	uxtb	r2, r2
 800d0d2:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	685b      	ldr	r3, [r3, #4]
 800d0d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d0da:	429a      	cmp	r2, r3
 800d0dc:	d304      	bcc.n	800d0e8 <CircularQueue_Add+0x1d0>
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	685b      	ldr	r3, [r3, #4]
 800d0e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d0e4:	1ad3      	subs	r3, r2, r3
 800d0e6:	e000      	b.n	800d0ea <CircularQueue_Add+0x1d2>
 800d0e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0ea:	633b      	str	r3, [r7, #48]	; 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 800d0ec:	88fb      	ldrh	r3, [r7, #6]
 800d0ee:	0a1b      	lsrs	r3, r3, #8
 800d0f0:	b298      	uxth	r0, r3
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	681a      	ldr	r2, [r3, #0]
 800d0f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0f8:	1c59      	adds	r1, r3, #1
 800d0fa:	6339      	str	r1, [r7, #48]	; 0x30
 800d0fc:	4413      	add	r3, r2
 800d0fe:	b2c2      	uxtb	r2, r0
 800d100:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	685b      	ldr	r3, [r3, #4]
 800d106:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d108:	429a      	cmp	r2, r3
 800d10a:	d304      	bcc.n	800d116 <CircularQueue_Add+0x1fe>
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	685b      	ldr	r3, [r3, #4]
 800d110:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d112:	1ad3      	subs	r3, r2, r3
 800d114:	e000      	b.n	800d118 <CircularQueue_Add+0x200>
 800d116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d118:	633b      	str	r3, [r7, #48]	; 0x30
        q->byteCount += 2;
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	695b      	ldr	r3, [r3, #20]
 800d11e:	1c9a      	adds	r2, r3, #2
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 800d124:	88fa      	ldrh	r2, [r7, #6]
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	6859      	ldr	r1, [r3, #4]
 800d12a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d12c:	1acb      	subs	r3, r1, r3
 800d12e:	4293      	cmp	r3, r2
 800d130:	bf28      	it	cs
 800d132:	4613      	movcs	r3, r2
 800d134:	62bb      	str	r3, [r7, #40]	; 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In this case part of data will copied at the end of the buffer and the rest a the beginning */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 800d136:	88fb      	ldrh	r3, [r7, #6]
 800d138:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d13a:	429a      	cmp	r2, r3
 800d13c:	d007      	beq.n	800d14e <CircularQueue_Add+0x236>
 800d13e:	88fb      	ldrh	r3, [r7, #6]
 800d140:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d142:	429a      	cmp	r2, r3
 800d144:	d225      	bcs.n	800d192 <CircularQueue_Add+0x27a>
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	7f1b      	ldrb	r3, [r3, #28]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d121      	bne.n	800d192 <CircularQueue_Add+0x27a>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	681a      	ldr	r2, [r3, #0]
 800d152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d154:	18d0      	adds	r0, r2, r3
 800d156:	88fb      	ldrh	r3, [r7, #6]
 800d158:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d15a:	fb02 f303 	mul.w	r3, r2, r3
 800d15e:	68ba      	ldr	r2, [r7, #8]
 800d160:	4413      	add	r3, r2
 800d162:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d164:	4619      	mov	r1, r3
 800d166:	f001 fc34 	bl	800e9d2 <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	695a      	ldr	r2, [r3, #20]
 800d16e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d170:	441a      	add	r2, r3
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 800d176:	2300      	movs	r3, #0
 800d178:	633b      	str	r3, [r7, #48]	; 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 800d17a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d17c:	627b      	str	r3, [r7, #36]	; 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 800d17e:	88fa      	ldrh	r2, [r7, #6]
 800d180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d182:	1ad3      	subs	r3, r2, r3
 800d184:	62bb      	str	r3, [r7, #40]	; 0x28
        /* set the current element Size, will be used to calaculate next last position at beginning of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 800d186:	7ffb      	ldrb	r3, [r7, #31]
 800d188:	b29a      	uxth	r2, r3
 800d18a:	88fb      	ldrh	r3, [r7, #6]
 800d18c:	4413      	add	r3, r2
 800d18e:	86fb      	strh	r3, [r7, #54]	; 0x36
 800d190:	e0a4      	b.n	800d2dc <CircularQueue_Add+0x3c4>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 800d192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d194:	2b00      	cmp	r3, #0
 800d196:	f000 80a1 	beq.w	800d2dc <CircularQueue_Add+0x3c4>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	7f1b      	ldrb	r3, [r3, #28]
 800d19e:	f003 0301 	and.w	r3, r3, #1
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d03a      	beq.n	800d21c <CircularQueue_Add+0x304>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	891b      	ldrh	r3, [r3, #8]
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d10d      	bne.n	800d1ca <CircularQueue_Add+0x2b2>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	681a      	ldr	r2, [r3, #0]
 800d1b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1b4:	3b02      	subs	r3, #2
 800d1b6:	4413      	add	r3, r2
 800d1b8:	22ff      	movs	r2, #255	; 0xff
 800d1ba:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	681a      	ldr	r2, [r3, #0]
 800d1c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1c2:	3b01      	subs	r3, #1
 800d1c4:	4413      	add	r3, r2
 800d1c6:	22ff      	movs	r2, #255	; 0xff
 800d1c8:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	695a      	ldr	r2, [r3, #20]
 800d1ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1d0:	441a      	add	r2, r3
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 800d1d6:	2300      	movs	r3, #0
 800d1d8:	627b      	str	r3, [r7, #36]	; 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 800d1da:	88fb      	ldrh	r3, [r7, #6]
 800d1dc:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Wrap */
          curBuffPosition = 0; 
 800d1de:	2300      	movs	r3, #0
 800d1e0:	633b      	str	r3, [r7, #48]	; 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	891b      	ldrh	r3, [r3, #8]
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d16f      	bne.n	800d2ca <CircularQueue_Add+0x3b2>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	681a      	ldr	r2, [r3, #0]
 800d1ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1f0:	1c59      	adds	r1, r3, #1
 800d1f2:	6339      	str	r1, [r7, #48]	; 0x30
 800d1f4:	4413      	add	r3, r2
 800d1f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d1f8:	b2d2      	uxtb	r2, r2
 800d1fa:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800d1fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1fe:	0a18      	lsrs	r0, r3, #8
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	681a      	ldr	r2, [r3, #0]
 800d204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d206:	1c59      	adds	r1, r3, #1
 800d208:	6339      	str	r1, [r7, #48]	; 0x30
 800d20a:	4413      	add	r3, r2
 800d20c:	b2c2      	uxtb	r2, r0
 800d20e:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	695b      	ldr	r3, [r3, #20]
 800d214:	1c9a      	adds	r2, r3, #2
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	615a      	str	r2, [r3, #20]
 800d21a:	e056      	b.n	800d2ca <CircularQueue_Add+0x3b2>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	7f1b      	ldrb	r3, [r3, #28]
 800d220:	f003 0302 	and.w	r3, r3, #2
 800d224:	2b00      	cmp	r3, #0
 800d226:	d050      	beq.n	800d2ca <CircularQueue_Add+0x3b2>
        {
          if (q->elementSize == 0)
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	891b      	ldrh	r3, [r3, #8]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d14a      	bne.n	800d2c6 <CircularQueue_Add+0x3ae>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	681a      	ldr	r2, [r3, #0]
 800d234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d236:	3b02      	subs	r3, #2
 800d238:	4413      	add	r3, r2
 800d23a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d23c:	b2d2      	uxtb	r2, r2
 800d23e:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800d240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d242:	0a19      	lsrs	r1, r3, #8
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	681a      	ldr	r2, [r3, #0]
 800d248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d24a:	3b01      	subs	r3, #1
 800d24c:	4413      	add	r3, r2
 800d24e:	b2ca      	uxtb	r2, r1
 800d250:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	681a      	ldr	r2, [r3, #0]
 800d256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d258:	18d0      	adds	r0, r2, r3
 800d25a:	88fb      	ldrh	r3, [r7, #6]
 800d25c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d25e:	fb02 f303 	mul.w	r3, r2, r3
 800d262:	68ba      	ldr	r2, [r7, #8]
 800d264:	4413      	add	r3, r2
 800d266:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d268:	4619      	mov	r1, r3
 800d26a:	f001 fbb2 	bl	800e9d2 <memcpy>
             q->byteCount += NbBytesToCopy; 
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	695a      	ldr	r2, [r3, #20]
 800d272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d274:	441a      	add	r2, r3
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 800d27a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d27c:	627b      	str	r3, [r7, #36]	; 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 800d27e:	88fa      	ldrh	r2, [r7, #6]
 800d280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d282:	1ad3      	subs	r3, r2, r3
 800d284:	62bb      	str	r3, [r7, #40]	; 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	699b      	ldr	r3, [r3, #24]
 800d28a:	1c5a      	adds	r2, r3, #1
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 800d290:	2300      	movs	r3, #0
 800d292:	633b      	str	r3, [r7, #48]	; 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	681a      	ldr	r2, [r3, #0]
 800d298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d29a:	1c59      	adds	r1, r3, #1
 800d29c:	6339      	str	r1, [r7, #48]	; 0x30
 800d29e:	4413      	add	r3, r2
 800d2a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d2a2:	b2d2      	uxtb	r2, r2
 800d2a4:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800d2a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2a8:	0a18      	lsrs	r0, r3, #8
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	681a      	ldr	r2, [r3, #0]
 800d2ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2b0:	1c59      	adds	r1, r3, #1
 800d2b2:	6339      	str	r1, [r7, #48]	; 0x30
 800d2b4:	4413      	add	r3, r2
 800d2b6:	b2c2      	uxtb	r2, r0
 800d2b8:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	695b      	ldr	r3, [r3, #20]
 800d2be:	1c9a      	adds	r2, r3, #2
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	615a      	str	r2, [r3, #20]
 800d2c4:	e001      	b.n	800d2ca <CircularQueue_Add+0x3b2>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	e049      	b.n	800d35e <CircularQueue_Add+0x446>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 800d2ca:	7ffb      	ldrb	r3, [r7, #31]
 800d2cc:	b29a      	uxth	r2, r3
 800d2ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2d0:	b29b      	uxth	r3, r3
 800d2d2:	4413      	add	r3, r2
 800d2d4:	86fb      	strh	r3, [r7, #54]	; 0x36
        q->last = 0;        
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	2200      	movs	r2, #0
 800d2da:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaining byte to copy */
      if (NbBytesToCopy)      
 800d2dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d015      	beq.n	800d30e <CircularQueue_Add+0x3f6>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	681a      	ldr	r2, [r3, #0]
 800d2e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2e8:	18d0      	adds	r0, r2, r3
 800d2ea:	88fb      	ldrh	r3, [r7, #6]
 800d2ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d2ee:	fb03 f202 	mul.w	r2, r3, r2
 800d2f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2f4:	4413      	add	r3, r2
 800d2f6:	68ba      	ldr	r2, [r7, #8]
 800d2f8:	4413      	add	r3, r2
 800d2fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d2fc:	4619      	mov	r1, r3
 800d2fe:	f001 fb68 	bl	800e9d2 <memcpy>
        q->byteCount += NbBytesToCopy;
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	695a      	ldr	r2, [r3, #20]
 800d306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d308:	441a      	add	r2, r3
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	699b      	ldr	r3, [r3, #24]
 800d312:	1c5a      	adds	r2, r3, #1
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 800d318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d31a:	3301      	adds	r3, #1
 800d31c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d31e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d320:	683b      	ldr	r3, [r7, #0]
 800d322:	429a      	cmp	r2, r3
 800d324:	f4ff aeb0 	bcc.w	800d088 <CircularQueue_Add+0x170>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	681a      	ldr	r2, [r3, #0]
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	6919      	ldr	r1, [r3, #16]
 800d330:	7ffb      	ldrb	r3, [r7, #31]
 800d332:	4419      	add	r1, r3
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	685b      	ldr	r3, [r3, #4]
 800d338:	4299      	cmp	r1, r3
 800d33a:	d307      	bcc.n	800d34c <CircularQueue_Add+0x434>
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	6919      	ldr	r1, [r3, #16]
 800d340:	7ffb      	ldrb	r3, [r7, #31]
 800d342:	4419      	add	r1, r3
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	685b      	ldr	r3, [r3, #4]
 800d348:	1acb      	subs	r3, r1, r3
 800d34a:	e003      	b.n	800d354 <CircularQueue_Add+0x43c>
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	6919      	ldr	r1, [r3, #16]
 800d350:	7ffb      	ldrb	r3, [r7, #31]
 800d352:	440b      	add	r3, r1
 800d354:	4413      	add	r3, r2
 800d356:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 800d358:	6a3b      	ldr	r3, [r7, #32]
 800d35a:	e000      	b.n	800d35e <CircularQueue_Add+0x446>
    return NULL;
 800d35c:	2300      	movs	r3, #0
}
 800d35e:	4618      	mov	r0, r3
 800d360:	3738      	adds	r7, #56	; 0x38
 800d362:	46bd      	mov	sp, r7
 800d364:	bd80      	pop	{r7, pc}

0800d366 <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 800d366:	b480      	push	{r7}
 800d368:	b085      	sub	sp, #20
 800d36a:	af00      	add	r7, sp, #0
 800d36c:	6078      	str	r0, [r7, #4]
 800d36e:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800d370:	2300      	movs	r3, #0
 800d372:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 800d374:	2300      	movs	r3, #0
 800d376:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	891b      	ldrh	r3, [r3, #8]
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d101      	bne.n	800d384 <CircularQueue_Remove+0x1e>
 800d380:	2302      	movs	r3, #2
 800d382:	e000      	b.n	800d386 <CircularQueue_Remove+0x20>
 800d384:	2300      	movs	r3, #0
 800d386:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 800d388:	2300      	movs	r3, #0
 800d38a:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	695b      	ldr	r3, [r3, #20]
 800d390:	2b00      	cmp	r3, #0
 800d392:	f000 80cc 	beq.w	800d52e <CircularQueue_Remove+0x1c8>
  {
    /* retrieve element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	891b      	ldrh	r3, [r3, #8]
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d121      	bne.n	800d3e2 <CircularQueue_Remove+0x7c>
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	681a      	ldr	r2, [r3, #0]
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	68db      	ldr	r3, [r3, #12]
 800d3a6:	4413      	add	r3, r2
 800d3a8:	781b      	ldrb	r3, [r3, #0]
 800d3aa:	b29a      	uxth	r2, r3
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	6819      	ldr	r1, [r3, #0]
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	68db      	ldr	r3, [r3, #12]
 800d3b4:	1c58      	adds	r0, r3, #1
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	685b      	ldr	r3, [r3, #4]
 800d3ba:	4298      	cmp	r0, r3
 800d3bc:	d306      	bcc.n	800d3cc <CircularQueue_Remove+0x66>
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	68d8      	ldr	r0, [r3, #12]
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	685b      	ldr	r3, [r3, #4]
 800d3c6:	1ac3      	subs	r3, r0, r3
 800d3c8:	3301      	adds	r3, #1
 800d3ca:	e002      	b.n	800d3d2 <CircularQueue_Remove+0x6c>
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	68db      	ldr	r3, [r3, #12]
 800d3d0:	3301      	adds	r3, #1
 800d3d2:	440b      	add	r3, r1
 800d3d4:	781b      	ldrb	r3, [r3, #0]
 800d3d6:	b29b      	uxth	r3, r3
 800d3d8:	021b      	lsls	r3, r3, #8
 800d3da:	b29b      	uxth	r3, r3
 800d3dc:	4413      	add	r3, r2
 800d3de:	b29b      	uxth	r3, r3
 800d3e0:	e001      	b.n	800d3e6 <CircularQueue_Remove+0x80>
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	891b      	ldrh	r3, [r3, #8]
 800d3e6:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	7f1b      	ldrb	r3, [r3, #28]
 800d3ec:	f003 0301 	and.w	r3, r3, #1
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d057      	beq.n	800d4a4 <CircularQueue_Remove+0x13e>
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	7f1b      	ldrb	r3, [r3, #28]
 800d3f8:	f003 0302 	and.w	r3, r3, #2
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d151      	bne.n	800d4a4 <CircularQueue_Remove+0x13e>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800d400:	897b      	ldrh	r3, [r7, #10]
 800d402:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d406:	4293      	cmp	r3, r2
 800d408:	d103      	bne.n	800d412 <CircularQueue_Remove+0xac>
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	891b      	ldrh	r3, [r3, #8]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d012      	beq.n	800d438 <CircularQueue_Remove+0xd2>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	68da      	ldr	r2, [r3, #12]
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800d41a:	429a      	cmp	r2, r3
 800d41c:	d942      	bls.n	800d4a4 <CircularQueue_Remove+0x13e>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	891b      	ldrh	r3, [r3, #8]
 800d422:	2b00      	cmp	r3, #0
 800d424:	d03e      	beq.n	800d4a4 <CircularQueue_Remove+0x13e>
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	685a      	ldr	r2, [r3, #4]
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	68db      	ldr	r3, [r3, #12]
 800d42e:	1ad3      	subs	r3, r2, r3
 800d430:	687a      	ldr	r2, [r7, #4]
 800d432:	8912      	ldrh	r2, [r2, #8]
 800d434:	4293      	cmp	r3, r2
 800d436:	d235      	bcs.n	800d4a4 <CircularQueue_Remove+0x13e>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	695a      	ldr	r2, [r3, #20]
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	68d9      	ldr	r1, [r3, #12]
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	685b      	ldr	r3, [r3, #4]
 800d444:	1acb      	subs	r3, r1, r3
 800d446:	441a      	add	r2, r3
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	2200      	movs	r2, #0
 800d450:	60da      	str	r2, [r3, #12]
          /* retrieve the right size after the wrap [if variable size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	891b      	ldrh	r3, [r3, #8]
 800d456:	2b00      	cmp	r3, #0
 800d458:	d121      	bne.n	800d49e <CircularQueue_Remove+0x138>
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	681a      	ldr	r2, [r3, #0]
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	68db      	ldr	r3, [r3, #12]
 800d462:	4413      	add	r3, r2
 800d464:	781b      	ldrb	r3, [r3, #0]
 800d466:	b29a      	uxth	r2, r3
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	6819      	ldr	r1, [r3, #0]
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	68db      	ldr	r3, [r3, #12]
 800d470:	1c58      	adds	r0, r3, #1
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	685b      	ldr	r3, [r3, #4]
 800d476:	4298      	cmp	r0, r3
 800d478:	d306      	bcc.n	800d488 <CircularQueue_Remove+0x122>
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	68d8      	ldr	r0, [r3, #12]
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	685b      	ldr	r3, [r3, #4]
 800d482:	1ac3      	subs	r3, r0, r3
 800d484:	3301      	adds	r3, #1
 800d486:	e002      	b.n	800d48e <CircularQueue_Remove+0x128>
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	68db      	ldr	r3, [r3, #12]
 800d48c:	3301      	adds	r3, #1
 800d48e:	440b      	add	r3, r1
 800d490:	781b      	ldrb	r3, [r3, #0]
 800d492:	b29b      	uxth	r3, r3
 800d494:	021b      	lsls	r3, r3, #8
 800d496:	b29b      	uxth	r3, r3
 800d498:	4413      	add	r3, r2
 800d49a:	b29b      	uxth	r3, r3
 800d49c:	e001      	b.n	800d4a2 <CircularQueue_Remove+0x13c>
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	891b      	ldrh	r3, [r3, #8]
 800d4a2:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retrieve element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	681a      	ldr	r2, [r3, #0]
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	68d9      	ldr	r1, [r3, #12]
 800d4ac:	7a7b      	ldrb	r3, [r7, #9]
 800d4ae:	4419      	add	r1, r3
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	685b      	ldr	r3, [r3, #4]
 800d4b4:	4299      	cmp	r1, r3
 800d4b6:	d307      	bcc.n	800d4c8 <CircularQueue_Remove+0x162>
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	68d9      	ldr	r1, [r3, #12]
 800d4bc:	7a7b      	ldrb	r3, [r7, #9]
 800d4be:	4419      	add	r1, r3
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	685b      	ldr	r3, [r3, #4]
 800d4c4:	1acb      	subs	r3, r1, r3
 800d4c6:	e003      	b.n	800d4d0 <CircularQueue_Remove+0x16a>
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	68d9      	ldr	r1, [r3, #12]
 800d4cc:	7a7b      	ldrb	r3, [r7, #9]
 800d4ce:	440b      	add	r3, r1
 800d4d0:	4413      	add	r3, r2
 800d4d2:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	695b      	ldr	r3, [r3, #20]
 800d4d8:	8979      	ldrh	r1, [r7, #10]
 800d4da:	7a7a      	ldrb	r2, [r7, #9]
 800d4dc:	440a      	add	r2, r1
 800d4de:	1a9a      	subs	r2, r3, r2
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	695b      	ldr	r3, [r3, #20]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d01b      	beq.n	800d524 <CircularQueue_Remove+0x1be>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	68da      	ldr	r2, [r3, #12]
 800d4f0:	897b      	ldrh	r3, [r7, #10]
 800d4f2:	441a      	add	r2, r3
 800d4f4:	7a7b      	ldrb	r3, [r7, #9]
 800d4f6:	441a      	add	r2, r3
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	685b      	ldr	r3, [r3, #4]
 800d4fc:	429a      	cmp	r2, r3
 800d4fe:	d309      	bcc.n	800d514 <CircularQueue_Remove+0x1ae>
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	68da      	ldr	r2, [r3, #12]
 800d504:	897b      	ldrh	r3, [r7, #10]
 800d506:	441a      	add	r2, r3
 800d508:	7a7b      	ldrb	r3, [r7, #9]
 800d50a:	441a      	add	r2, r3
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	685b      	ldr	r3, [r3, #4]
 800d510:	1ad3      	subs	r3, r2, r3
 800d512:	e005      	b.n	800d520 <CircularQueue_Remove+0x1ba>
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	68da      	ldr	r2, [r3, #12]
 800d518:	897b      	ldrh	r3, [r7, #10]
 800d51a:	441a      	add	r2, r3
 800d51c:	7a7b      	ldrb	r3, [r7, #9]
 800d51e:	4413      	add	r3, r2
 800d520:	687a      	ldr	r2, [r7, #4]
 800d522:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	699b      	ldr	r3, [r3, #24]
 800d528:	1e5a      	subs	r2, r3, #1
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 800d52e:	683b      	ldr	r3, [r7, #0]
 800d530:	2b00      	cmp	r3, #0
 800d532:	d002      	beq.n	800d53a <CircularQueue_Remove+0x1d4>
  {
    *elementSize = eltSize;
 800d534:	683b      	ldr	r3, [r7, #0]
 800d536:	897a      	ldrh	r2, [r7, #10]
 800d538:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 800d53a:	68fb      	ldr	r3, [r7, #12]
}
 800d53c:	4618      	mov	r0, r3
 800d53e:	3714      	adds	r7, #20
 800d540:	46bd      	mov	sp, r7
 800d542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d546:	4770      	bx	lr

0800d548 <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 800d548:	b480      	push	{r7}
 800d54a:	b087      	sub	sp, #28
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	6078      	str	r0, [r7, #4]
 800d550:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800d552:	2300      	movs	r3, #0
 800d554:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 800d556:	2300      	movs	r3, #0
 800d558:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	891b      	ldrh	r3, [r3, #8]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d101      	bne.n	800d566 <CircularQueue_Sense+0x1e>
 800d562:	2302      	movs	r3, #2
 800d564:	e000      	b.n	800d568 <CircularQueue_Sense+0x20>
 800d566:	2300      	movs	r3, #0
 800d568:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 800d56a:	2300      	movs	r3, #0
 800d56c:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 800d56e:	2300      	movs	r3, #0
 800d570:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	695b      	ldr	r3, [r3, #20]
 800d576:	2b00      	cmp	r3, #0
 800d578:	f000 8090 	beq.w	800d69c <CircularQueue_Sense+0x154>
  {
    FirstElemetPos = q->first;
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	68db      	ldr	r3, [r3, #12]
 800d580:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	891b      	ldrh	r3, [r3, #8]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d121      	bne.n	800d5ce <CircularQueue_Sense+0x86>
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	681a      	ldr	r2, [r3, #0]
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	68db      	ldr	r3, [r3, #12]
 800d592:	4413      	add	r3, r2
 800d594:	781b      	ldrb	r3, [r3, #0]
 800d596:	b29a      	uxth	r2, r3
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	6819      	ldr	r1, [r3, #0]
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	68db      	ldr	r3, [r3, #12]
 800d5a0:	1c58      	adds	r0, r3, #1
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	685b      	ldr	r3, [r3, #4]
 800d5a6:	4298      	cmp	r0, r3
 800d5a8:	d306      	bcc.n	800d5b8 <CircularQueue_Sense+0x70>
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	68d8      	ldr	r0, [r3, #12]
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	685b      	ldr	r3, [r3, #4]
 800d5b2:	1ac3      	subs	r3, r0, r3
 800d5b4:	3301      	adds	r3, #1
 800d5b6:	e002      	b.n	800d5be <CircularQueue_Sense+0x76>
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	68db      	ldr	r3, [r3, #12]
 800d5bc:	3301      	adds	r3, #1
 800d5be:	440b      	add	r3, r1
 800d5c0:	781b      	ldrb	r3, [r3, #0]
 800d5c2:	b29b      	uxth	r3, r3
 800d5c4:	021b      	lsls	r3, r3, #8
 800d5c6:	b29b      	uxth	r3, r3
 800d5c8:	4413      	add	r3, r2
 800d5ca:	b29b      	uxth	r3, r3
 800d5cc:	e001      	b.n	800d5d2 <CircularQueue_Sense+0x8a>
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	891b      	ldrh	r3, [r3, #8]
 800d5d2:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	7f1b      	ldrb	r3, [r3, #28]
 800d5d8:	f003 0301 	and.w	r3, r3, #1
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d048      	beq.n	800d672 <CircularQueue_Sense+0x12a>
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	7f1b      	ldrb	r3, [r3, #28]
 800d5e4:	f003 0302 	and.w	r3, r3, #2
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d142      	bne.n	800d672 <CircularQueue_Sense+0x12a>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800d5ec:	8a7b      	ldrh	r3, [r7, #18]
 800d5ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d5f2:	4293      	cmp	r3, r2
 800d5f4:	d103      	bne.n	800d5fe <CircularQueue_Sense+0xb6>
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	891b      	ldrh	r3, [r3, #8]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d012      	beq.n	800d624 <CircularQueue_Sense+0xdc>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	68da      	ldr	r2, [r3, #12]
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800d606:	429a      	cmp	r2, r3
 800d608:	d933      	bls.n	800d672 <CircularQueue_Sense+0x12a>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	891b      	ldrh	r3, [r3, #8]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d02f      	beq.n	800d672 <CircularQueue_Sense+0x12a>
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	685a      	ldr	r2, [r3, #4]
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	68db      	ldr	r3, [r3, #12]
 800d61a:	1ad3      	subs	r3, r2, r3
 800d61c:	687a      	ldr	r2, [r7, #4]
 800d61e:	8912      	ldrh	r2, [r2, #8]
 800d620:	4293      	cmp	r3, r2
 800d622:	d226      	bcs.n	800d672 <CircularQueue_Sense+0x12a>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 800d624:	2300      	movs	r3, #0
 800d626:	60fb      	str	r3, [r7, #12]

        /* retrieve the right size after the wrap [if variable size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	891b      	ldrh	r3, [r3, #8]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d11d      	bne.n	800d66c <CircularQueue_Sense+0x124>
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	681a      	ldr	r2, [r3, #0]
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	4413      	add	r3, r2
 800d638:	781b      	ldrb	r3, [r3, #0]
 800d63a:	b29a      	uxth	r2, r3
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	6819      	ldr	r1, [r3, #0]
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	1c58      	adds	r0, r3, #1
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	685b      	ldr	r3, [r3, #4]
 800d648:	4298      	cmp	r0, r3
 800d64a:	d305      	bcc.n	800d658 <CircularQueue_Sense+0x110>
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	685b      	ldr	r3, [r3, #4]
 800d650:	68f8      	ldr	r0, [r7, #12]
 800d652:	1ac3      	subs	r3, r0, r3
 800d654:	3301      	adds	r3, #1
 800d656:	e001      	b.n	800d65c <CircularQueue_Sense+0x114>
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	3301      	adds	r3, #1
 800d65c:	440b      	add	r3, r1
 800d65e:	781b      	ldrb	r3, [r3, #0]
 800d660:	b29b      	uxth	r3, r3
 800d662:	021b      	lsls	r3, r3, #8
 800d664:	b29b      	uxth	r3, r3
 800d666:	4413      	add	r3, r2
 800d668:	b29b      	uxth	r3, r3
 800d66a:	e001      	b.n	800d670 <CircularQueue_Sense+0x128>
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	891b      	ldrh	r3, [r3, #8]
 800d670:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	681a      	ldr	r2, [r3, #0]
 800d676:	7af9      	ldrb	r1, [r7, #11]
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	4419      	add	r1, r3
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	685b      	ldr	r3, [r3, #4]
 800d680:	4299      	cmp	r1, r3
 800d682:	d306      	bcc.n	800d692 <CircularQueue_Sense+0x14a>
 800d684:	7af9      	ldrb	r1, [r7, #11]
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	4419      	add	r1, r3
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	685b      	ldr	r3, [r3, #4]
 800d68e:	1acb      	subs	r3, r1, r3
 800d690:	e002      	b.n	800d698 <CircularQueue_Sense+0x150>
 800d692:	7af9      	ldrb	r1, [r7, #11]
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	440b      	add	r3, r1
 800d698:	4413      	add	r3, r2
 800d69a:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 800d69c:	683b      	ldr	r3, [r7, #0]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d002      	beq.n	800d6a8 <CircularQueue_Sense+0x160>
  {
    *elementSize = eltSize;
 800d6a2:	683b      	ldr	r3, [r7, #0]
 800d6a4:	8a7a      	ldrh	r2, [r7, #18]
 800d6a6:	801a      	strh	r2, [r3, #0]
  }
  return x;
 800d6a8:	697b      	ldr	r3, [r7, #20]
}
 800d6aa:	4618      	mov	r0, r3
 800d6ac:	371c      	adds	r7, #28
 800d6ae:	46bd      	mov	sp, r7
 800d6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b4:	4770      	bx	lr
	...

0800d6b8 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800d6b8:	b480      	push	{r7}
 800d6ba:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800d6bc:	4b05      	ldr	r3, [pc, #20]	; (800d6d4 <UTIL_LPM_Init+0x1c>)
 800d6be:	2200      	movs	r2, #0
 800d6c0:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800d6c2:	4b05      	ldr	r3, [pc, #20]	; (800d6d8 <UTIL_LPM_Init+0x20>)
 800d6c4:	2200      	movs	r2, #0
 800d6c6:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800d6c8:	bf00      	nop
 800d6ca:	46bd      	mov	sp, r7
 800d6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d0:	4770      	bx	lr
 800d6d2:	bf00      	nop
 800d6d4:	20001974 	.word	0x20001974
 800d6d8:	20001978 	.word	0x20001978

0800d6dc <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800d6dc:	b480      	push	{r7}
 800d6de:	b087      	sub	sp, #28
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	6078      	str	r0, [r7, #4]
 800d6e4:	460b      	mov	r3, r1
 800d6e6:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d6e8:	f3ef 8310 	mrs	r3, PRIMASK
 800d6ec:	613b      	str	r3, [r7, #16]
  return(result);
 800d6ee:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800d6f0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d6f2:	b672      	cpsid	i
}
 800d6f4:	bf00      	nop
  
  switch(state)
 800d6f6:	78fb      	ldrb	r3, [r7, #3]
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d008      	beq.n	800d70e <UTIL_LPM_SetOffMode+0x32>
 800d6fc:	2b01      	cmp	r3, #1
 800d6fe:	d10e      	bne.n	800d71e <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800d700:	4b0d      	ldr	r3, [pc, #52]	; (800d738 <UTIL_LPM_SetOffMode+0x5c>)
 800d702:	681a      	ldr	r2, [r3, #0]
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	4313      	orrs	r3, r2
 800d708:	4a0b      	ldr	r2, [pc, #44]	; (800d738 <UTIL_LPM_SetOffMode+0x5c>)
 800d70a:	6013      	str	r3, [r2, #0]
      break;
 800d70c:	e008      	b.n	800d720 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	43da      	mvns	r2, r3
 800d712:	4b09      	ldr	r3, [pc, #36]	; (800d738 <UTIL_LPM_SetOffMode+0x5c>)
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	4013      	ands	r3, r2
 800d718:	4a07      	ldr	r2, [pc, #28]	; (800d738 <UTIL_LPM_SetOffMode+0x5c>)
 800d71a:	6013      	str	r3, [r2, #0]
      break;
 800d71c:	e000      	b.n	800d720 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800d71e:	bf00      	nop
 800d720:	697b      	ldr	r3, [r7, #20]
 800d722:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	f383 8810 	msr	PRIMASK, r3
}
 800d72a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800d72c:	bf00      	nop
 800d72e:	371c      	adds	r7, #28
 800d730:	46bd      	mov	sp, r7
 800d732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d736:	4770      	bx	lr
 800d738:	20001978 	.word	0x20001978

0800d73c <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800d73c:	b580      	push	{r7, lr}
 800d73e:	b090      	sub	sp, #64	; 0x40
 800d740:	af00      	add	r7, sp, #0
 800d742:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800d744:	4b73      	ldr	r3, [pc, #460]	; (800d914 <UTIL_SEQ_Run+0x1d8>)
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800d74a:	4b72      	ldr	r3, [pc, #456]	; (800d914 <UTIL_SEQ_Run+0x1d8>)
 800d74c:	681a      	ldr	r2, [r3, #0]
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	4013      	ands	r3, r2
 800d752:	4a70      	ldr	r2, [pc, #448]	; (800d914 <UTIL_SEQ_Run+0x1d8>)
 800d754:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800d756:	4b70      	ldr	r3, [pc, #448]	; (800d918 <UTIL_SEQ_Run+0x1dc>)
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800d75c:	4b6f      	ldr	r3, [pc, #444]	; (800d91c <UTIL_SEQ_Run+0x1e0>)
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800d762:	4b6f      	ldr	r3, [pc, #444]	; (800d920 <UTIL_SEQ_Run+0x1e4>)
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 800d768:	4b6e      	ldr	r3, [pc, #440]	; (800d924 <UTIL_SEQ_Run+0x1e8>)
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800d76e:	e08d      	b.n	800d88c <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800d770:	2300      	movs	r3, #0
 800d772:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800d774:	e002      	b.n	800d77c <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800d776:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d778:	3301      	adds	r3, #1
 800d77a:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800d77c:	4a6a      	ldr	r2, [pc, #424]	; (800d928 <UTIL_SEQ_Run+0x1ec>)
 800d77e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d780:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800d784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d786:	401a      	ands	r2, r3
 800d788:	4b62      	ldr	r3, [pc, #392]	; (800d914 <UTIL_SEQ_Run+0x1d8>)
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	4013      	ands	r3, r2
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d0f1      	beq.n	800d776 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800d792:	4a65      	ldr	r2, [pc, #404]	; (800d928 <UTIL_SEQ_Run+0x1ec>)
 800d794:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d796:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800d79a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d79c:	401a      	ands	r2, r3
 800d79e:	4b5d      	ldr	r3, [pc, #372]	; (800d914 <UTIL_SEQ_Run+0x1d8>)
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	4013      	ands	r3, r2
 800d7a4:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800d7a6:	4a60      	ldr	r2, [pc, #384]	; (800d928 <UTIL_SEQ_Run+0x1ec>)
 800d7a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7aa:	00db      	lsls	r3, r3, #3
 800d7ac:	4413      	add	r3, r2
 800d7ae:	685a      	ldr	r2, [r3, #4]
 800d7b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7b2:	4013      	ands	r3, r2
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d106      	bne.n	800d7c6 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800d7b8:	4a5b      	ldr	r2, [pc, #364]	; (800d928 <UTIL_SEQ_Run+0x1ec>)
 800d7ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7bc:	00db      	lsls	r3, r3, #3
 800d7be:	4413      	add	r3, r2
 800d7c0:	f04f 32ff 	mov.w	r2, #4294967295
 800d7c4:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800d7c6:	4a58      	ldr	r2, [pc, #352]	; (800d928 <UTIL_SEQ_Run+0x1ec>)
 800d7c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7ca:	00db      	lsls	r3, r3, #3
 800d7cc:	4413      	add	r3, r2
 800d7ce:	685a      	ldr	r2, [r3, #4]
 800d7d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7d2:	4013      	ands	r3, r2
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	f000 f9b3 	bl	800db40 <SEQ_BitPosition>
 800d7da:	4603      	mov	r3, r0
 800d7dc:	461a      	mov	r2, r3
 800d7de:	4b53      	ldr	r3, [pc, #332]	; (800d92c <UTIL_SEQ_Run+0x1f0>)
 800d7e0:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800d7e2:	4a51      	ldr	r2, [pc, #324]	; (800d928 <UTIL_SEQ_Run+0x1ec>)
 800d7e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7e6:	00db      	lsls	r3, r3, #3
 800d7e8:	4413      	add	r3, r2
 800d7ea:	685a      	ldr	r2, [r3, #4]
 800d7ec:	4b4f      	ldr	r3, [pc, #316]	; (800d92c <UTIL_SEQ_Run+0x1f0>)
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	2101      	movs	r1, #1
 800d7f2:	fa01 f303 	lsl.w	r3, r1, r3
 800d7f6:	43db      	mvns	r3, r3
 800d7f8:	401a      	ands	r2, r3
 800d7fa:	494b      	ldr	r1, [pc, #300]	; (800d928 <UTIL_SEQ_Run+0x1ec>)
 800d7fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7fe:	00db      	lsls	r3, r3, #3
 800d800:	440b      	add	r3, r1
 800d802:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d804:	f3ef 8310 	mrs	r3, PRIMASK
 800d808:	61bb      	str	r3, [r7, #24]
  return(result);
 800d80a:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800d80c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800d80e:	b672      	cpsid	i
}
 800d810:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800d812:	4b46      	ldr	r3, [pc, #280]	; (800d92c <UTIL_SEQ_Run+0x1f0>)
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	2201      	movs	r2, #1
 800d818:	fa02 f303 	lsl.w	r3, r2, r3
 800d81c:	43da      	mvns	r2, r3
 800d81e:	4b3e      	ldr	r3, [pc, #248]	; (800d918 <UTIL_SEQ_Run+0x1dc>)
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	4013      	ands	r3, r2
 800d824:	4a3c      	ldr	r2, [pc, #240]	; (800d918 <UTIL_SEQ_Run+0x1dc>)
 800d826:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800d828:	2302      	movs	r3, #2
 800d82a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d82c:	e013      	b.n	800d856 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800d82e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d830:	3b01      	subs	r3, #1
 800d832:	4a3d      	ldr	r2, [pc, #244]	; (800d928 <UTIL_SEQ_Run+0x1ec>)
 800d834:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800d838:	4b3c      	ldr	r3, [pc, #240]	; (800d92c <UTIL_SEQ_Run+0x1f0>)
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	2201      	movs	r2, #1
 800d83e:	fa02 f303 	lsl.w	r3, r2, r3
 800d842:	43da      	mvns	r2, r3
 800d844:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d846:	3b01      	subs	r3, #1
 800d848:	400a      	ands	r2, r1
 800d84a:	4937      	ldr	r1, [pc, #220]	; (800d928 <UTIL_SEQ_Run+0x1ec>)
 800d84c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800d850:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d852:	3b01      	subs	r3, #1
 800d854:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d856:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d1e8      	bne.n	800d82e <UTIL_SEQ_Run+0xf2>
 800d85c:	6a3b      	ldr	r3, [r7, #32]
 800d85e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d860:	697b      	ldr	r3, [r7, #20]
 800d862:	f383 8810 	msr	PRIMASK, r3
}
 800d866:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800d868:	4b30      	ldr	r3, [pc, #192]	; (800d92c <UTIL_SEQ_Run+0x1f0>)
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	4a30      	ldr	r2, [pc, #192]	; (800d930 <UTIL_SEQ_Run+0x1f4>)
 800d86e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d872:	4798      	blx	r3

    local_taskset = TaskSet;
 800d874:	4b28      	ldr	r3, [pc, #160]	; (800d918 <UTIL_SEQ_Run+0x1dc>)
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 800d87a:	4b28      	ldr	r3, [pc, #160]	; (800d91c <UTIL_SEQ_Run+0x1e0>)
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 800d880:	4b27      	ldr	r3, [pc, #156]	; (800d920 <UTIL_SEQ_Run+0x1e4>)
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 800d886:	4b27      	ldr	r3, [pc, #156]	; (800d924 <UTIL_SEQ_Run+0x1e8>)
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800d88c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d88e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d890:	401a      	ands	r2, r3
 800d892:	4b20      	ldr	r3, [pc, #128]	; (800d914 <UTIL_SEQ_Run+0x1d8>)
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	4013      	ands	r3, r2
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d005      	beq.n	800d8a8 <UTIL_SEQ_Run+0x16c>
 800d89c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d89e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8a0:	4013      	ands	r3, r2
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	f43f af64 	beq.w	800d770 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800d8a8:	4b20      	ldr	r3, [pc, #128]	; (800d92c <UTIL_SEQ_Run+0x1f0>)
 800d8aa:	f04f 32ff 	mov.w	r2, #4294967295
 800d8ae:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800d8b0:	f000 f938 	bl	800db24 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d8b4:	f3ef 8310 	mrs	r3, PRIMASK
 800d8b8:	613b      	str	r3, [r7, #16]
  return(result);
 800d8ba:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800d8bc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800d8be:	b672      	cpsid	i
}
 800d8c0:	bf00      	nop
  local_taskset = TaskSet;
 800d8c2:	4b15      	ldr	r3, [pc, #84]	; (800d918 <UTIL_SEQ_Run+0x1dc>)
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800d8c8:	4b14      	ldr	r3, [pc, #80]	; (800d91c <UTIL_SEQ_Run+0x1e0>)
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800d8ce:	4b14      	ldr	r3, [pc, #80]	; (800d920 <UTIL_SEQ_Run+0x1e4>)
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800d8d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d8d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8d8:	401a      	ands	r2, r3
 800d8da:	4b0e      	ldr	r3, [pc, #56]	; (800d914 <UTIL_SEQ_Run+0x1d8>)
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	4013      	ands	r3, r2
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d107      	bne.n	800d8f4 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800d8e4:	4b0f      	ldr	r3, [pc, #60]	; (800d924 <UTIL_SEQ_Run+0x1e8>)
 800d8e6:	681a      	ldr	r2, [r3, #0]
 800d8e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8ea:	4013      	ands	r3, r2
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d101      	bne.n	800d8f4 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800d8f0:	f7f4 f81d 	bl	800192e <UTIL_SEQ_Idle>
 800d8f4:	69fb      	ldr	r3, [r7, #28]
 800d8f6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	f383 8810 	msr	PRIMASK, r3
}
 800d8fe:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800d900:	f000 f917 	bl	800db32 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800d904:	4a03      	ldr	r2, [pc, #12]	; (800d914 <UTIL_SEQ_Run+0x1d8>)
 800d906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d908:	6013      	str	r3, [r2, #0]

  return;
 800d90a:	bf00      	nop
}
 800d90c:	3740      	adds	r7, #64	; 0x40
 800d90e:	46bd      	mov	sp, r7
 800d910:	bd80      	pop	{r7, pc}
 800d912:	bf00      	nop
 800d914:	20000040 	.word	0x20000040
 800d918:	2000197c 	.word	0x2000197c
 800d91c:	20001980 	.word	0x20001980
 800d920:	2000003c 	.word	0x2000003c
 800d924:	20001984 	.word	0x20001984
 800d928:	20001a0c 	.word	0x20001a0c
 800d92c:	20001988 	.word	0x20001988
 800d930:	2000198c 	.word	0x2000198c

0800d934 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800d934:	b580      	push	{r7, lr}
 800d936:	b088      	sub	sp, #32
 800d938:	af00      	add	r7, sp, #0
 800d93a:	60f8      	str	r0, [r7, #12]
 800d93c:	60b9      	str	r1, [r7, #8]
 800d93e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d940:	f3ef 8310 	mrs	r3, PRIMASK
 800d944:	617b      	str	r3, [r7, #20]
  return(result);
 800d946:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800d948:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800d94a:	b672      	cpsid	i
}
 800d94c:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800d94e:	68f8      	ldr	r0, [r7, #12]
 800d950:	f000 f8f6 	bl	800db40 <SEQ_BitPosition>
 800d954:	4603      	mov	r3, r0
 800d956:	4619      	mov	r1, r3
 800d958:	4a06      	ldr	r2, [pc, #24]	; (800d974 <UTIL_SEQ_RegTask+0x40>)
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800d960:	69fb      	ldr	r3, [r7, #28]
 800d962:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d964:	69bb      	ldr	r3, [r7, #24]
 800d966:	f383 8810 	msr	PRIMASK, r3
}
 800d96a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800d96c:	bf00      	nop
}
 800d96e:	3720      	adds	r7, #32
 800d970:	46bd      	mov	sp, r7
 800d972:	bd80      	pop	{r7, pc}
 800d974:	2000198c 	.word	0x2000198c

0800d978 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800d978:	b480      	push	{r7}
 800d97a:	b087      	sub	sp, #28
 800d97c:	af00      	add	r7, sp, #0
 800d97e:	6078      	str	r0, [r7, #4]
 800d980:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d982:	f3ef 8310 	mrs	r3, PRIMASK
 800d986:	60fb      	str	r3, [r7, #12]
  return(result);
 800d988:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800d98a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d98c:	b672      	cpsid	i
}
 800d98e:	bf00      	nop

  TaskSet |= TaskId_bm;
 800d990:	4b0d      	ldr	r3, [pc, #52]	; (800d9c8 <UTIL_SEQ_SetTask+0x50>)
 800d992:	681a      	ldr	r2, [r3, #0]
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	4313      	orrs	r3, r2
 800d998:	4a0b      	ldr	r2, [pc, #44]	; (800d9c8 <UTIL_SEQ_SetTask+0x50>)
 800d99a:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800d99c:	4a0b      	ldr	r2, [pc, #44]	; (800d9cc <UTIL_SEQ_SetTask+0x54>)
 800d99e:	683b      	ldr	r3, [r7, #0]
 800d9a0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	431a      	orrs	r2, r3
 800d9a8:	4908      	ldr	r1, [pc, #32]	; (800d9cc <UTIL_SEQ_SetTask+0x54>)
 800d9aa:	683b      	ldr	r3, [r7, #0]
 800d9ac:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800d9b0:	697b      	ldr	r3, [r7, #20]
 800d9b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d9b4:	693b      	ldr	r3, [r7, #16]
 800d9b6:	f383 8810 	msr	PRIMASK, r3
}
 800d9ba:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800d9bc:	bf00      	nop
}
 800d9be:	371c      	adds	r7, #28
 800d9c0:	46bd      	mov	sp, r7
 800d9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c6:	4770      	bx	lr
 800d9c8:	2000197c 	.word	0x2000197c
 800d9cc:	20001a0c 	.word	0x20001a0c

0800d9d0 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800d9d0:	b480      	push	{r7}
 800d9d2:	b087      	sub	sp, #28
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d9d8:	f3ef 8310 	mrs	r3, PRIMASK
 800d9dc:	60fb      	str	r3, [r7, #12]
  return(result);
 800d9de:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800d9e0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d9e2:	b672      	cpsid	i
}
 800d9e4:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	43da      	mvns	r2, r3
 800d9ea:	4b08      	ldr	r3, [pc, #32]	; (800da0c <UTIL_SEQ_PauseTask+0x3c>)
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	4013      	ands	r3, r2
 800d9f0:	4a06      	ldr	r2, [pc, #24]	; (800da0c <UTIL_SEQ_PauseTask+0x3c>)
 800d9f2:	6013      	str	r3, [r2, #0]
 800d9f4:	697b      	ldr	r3, [r7, #20]
 800d9f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d9f8:	693b      	ldr	r3, [r7, #16]
 800d9fa:	f383 8810 	msr	PRIMASK, r3
}
 800d9fe:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800da00:	bf00      	nop
}
 800da02:	371c      	adds	r7, #28
 800da04:	46bd      	mov	sp, r7
 800da06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da0a:	4770      	bx	lr
 800da0c:	2000003c 	.word	0x2000003c

0800da10 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800da10:	b480      	push	{r7}
 800da12:	b087      	sub	sp, #28
 800da14:	af00      	add	r7, sp, #0
 800da16:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800da18:	f3ef 8310 	mrs	r3, PRIMASK
 800da1c:	60fb      	str	r3, [r7, #12]
  return(result);
 800da1e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800da20:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800da22:	b672      	cpsid	i
}
 800da24:	bf00      	nop

  TaskMask |= TaskId_bm;
 800da26:	4b09      	ldr	r3, [pc, #36]	; (800da4c <UTIL_SEQ_ResumeTask+0x3c>)
 800da28:	681a      	ldr	r2, [r3, #0]
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	4313      	orrs	r3, r2
 800da2e:	4a07      	ldr	r2, [pc, #28]	; (800da4c <UTIL_SEQ_ResumeTask+0x3c>)
 800da30:	6013      	str	r3, [r2, #0]
 800da32:	697b      	ldr	r3, [r7, #20]
 800da34:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800da36:	693b      	ldr	r3, [r7, #16]
 800da38:	f383 8810 	msr	PRIMASK, r3
}
 800da3c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800da3e:	bf00      	nop
}
 800da40:	371c      	adds	r7, #28
 800da42:	46bd      	mov	sp, r7
 800da44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da48:	4770      	bx	lr
 800da4a:	bf00      	nop
 800da4c:	2000003c 	.word	0x2000003c

0800da50 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800da50:	b480      	push	{r7}
 800da52:	b087      	sub	sp, #28
 800da54:	af00      	add	r7, sp, #0
 800da56:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800da58:	f3ef 8310 	mrs	r3, PRIMASK
 800da5c:	60fb      	str	r3, [r7, #12]
  return(result);
 800da5e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800da60:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800da62:	b672      	cpsid	i
}
 800da64:	bf00      	nop

  EvtSet |= EvtId_bm;
 800da66:	4b09      	ldr	r3, [pc, #36]	; (800da8c <UTIL_SEQ_SetEvt+0x3c>)
 800da68:	681a      	ldr	r2, [r3, #0]
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	4313      	orrs	r3, r2
 800da6e:	4a07      	ldr	r2, [pc, #28]	; (800da8c <UTIL_SEQ_SetEvt+0x3c>)
 800da70:	6013      	str	r3, [r2, #0]
 800da72:	697b      	ldr	r3, [r7, #20]
 800da74:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800da76:	693b      	ldr	r3, [r7, #16]
 800da78:	f383 8810 	msr	PRIMASK, r3
}
 800da7c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800da7e:	bf00      	nop
}
 800da80:	371c      	adds	r7, #28
 800da82:	46bd      	mov	sp, r7
 800da84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da88:	4770      	bx	lr
 800da8a:	bf00      	nop
 800da8c:	20001980 	.word	0x20001980

0800da90 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800da90:	b580      	push	{r7, lr}
 800da92:	b088      	sub	sp, #32
 800da94:	af00      	add	r7, sp, #0
 800da96:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800da98:	4b1f      	ldr	r3, [pc, #124]	; (800db18 <UTIL_SEQ_WaitEvt+0x88>)
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800da9e:	4b1e      	ldr	r3, [pc, #120]	; (800db18 <UTIL_SEQ_WaitEvt+0x88>)
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800daa6:	d102      	bne.n	800daae <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800daa8:	2300      	movs	r3, #0
 800daaa:	61fb      	str	r3, [r7, #28]
 800daac:	e005      	b.n	800daba <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800daae:	4b1a      	ldr	r3, [pc, #104]	; (800db18 <UTIL_SEQ_WaitEvt+0x88>)
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	2201      	movs	r2, #1
 800dab4:	fa02 f303 	lsl.w	r3, r2, r3
 800dab8:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800daba:	4b18      	ldr	r3, [pc, #96]	; (800db1c <UTIL_SEQ_WaitEvt+0x8c>)
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800dac0:	4a16      	ldr	r2, [pc, #88]	; (800db1c <UTIL_SEQ_WaitEvt+0x8c>)
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800dac6:	e003      	b.n	800dad0 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800dac8:	6879      	ldr	r1, [r7, #4]
 800daca:	69f8      	ldr	r0, [r7, #28]
 800dacc:	f7f3 ff36 	bl	800193c <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800dad0:	4b13      	ldr	r3, [pc, #76]	; (800db20 <UTIL_SEQ_WaitEvt+0x90>)
 800dad2:	681a      	ldr	r2, [r3, #0]
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	4013      	ands	r3, r2
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d0f5      	beq.n	800dac8 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800dadc:	4a0e      	ldr	r2, [pc, #56]	; (800db18 <UTIL_SEQ_WaitEvt+0x88>)
 800dade:	69bb      	ldr	r3, [r7, #24]
 800dae0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dae2:	f3ef 8310 	mrs	r3, PRIMASK
 800dae6:	60bb      	str	r3, [r7, #8]
  return(result);
 800dae8:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800daea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800daec:	b672      	cpsid	i
}
 800daee:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	43da      	mvns	r2, r3
 800daf4:	4b0a      	ldr	r3, [pc, #40]	; (800db20 <UTIL_SEQ_WaitEvt+0x90>)
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	4013      	ands	r3, r2
 800dafa:	4a09      	ldr	r2, [pc, #36]	; (800db20 <UTIL_SEQ_WaitEvt+0x90>)
 800dafc:	6013      	str	r3, [r2, #0]
 800dafe:	693b      	ldr	r3, [r7, #16]
 800db00:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	f383 8810 	msr	PRIMASK, r3
}
 800db08:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800db0a:	4a04      	ldr	r2, [pc, #16]	; (800db1c <UTIL_SEQ_WaitEvt+0x8c>)
 800db0c:	697b      	ldr	r3, [r7, #20]
 800db0e:	6013      	str	r3, [r2, #0]
  return;
 800db10:	bf00      	nop
}
 800db12:	3720      	adds	r7, #32
 800db14:	46bd      	mov	sp, r7
 800db16:	bd80      	pop	{r7, pc}
 800db18:	20001988 	.word	0x20001988
 800db1c:	20001984 	.word	0x20001984
 800db20:	20001980 	.word	0x20001980

0800db24 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800db24:	b480      	push	{r7}
 800db26:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800db28:	bf00      	nop
}
 800db2a:	46bd      	mov	sp, r7
 800db2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db30:	4770      	bx	lr

0800db32 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800db32:	b480      	push	{r7}
 800db34:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800db36:	bf00      	nop
}
 800db38:	46bd      	mov	sp, r7
 800db3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db3e:	4770      	bx	lr

0800db40 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800db40:	b480      	push	{r7}
 800db42:	b085      	sub	sp, #20
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800db48:	2300      	movs	r3, #0
 800db4a:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800db50:	68bb      	ldr	r3, [r7, #8]
 800db52:	0c1b      	lsrs	r3, r3, #16
 800db54:	041b      	lsls	r3, r3, #16
 800db56:	2b00      	cmp	r3, #0
 800db58:	d104      	bne.n	800db64 <SEQ_BitPosition+0x24>
 800db5a:	2310      	movs	r3, #16
 800db5c:	73fb      	strb	r3, [r7, #15]
 800db5e:	68bb      	ldr	r3, [r7, #8]
 800db60:	041b      	lsls	r3, r3, #16
 800db62:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800db64:	68bb      	ldr	r3, [r7, #8]
 800db66:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d105      	bne.n	800db7a <SEQ_BitPosition+0x3a>
 800db6e:	7bfb      	ldrb	r3, [r7, #15]
 800db70:	3308      	adds	r3, #8
 800db72:	73fb      	strb	r3, [r7, #15]
 800db74:	68bb      	ldr	r3, [r7, #8]
 800db76:	021b      	lsls	r3, r3, #8
 800db78:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800db7a:	68bb      	ldr	r3, [r7, #8]
 800db7c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800db80:	2b00      	cmp	r3, #0
 800db82:	d105      	bne.n	800db90 <SEQ_BitPosition+0x50>
 800db84:	7bfb      	ldrb	r3, [r7, #15]
 800db86:	3304      	adds	r3, #4
 800db88:	73fb      	strb	r3, [r7, #15]
 800db8a:	68bb      	ldr	r3, [r7, #8]
 800db8c:	011b      	lsls	r3, r3, #4
 800db8e:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800db90:	68bb      	ldr	r3, [r7, #8]
 800db92:	0f1b      	lsrs	r3, r3, #28
 800db94:	4a07      	ldr	r2, [pc, #28]	; (800dbb4 <SEQ_BitPosition+0x74>)
 800db96:	5cd2      	ldrb	r2, [r2, r3]
 800db98:	7bfb      	ldrb	r3, [r7, #15]
 800db9a:	4413      	add	r3, r2
 800db9c:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800db9e:	7bfb      	ldrb	r3, [r7, #15]
 800dba0:	f1c3 031f 	rsb	r3, r3, #31
 800dba4:	b2db      	uxtb	r3, r3
}
 800dba6:	4618      	mov	r0, r3
 800dba8:	3714      	adds	r7, #20
 800dbaa:	46bd      	mov	sp, r7
 800dbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb0:	4770      	bx	lr
 800dbb2:	bf00      	nop
 800dbb4:	0801210c 	.word	0x0801210c

0800dbb8 <__cvt>:
 800dbb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dbbc:	ec55 4b10 	vmov	r4, r5, d0
 800dbc0:	2d00      	cmp	r5, #0
 800dbc2:	460e      	mov	r6, r1
 800dbc4:	4619      	mov	r1, r3
 800dbc6:	462b      	mov	r3, r5
 800dbc8:	bfbb      	ittet	lt
 800dbca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800dbce:	461d      	movlt	r5, r3
 800dbd0:	2300      	movge	r3, #0
 800dbd2:	232d      	movlt	r3, #45	; 0x2d
 800dbd4:	700b      	strb	r3, [r1, #0]
 800dbd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dbd8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800dbdc:	4691      	mov	r9, r2
 800dbde:	f023 0820 	bic.w	r8, r3, #32
 800dbe2:	bfbc      	itt	lt
 800dbe4:	4622      	movlt	r2, r4
 800dbe6:	4614      	movlt	r4, r2
 800dbe8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800dbec:	d005      	beq.n	800dbfa <__cvt+0x42>
 800dbee:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800dbf2:	d100      	bne.n	800dbf6 <__cvt+0x3e>
 800dbf4:	3601      	adds	r6, #1
 800dbf6:	2102      	movs	r1, #2
 800dbf8:	e000      	b.n	800dbfc <__cvt+0x44>
 800dbfa:	2103      	movs	r1, #3
 800dbfc:	ab03      	add	r3, sp, #12
 800dbfe:	9301      	str	r3, [sp, #4]
 800dc00:	ab02      	add	r3, sp, #8
 800dc02:	9300      	str	r3, [sp, #0]
 800dc04:	ec45 4b10 	vmov	d0, r4, r5
 800dc08:	4653      	mov	r3, sl
 800dc0a:	4632      	mov	r2, r6
 800dc0c:	f000 ff78 	bl	800eb00 <_dtoa_r>
 800dc10:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800dc14:	4607      	mov	r7, r0
 800dc16:	d102      	bne.n	800dc1e <__cvt+0x66>
 800dc18:	f019 0f01 	tst.w	r9, #1
 800dc1c:	d022      	beq.n	800dc64 <__cvt+0xac>
 800dc1e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800dc22:	eb07 0906 	add.w	r9, r7, r6
 800dc26:	d110      	bne.n	800dc4a <__cvt+0x92>
 800dc28:	783b      	ldrb	r3, [r7, #0]
 800dc2a:	2b30      	cmp	r3, #48	; 0x30
 800dc2c:	d10a      	bne.n	800dc44 <__cvt+0x8c>
 800dc2e:	2200      	movs	r2, #0
 800dc30:	2300      	movs	r3, #0
 800dc32:	4620      	mov	r0, r4
 800dc34:	4629      	mov	r1, r5
 800dc36:	f7f2 ff2f 	bl	8000a98 <__aeabi_dcmpeq>
 800dc3a:	b918      	cbnz	r0, 800dc44 <__cvt+0x8c>
 800dc3c:	f1c6 0601 	rsb	r6, r6, #1
 800dc40:	f8ca 6000 	str.w	r6, [sl]
 800dc44:	f8da 3000 	ldr.w	r3, [sl]
 800dc48:	4499      	add	r9, r3
 800dc4a:	2200      	movs	r2, #0
 800dc4c:	2300      	movs	r3, #0
 800dc4e:	4620      	mov	r0, r4
 800dc50:	4629      	mov	r1, r5
 800dc52:	f7f2 ff21 	bl	8000a98 <__aeabi_dcmpeq>
 800dc56:	b108      	cbz	r0, 800dc5c <__cvt+0xa4>
 800dc58:	f8cd 900c 	str.w	r9, [sp, #12]
 800dc5c:	2230      	movs	r2, #48	; 0x30
 800dc5e:	9b03      	ldr	r3, [sp, #12]
 800dc60:	454b      	cmp	r3, r9
 800dc62:	d307      	bcc.n	800dc74 <__cvt+0xbc>
 800dc64:	9b03      	ldr	r3, [sp, #12]
 800dc66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dc68:	1bdb      	subs	r3, r3, r7
 800dc6a:	4638      	mov	r0, r7
 800dc6c:	6013      	str	r3, [r2, #0]
 800dc6e:	b004      	add	sp, #16
 800dc70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc74:	1c59      	adds	r1, r3, #1
 800dc76:	9103      	str	r1, [sp, #12]
 800dc78:	701a      	strb	r2, [r3, #0]
 800dc7a:	e7f0      	b.n	800dc5e <__cvt+0xa6>

0800dc7c <__exponent>:
 800dc7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dc7e:	4603      	mov	r3, r0
 800dc80:	2900      	cmp	r1, #0
 800dc82:	bfb8      	it	lt
 800dc84:	4249      	neglt	r1, r1
 800dc86:	f803 2b02 	strb.w	r2, [r3], #2
 800dc8a:	bfb4      	ite	lt
 800dc8c:	222d      	movlt	r2, #45	; 0x2d
 800dc8e:	222b      	movge	r2, #43	; 0x2b
 800dc90:	2909      	cmp	r1, #9
 800dc92:	7042      	strb	r2, [r0, #1]
 800dc94:	dd2a      	ble.n	800dcec <__exponent+0x70>
 800dc96:	f10d 0207 	add.w	r2, sp, #7
 800dc9a:	4617      	mov	r7, r2
 800dc9c:	260a      	movs	r6, #10
 800dc9e:	4694      	mov	ip, r2
 800dca0:	fb91 f5f6 	sdiv	r5, r1, r6
 800dca4:	fb06 1415 	mls	r4, r6, r5, r1
 800dca8:	3430      	adds	r4, #48	; 0x30
 800dcaa:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800dcae:	460c      	mov	r4, r1
 800dcb0:	2c63      	cmp	r4, #99	; 0x63
 800dcb2:	f102 32ff 	add.w	r2, r2, #4294967295
 800dcb6:	4629      	mov	r1, r5
 800dcb8:	dcf1      	bgt.n	800dc9e <__exponent+0x22>
 800dcba:	3130      	adds	r1, #48	; 0x30
 800dcbc:	f1ac 0402 	sub.w	r4, ip, #2
 800dcc0:	f802 1c01 	strb.w	r1, [r2, #-1]
 800dcc4:	1c41      	adds	r1, r0, #1
 800dcc6:	4622      	mov	r2, r4
 800dcc8:	42ba      	cmp	r2, r7
 800dcca:	d30a      	bcc.n	800dce2 <__exponent+0x66>
 800dccc:	f10d 0209 	add.w	r2, sp, #9
 800dcd0:	eba2 020c 	sub.w	r2, r2, ip
 800dcd4:	42bc      	cmp	r4, r7
 800dcd6:	bf88      	it	hi
 800dcd8:	2200      	movhi	r2, #0
 800dcda:	4413      	add	r3, r2
 800dcdc:	1a18      	subs	r0, r3, r0
 800dcde:	b003      	add	sp, #12
 800dce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dce2:	f812 5b01 	ldrb.w	r5, [r2], #1
 800dce6:	f801 5f01 	strb.w	r5, [r1, #1]!
 800dcea:	e7ed      	b.n	800dcc8 <__exponent+0x4c>
 800dcec:	2330      	movs	r3, #48	; 0x30
 800dcee:	3130      	adds	r1, #48	; 0x30
 800dcf0:	7083      	strb	r3, [r0, #2]
 800dcf2:	70c1      	strb	r1, [r0, #3]
 800dcf4:	1d03      	adds	r3, r0, #4
 800dcf6:	e7f1      	b.n	800dcdc <__exponent+0x60>

0800dcf8 <_printf_float>:
 800dcf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcfc:	ed2d 8b02 	vpush	{d8}
 800dd00:	b08d      	sub	sp, #52	; 0x34
 800dd02:	460c      	mov	r4, r1
 800dd04:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800dd08:	4616      	mov	r6, r2
 800dd0a:	461f      	mov	r7, r3
 800dd0c:	4605      	mov	r5, r0
 800dd0e:	f000 fde9 	bl	800e8e4 <_localeconv_r>
 800dd12:	f8d0 a000 	ldr.w	sl, [r0]
 800dd16:	4650      	mov	r0, sl
 800dd18:	f7f2 fa92 	bl	8000240 <strlen>
 800dd1c:	2300      	movs	r3, #0
 800dd1e:	930a      	str	r3, [sp, #40]	; 0x28
 800dd20:	6823      	ldr	r3, [r4, #0]
 800dd22:	9305      	str	r3, [sp, #20]
 800dd24:	f8d8 3000 	ldr.w	r3, [r8]
 800dd28:	f894 b018 	ldrb.w	fp, [r4, #24]
 800dd2c:	3307      	adds	r3, #7
 800dd2e:	f023 0307 	bic.w	r3, r3, #7
 800dd32:	f103 0208 	add.w	r2, r3, #8
 800dd36:	f8c8 2000 	str.w	r2, [r8]
 800dd3a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800dd3e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800dd42:	9307      	str	r3, [sp, #28]
 800dd44:	f8cd 8018 	str.w	r8, [sp, #24]
 800dd48:	ee08 0a10 	vmov	s16, r0
 800dd4c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800dd50:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dd54:	4b9e      	ldr	r3, [pc, #632]	; (800dfd0 <_printf_float+0x2d8>)
 800dd56:	f04f 32ff 	mov.w	r2, #4294967295
 800dd5a:	f7f2 fecf 	bl	8000afc <__aeabi_dcmpun>
 800dd5e:	bb88      	cbnz	r0, 800ddc4 <_printf_float+0xcc>
 800dd60:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dd64:	4b9a      	ldr	r3, [pc, #616]	; (800dfd0 <_printf_float+0x2d8>)
 800dd66:	f04f 32ff 	mov.w	r2, #4294967295
 800dd6a:	f7f2 fea9 	bl	8000ac0 <__aeabi_dcmple>
 800dd6e:	bb48      	cbnz	r0, 800ddc4 <_printf_float+0xcc>
 800dd70:	2200      	movs	r2, #0
 800dd72:	2300      	movs	r3, #0
 800dd74:	4640      	mov	r0, r8
 800dd76:	4649      	mov	r1, r9
 800dd78:	f7f2 fe98 	bl	8000aac <__aeabi_dcmplt>
 800dd7c:	b110      	cbz	r0, 800dd84 <_printf_float+0x8c>
 800dd7e:	232d      	movs	r3, #45	; 0x2d
 800dd80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dd84:	4a93      	ldr	r2, [pc, #588]	; (800dfd4 <_printf_float+0x2dc>)
 800dd86:	4b94      	ldr	r3, [pc, #592]	; (800dfd8 <_printf_float+0x2e0>)
 800dd88:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800dd8c:	bf94      	ite	ls
 800dd8e:	4690      	movls	r8, r2
 800dd90:	4698      	movhi	r8, r3
 800dd92:	2303      	movs	r3, #3
 800dd94:	6123      	str	r3, [r4, #16]
 800dd96:	9b05      	ldr	r3, [sp, #20]
 800dd98:	f023 0304 	bic.w	r3, r3, #4
 800dd9c:	6023      	str	r3, [r4, #0]
 800dd9e:	f04f 0900 	mov.w	r9, #0
 800dda2:	9700      	str	r7, [sp, #0]
 800dda4:	4633      	mov	r3, r6
 800dda6:	aa0b      	add	r2, sp, #44	; 0x2c
 800dda8:	4621      	mov	r1, r4
 800ddaa:	4628      	mov	r0, r5
 800ddac:	f000 f9da 	bl	800e164 <_printf_common>
 800ddb0:	3001      	adds	r0, #1
 800ddb2:	f040 8090 	bne.w	800ded6 <_printf_float+0x1de>
 800ddb6:	f04f 30ff 	mov.w	r0, #4294967295
 800ddba:	b00d      	add	sp, #52	; 0x34
 800ddbc:	ecbd 8b02 	vpop	{d8}
 800ddc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddc4:	4642      	mov	r2, r8
 800ddc6:	464b      	mov	r3, r9
 800ddc8:	4640      	mov	r0, r8
 800ddca:	4649      	mov	r1, r9
 800ddcc:	f7f2 fe96 	bl	8000afc <__aeabi_dcmpun>
 800ddd0:	b140      	cbz	r0, 800dde4 <_printf_float+0xec>
 800ddd2:	464b      	mov	r3, r9
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	bfbc      	itt	lt
 800ddd8:	232d      	movlt	r3, #45	; 0x2d
 800ddda:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ddde:	4a7f      	ldr	r2, [pc, #508]	; (800dfdc <_printf_float+0x2e4>)
 800dde0:	4b7f      	ldr	r3, [pc, #508]	; (800dfe0 <_printf_float+0x2e8>)
 800dde2:	e7d1      	b.n	800dd88 <_printf_float+0x90>
 800dde4:	6863      	ldr	r3, [r4, #4]
 800dde6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ddea:	9206      	str	r2, [sp, #24]
 800ddec:	1c5a      	adds	r2, r3, #1
 800ddee:	d13f      	bne.n	800de70 <_printf_float+0x178>
 800ddf0:	2306      	movs	r3, #6
 800ddf2:	6063      	str	r3, [r4, #4]
 800ddf4:	9b05      	ldr	r3, [sp, #20]
 800ddf6:	6861      	ldr	r1, [r4, #4]
 800ddf8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ddfc:	2300      	movs	r3, #0
 800ddfe:	9303      	str	r3, [sp, #12]
 800de00:	ab0a      	add	r3, sp, #40	; 0x28
 800de02:	e9cd b301 	strd	fp, r3, [sp, #4]
 800de06:	ab09      	add	r3, sp, #36	; 0x24
 800de08:	ec49 8b10 	vmov	d0, r8, r9
 800de0c:	9300      	str	r3, [sp, #0]
 800de0e:	6022      	str	r2, [r4, #0]
 800de10:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800de14:	4628      	mov	r0, r5
 800de16:	f7ff fecf 	bl	800dbb8 <__cvt>
 800de1a:	9b06      	ldr	r3, [sp, #24]
 800de1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800de1e:	2b47      	cmp	r3, #71	; 0x47
 800de20:	4680      	mov	r8, r0
 800de22:	d108      	bne.n	800de36 <_printf_float+0x13e>
 800de24:	1cc8      	adds	r0, r1, #3
 800de26:	db02      	blt.n	800de2e <_printf_float+0x136>
 800de28:	6863      	ldr	r3, [r4, #4]
 800de2a:	4299      	cmp	r1, r3
 800de2c:	dd41      	ble.n	800deb2 <_printf_float+0x1ba>
 800de2e:	f1ab 0302 	sub.w	r3, fp, #2
 800de32:	fa5f fb83 	uxtb.w	fp, r3
 800de36:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800de3a:	d820      	bhi.n	800de7e <_printf_float+0x186>
 800de3c:	3901      	subs	r1, #1
 800de3e:	465a      	mov	r2, fp
 800de40:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800de44:	9109      	str	r1, [sp, #36]	; 0x24
 800de46:	f7ff ff19 	bl	800dc7c <__exponent>
 800de4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800de4c:	1813      	adds	r3, r2, r0
 800de4e:	2a01      	cmp	r2, #1
 800de50:	4681      	mov	r9, r0
 800de52:	6123      	str	r3, [r4, #16]
 800de54:	dc02      	bgt.n	800de5c <_printf_float+0x164>
 800de56:	6822      	ldr	r2, [r4, #0]
 800de58:	07d2      	lsls	r2, r2, #31
 800de5a:	d501      	bpl.n	800de60 <_printf_float+0x168>
 800de5c:	3301      	adds	r3, #1
 800de5e:	6123      	str	r3, [r4, #16]
 800de60:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800de64:	2b00      	cmp	r3, #0
 800de66:	d09c      	beq.n	800dda2 <_printf_float+0xaa>
 800de68:	232d      	movs	r3, #45	; 0x2d
 800de6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800de6e:	e798      	b.n	800dda2 <_printf_float+0xaa>
 800de70:	9a06      	ldr	r2, [sp, #24]
 800de72:	2a47      	cmp	r2, #71	; 0x47
 800de74:	d1be      	bne.n	800ddf4 <_printf_float+0xfc>
 800de76:	2b00      	cmp	r3, #0
 800de78:	d1bc      	bne.n	800ddf4 <_printf_float+0xfc>
 800de7a:	2301      	movs	r3, #1
 800de7c:	e7b9      	b.n	800ddf2 <_printf_float+0xfa>
 800de7e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800de82:	d118      	bne.n	800deb6 <_printf_float+0x1be>
 800de84:	2900      	cmp	r1, #0
 800de86:	6863      	ldr	r3, [r4, #4]
 800de88:	dd0b      	ble.n	800dea2 <_printf_float+0x1aa>
 800de8a:	6121      	str	r1, [r4, #16]
 800de8c:	b913      	cbnz	r3, 800de94 <_printf_float+0x19c>
 800de8e:	6822      	ldr	r2, [r4, #0]
 800de90:	07d0      	lsls	r0, r2, #31
 800de92:	d502      	bpl.n	800de9a <_printf_float+0x1a2>
 800de94:	3301      	adds	r3, #1
 800de96:	440b      	add	r3, r1
 800de98:	6123      	str	r3, [r4, #16]
 800de9a:	65a1      	str	r1, [r4, #88]	; 0x58
 800de9c:	f04f 0900 	mov.w	r9, #0
 800dea0:	e7de      	b.n	800de60 <_printf_float+0x168>
 800dea2:	b913      	cbnz	r3, 800deaa <_printf_float+0x1b2>
 800dea4:	6822      	ldr	r2, [r4, #0]
 800dea6:	07d2      	lsls	r2, r2, #31
 800dea8:	d501      	bpl.n	800deae <_printf_float+0x1b6>
 800deaa:	3302      	adds	r3, #2
 800deac:	e7f4      	b.n	800de98 <_printf_float+0x1a0>
 800deae:	2301      	movs	r3, #1
 800deb0:	e7f2      	b.n	800de98 <_printf_float+0x1a0>
 800deb2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800deb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800deb8:	4299      	cmp	r1, r3
 800deba:	db05      	blt.n	800dec8 <_printf_float+0x1d0>
 800debc:	6823      	ldr	r3, [r4, #0]
 800debe:	6121      	str	r1, [r4, #16]
 800dec0:	07d8      	lsls	r0, r3, #31
 800dec2:	d5ea      	bpl.n	800de9a <_printf_float+0x1a2>
 800dec4:	1c4b      	adds	r3, r1, #1
 800dec6:	e7e7      	b.n	800de98 <_printf_float+0x1a0>
 800dec8:	2900      	cmp	r1, #0
 800deca:	bfd4      	ite	le
 800decc:	f1c1 0202 	rsble	r2, r1, #2
 800ded0:	2201      	movgt	r2, #1
 800ded2:	4413      	add	r3, r2
 800ded4:	e7e0      	b.n	800de98 <_printf_float+0x1a0>
 800ded6:	6823      	ldr	r3, [r4, #0]
 800ded8:	055a      	lsls	r2, r3, #21
 800deda:	d407      	bmi.n	800deec <_printf_float+0x1f4>
 800dedc:	6923      	ldr	r3, [r4, #16]
 800dede:	4642      	mov	r2, r8
 800dee0:	4631      	mov	r1, r6
 800dee2:	4628      	mov	r0, r5
 800dee4:	47b8      	blx	r7
 800dee6:	3001      	adds	r0, #1
 800dee8:	d12c      	bne.n	800df44 <_printf_float+0x24c>
 800deea:	e764      	b.n	800ddb6 <_printf_float+0xbe>
 800deec:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800def0:	f240 80e0 	bls.w	800e0b4 <_printf_float+0x3bc>
 800def4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800def8:	2200      	movs	r2, #0
 800defa:	2300      	movs	r3, #0
 800defc:	f7f2 fdcc 	bl	8000a98 <__aeabi_dcmpeq>
 800df00:	2800      	cmp	r0, #0
 800df02:	d034      	beq.n	800df6e <_printf_float+0x276>
 800df04:	4a37      	ldr	r2, [pc, #220]	; (800dfe4 <_printf_float+0x2ec>)
 800df06:	2301      	movs	r3, #1
 800df08:	4631      	mov	r1, r6
 800df0a:	4628      	mov	r0, r5
 800df0c:	47b8      	blx	r7
 800df0e:	3001      	adds	r0, #1
 800df10:	f43f af51 	beq.w	800ddb6 <_printf_float+0xbe>
 800df14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800df18:	429a      	cmp	r2, r3
 800df1a:	db02      	blt.n	800df22 <_printf_float+0x22a>
 800df1c:	6823      	ldr	r3, [r4, #0]
 800df1e:	07d8      	lsls	r0, r3, #31
 800df20:	d510      	bpl.n	800df44 <_printf_float+0x24c>
 800df22:	ee18 3a10 	vmov	r3, s16
 800df26:	4652      	mov	r2, sl
 800df28:	4631      	mov	r1, r6
 800df2a:	4628      	mov	r0, r5
 800df2c:	47b8      	blx	r7
 800df2e:	3001      	adds	r0, #1
 800df30:	f43f af41 	beq.w	800ddb6 <_printf_float+0xbe>
 800df34:	f04f 0800 	mov.w	r8, #0
 800df38:	f104 091a 	add.w	r9, r4, #26
 800df3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df3e:	3b01      	subs	r3, #1
 800df40:	4543      	cmp	r3, r8
 800df42:	dc09      	bgt.n	800df58 <_printf_float+0x260>
 800df44:	6823      	ldr	r3, [r4, #0]
 800df46:	079b      	lsls	r3, r3, #30
 800df48:	f100 8107 	bmi.w	800e15a <_printf_float+0x462>
 800df4c:	68e0      	ldr	r0, [r4, #12]
 800df4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800df50:	4298      	cmp	r0, r3
 800df52:	bfb8      	it	lt
 800df54:	4618      	movlt	r0, r3
 800df56:	e730      	b.n	800ddba <_printf_float+0xc2>
 800df58:	2301      	movs	r3, #1
 800df5a:	464a      	mov	r2, r9
 800df5c:	4631      	mov	r1, r6
 800df5e:	4628      	mov	r0, r5
 800df60:	47b8      	blx	r7
 800df62:	3001      	adds	r0, #1
 800df64:	f43f af27 	beq.w	800ddb6 <_printf_float+0xbe>
 800df68:	f108 0801 	add.w	r8, r8, #1
 800df6c:	e7e6      	b.n	800df3c <_printf_float+0x244>
 800df6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df70:	2b00      	cmp	r3, #0
 800df72:	dc39      	bgt.n	800dfe8 <_printf_float+0x2f0>
 800df74:	4a1b      	ldr	r2, [pc, #108]	; (800dfe4 <_printf_float+0x2ec>)
 800df76:	2301      	movs	r3, #1
 800df78:	4631      	mov	r1, r6
 800df7a:	4628      	mov	r0, r5
 800df7c:	47b8      	blx	r7
 800df7e:	3001      	adds	r0, #1
 800df80:	f43f af19 	beq.w	800ddb6 <_printf_float+0xbe>
 800df84:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800df88:	4313      	orrs	r3, r2
 800df8a:	d102      	bne.n	800df92 <_printf_float+0x29a>
 800df8c:	6823      	ldr	r3, [r4, #0]
 800df8e:	07d9      	lsls	r1, r3, #31
 800df90:	d5d8      	bpl.n	800df44 <_printf_float+0x24c>
 800df92:	ee18 3a10 	vmov	r3, s16
 800df96:	4652      	mov	r2, sl
 800df98:	4631      	mov	r1, r6
 800df9a:	4628      	mov	r0, r5
 800df9c:	47b8      	blx	r7
 800df9e:	3001      	adds	r0, #1
 800dfa0:	f43f af09 	beq.w	800ddb6 <_printf_float+0xbe>
 800dfa4:	f04f 0900 	mov.w	r9, #0
 800dfa8:	f104 0a1a 	add.w	sl, r4, #26
 800dfac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dfae:	425b      	negs	r3, r3
 800dfb0:	454b      	cmp	r3, r9
 800dfb2:	dc01      	bgt.n	800dfb8 <_printf_float+0x2c0>
 800dfb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dfb6:	e792      	b.n	800dede <_printf_float+0x1e6>
 800dfb8:	2301      	movs	r3, #1
 800dfba:	4652      	mov	r2, sl
 800dfbc:	4631      	mov	r1, r6
 800dfbe:	4628      	mov	r0, r5
 800dfc0:	47b8      	blx	r7
 800dfc2:	3001      	adds	r0, #1
 800dfc4:	f43f aef7 	beq.w	800ddb6 <_printf_float+0xbe>
 800dfc8:	f109 0901 	add.w	r9, r9, #1
 800dfcc:	e7ee      	b.n	800dfac <_printf_float+0x2b4>
 800dfce:	bf00      	nop
 800dfd0:	7fefffff 	.word	0x7fefffff
 800dfd4:	0801211c 	.word	0x0801211c
 800dfd8:	08012120 	.word	0x08012120
 800dfdc:	08012124 	.word	0x08012124
 800dfe0:	08012128 	.word	0x08012128
 800dfe4:	0801212c 	.word	0x0801212c
 800dfe8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dfea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800dfec:	429a      	cmp	r2, r3
 800dfee:	bfa8      	it	ge
 800dff0:	461a      	movge	r2, r3
 800dff2:	2a00      	cmp	r2, #0
 800dff4:	4691      	mov	r9, r2
 800dff6:	dc37      	bgt.n	800e068 <_printf_float+0x370>
 800dff8:	f04f 0b00 	mov.w	fp, #0
 800dffc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e000:	f104 021a 	add.w	r2, r4, #26
 800e004:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e006:	9305      	str	r3, [sp, #20]
 800e008:	eba3 0309 	sub.w	r3, r3, r9
 800e00c:	455b      	cmp	r3, fp
 800e00e:	dc33      	bgt.n	800e078 <_printf_float+0x380>
 800e010:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e014:	429a      	cmp	r2, r3
 800e016:	db3b      	blt.n	800e090 <_printf_float+0x398>
 800e018:	6823      	ldr	r3, [r4, #0]
 800e01a:	07da      	lsls	r2, r3, #31
 800e01c:	d438      	bmi.n	800e090 <_printf_float+0x398>
 800e01e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800e022:	eba2 0903 	sub.w	r9, r2, r3
 800e026:	9b05      	ldr	r3, [sp, #20]
 800e028:	1ad2      	subs	r2, r2, r3
 800e02a:	4591      	cmp	r9, r2
 800e02c:	bfa8      	it	ge
 800e02e:	4691      	movge	r9, r2
 800e030:	f1b9 0f00 	cmp.w	r9, #0
 800e034:	dc35      	bgt.n	800e0a2 <_printf_float+0x3aa>
 800e036:	f04f 0800 	mov.w	r8, #0
 800e03a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e03e:	f104 0a1a 	add.w	sl, r4, #26
 800e042:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e046:	1a9b      	subs	r3, r3, r2
 800e048:	eba3 0309 	sub.w	r3, r3, r9
 800e04c:	4543      	cmp	r3, r8
 800e04e:	f77f af79 	ble.w	800df44 <_printf_float+0x24c>
 800e052:	2301      	movs	r3, #1
 800e054:	4652      	mov	r2, sl
 800e056:	4631      	mov	r1, r6
 800e058:	4628      	mov	r0, r5
 800e05a:	47b8      	blx	r7
 800e05c:	3001      	adds	r0, #1
 800e05e:	f43f aeaa 	beq.w	800ddb6 <_printf_float+0xbe>
 800e062:	f108 0801 	add.w	r8, r8, #1
 800e066:	e7ec      	b.n	800e042 <_printf_float+0x34a>
 800e068:	4613      	mov	r3, r2
 800e06a:	4631      	mov	r1, r6
 800e06c:	4642      	mov	r2, r8
 800e06e:	4628      	mov	r0, r5
 800e070:	47b8      	blx	r7
 800e072:	3001      	adds	r0, #1
 800e074:	d1c0      	bne.n	800dff8 <_printf_float+0x300>
 800e076:	e69e      	b.n	800ddb6 <_printf_float+0xbe>
 800e078:	2301      	movs	r3, #1
 800e07a:	4631      	mov	r1, r6
 800e07c:	4628      	mov	r0, r5
 800e07e:	9205      	str	r2, [sp, #20]
 800e080:	47b8      	blx	r7
 800e082:	3001      	adds	r0, #1
 800e084:	f43f ae97 	beq.w	800ddb6 <_printf_float+0xbe>
 800e088:	9a05      	ldr	r2, [sp, #20]
 800e08a:	f10b 0b01 	add.w	fp, fp, #1
 800e08e:	e7b9      	b.n	800e004 <_printf_float+0x30c>
 800e090:	ee18 3a10 	vmov	r3, s16
 800e094:	4652      	mov	r2, sl
 800e096:	4631      	mov	r1, r6
 800e098:	4628      	mov	r0, r5
 800e09a:	47b8      	blx	r7
 800e09c:	3001      	adds	r0, #1
 800e09e:	d1be      	bne.n	800e01e <_printf_float+0x326>
 800e0a0:	e689      	b.n	800ddb6 <_printf_float+0xbe>
 800e0a2:	9a05      	ldr	r2, [sp, #20]
 800e0a4:	464b      	mov	r3, r9
 800e0a6:	4442      	add	r2, r8
 800e0a8:	4631      	mov	r1, r6
 800e0aa:	4628      	mov	r0, r5
 800e0ac:	47b8      	blx	r7
 800e0ae:	3001      	adds	r0, #1
 800e0b0:	d1c1      	bne.n	800e036 <_printf_float+0x33e>
 800e0b2:	e680      	b.n	800ddb6 <_printf_float+0xbe>
 800e0b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e0b6:	2a01      	cmp	r2, #1
 800e0b8:	dc01      	bgt.n	800e0be <_printf_float+0x3c6>
 800e0ba:	07db      	lsls	r3, r3, #31
 800e0bc:	d53a      	bpl.n	800e134 <_printf_float+0x43c>
 800e0be:	2301      	movs	r3, #1
 800e0c0:	4642      	mov	r2, r8
 800e0c2:	4631      	mov	r1, r6
 800e0c4:	4628      	mov	r0, r5
 800e0c6:	47b8      	blx	r7
 800e0c8:	3001      	adds	r0, #1
 800e0ca:	f43f ae74 	beq.w	800ddb6 <_printf_float+0xbe>
 800e0ce:	ee18 3a10 	vmov	r3, s16
 800e0d2:	4652      	mov	r2, sl
 800e0d4:	4631      	mov	r1, r6
 800e0d6:	4628      	mov	r0, r5
 800e0d8:	47b8      	blx	r7
 800e0da:	3001      	adds	r0, #1
 800e0dc:	f43f ae6b 	beq.w	800ddb6 <_printf_float+0xbe>
 800e0e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e0e4:	2200      	movs	r2, #0
 800e0e6:	2300      	movs	r3, #0
 800e0e8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800e0ec:	f7f2 fcd4 	bl	8000a98 <__aeabi_dcmpeq>
 800e0f0:	b9d8      	cbnz	r0, 800e12a <_printf_float+0x432>
 800e0f2:	f10a 33ff 	add.w	r3, sl, #4294967295
 800e0f6:	f108 0201 	add.w	r2, r8, #1
 800e0fa:	4631      	mov	r1, r6
 800e0fc:	4628      	mov	r0, r5
 800e0fe:	47b8      	blx	r7
 800e100:	3001      	adds	r0, #1
 800e102:	d10e      	bne.n	800e122 <_printf_float+0x42a>
 800e104:	e657      	b.n	800ddb6 <_printf_float+0xbe>
 800e106:	2301      	movs	r3, #1
 800e108:	4652      	mov	r2, sl
 800e10a:	4631      	mov	r1, r6
 800e10c:	4628      	mov	r0, r5
 800e10e:	47b8      	blx	r7
 800e110:	3001      	adds	r0, #1
 800e112:	f43f ae50 	beq.w	800ddb6 <_printf_float+0xbe>
 800e116:	f108 0801 	add.w	r8, r8, #1
 800e11a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e11c:	3b01      	subs	r3, #1
 800e11e:	4543      	cmp	r3, r8
 800e120:	dcf1      	bgt.n	800e106 <_printf_float+0x40e>
 800e122:	464b      	mov	r3, r9
 800e124:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e128:	e6da      	b.n	800dee0 <_printf_float+0x1e8>
 800e12a:	f04f 0800 	mov.w	r8, #0
 800e12e:	f104 0a1a 	add.w	sl, r4, #26
 800e132:	e7f2      	b.n	800e11a <_printf_float+0x422>
 800e134:	2301      	movs	r3, #1
 800e136:	4642      	mov	r2, r8
 800e138:	e7df      	b.n	800e0fa <_printf_float+0x402>
 800e13a:	2301      	movs	r3, #1
 800e13c:	464a      	mov	r2, r9
 800e13e:	4631      	mov	r1, r6
 800e140:	4628      	mov	r0, r5
 800e142:	47b8      	blx	r7
 800e144:	3001      	adds	r0, #1
 800e146:	f43f ae36 	beq.w	800ddb6 <_printf_float+0xbe>
 800e14a:	f108 0801 	add.w	r8, r8, #1
 800e14e:	68e3      	ldr	r3, [r4, #12]
 800e150:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e152:	1a5b      	subs	r3, r3, r1
 800e154:	4543      	cmp	r3, r8
 800e156:	dcf0      	bgt.n	800e13a <_printf_float+0x442>
 800e158:	e6f8      	b.n	800df4c <_printf_float+0x254>
 800e15a:	f04f 0800 	mov.w	r8, #0
 800e15e:	f104 0919 	add.w	r9, r4, #25
 800e162:	e7f4      	b.n	800e14e <_printf_float+0x456>

0800e164 <_printf_common>:
 800e164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e168:	4616      	mov	r6, r2
 800e16a:	4699      	mov	r9, r3
 800e16c:	688a      	ldr	r2, [r1, #8]
 800e16e:	690b      	ldr	r3, [r1, #16]
 800e170:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e174:	4293      	cmp	r3, r2
 800e176:	bfb8      	it	lt
 800e178:	4613      	movlt	r3, r2
 800e17a:	6033      	str	r3, [r6, #0]
 800e17c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e180:	4607      	mov	r7, r0
 800e182:	460c      	mov	r4, r1
 800e184:	b10a      	cbz	r2, 800e18a <_printf_common+0x26>
 800e186:	3301      	adds	r3, #1
 800e188:	6033      	str	r3, [r6, #0]
 800e18a:	6823      	ldr	r3, [r4, #0]
 800e18c:	0699      	lsls	r1, r3, #26
 800e18e:	bf42      	ittt	mi
 800e190:	6833      	ldrmi	r3, [r6, #0]
 800e192:	3302      	addmi	r3, #2
 800e194:	6033      	strmi	r3, [r6, #0]
 800e196:	6825      	ldr	r5, [r4, #0]
 800e198:	f015 0506 	ands.w	r5, r5, #6
 800e19c:	d106      	bne.n	800e1ac <_printf_common+0x48>
 800e19e:	f104 0a19 	add.w	sl, r4, #25
 800e1a2:	68e3      	ldr	r3, [r4, #12]
 800e1a4:	6832      	ldr	r2, [r6, #0]
 800e1a6:	1a9b      	subs	r3, r3, r2
 800e1a8:	42ab      	cmp	r3, r5
 800e1aa:	dc26      	bgt.n	800e1fa <_printf_common+0x96>
 800e1ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e1b0:	1e13      	subs	r3, r2, #0
 800e1b2:	6822      	ldr	r2, [r4, #0]
 800e1b4:	bf18      	it	ne
 800e1b6:	2301      	movne	r3, #1
 800e1b8:	0692      	lsls	r2, r2, #26
 800e1ba:	d42b      	bmi.n	800e214 <_printf_common+0xb0>
 800e1bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e1c0:	4649      	mov	r1, r9
 800e1c2:	4638      	mov	r0, r7
 800e1c4:	47c0      	blx	r8
 800e1c6:	3001      	adds	r0, #1
 800e1c8:	d01e      	beq.n	800e208 <_printf_common+0xa4>
 800e1ca:	6823      	ldr	r3, [r4, #0]
 800e1cc:	6922      	ldr	r2, [r4, #16]
 800e1ce:	f003 0306 	and.w	r3, r3, #6
 800e1d2:	2b04      	cmp	r3, #4
 800e1d4:	bf02      	ittt	eq
 800e1d6:	68e5      	ldreq	r5, [r4, #12]
 800e1d8:	6833      	ldreq	r3, [r6, #0]
 800e1da:	1aed      	subeq	r5, r5, r3
 800e1dc:	68a3      	ldr	r3, [r4, #8]
 800e1de:	bf0c      	ite	eq
 800e1e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e1e4:	2500      	movne	r5, #0
 800e1e6:	4293      	cmp	r3, r2
 800e1e8:	bfc4      	itt	gt
 800e1ea:	1a9b      	subgt	r3, r3, r2
 800e1ec:	18ed      	addgt	r5, r5, r3
 800e1ee:	2600      	movs	r6, #0
 800e1f0:	341a      	adds	r4, #26
 800e1f2:	42b5      	cmp	r5, r6
 800e1f4:	d11a      	bne.n	800e22c <_printf_common+0xc8>
 800e1f6:	2000      	movs	r0, #0
 800e1f8:	e008      	b.n	800e20c <_printf_common+0xa8>
 800e1fa:	2301      	movs	r3, #1
 800e1fc:	4652      	mov	r2, sl
 800e1fe:	4649      	mov	r1, r9
 800e200:	4638      	mov	r0, r7
 800e202:	47c0      	blx	r8
 800e204:	3001      	adds	r0, #1
 800e206:	d103      	bne.n	800e210 <_printf_common+0xac>
 800e208:	f04f 30ff 	mov.w	r0, #4294967295
 800e20c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e210:	3501      	adds	r5, #1
 800e212:	e7c6      	b.n	800e1a2 <_printf_common+0x3e>
 800e214:	18e1      	adds	r1, r4, r3
 800e216:	1c5a      	adds	r2, r3, #1
 800e218:	2030      	movs	r0, #48	; 0x30
 800e21a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e21e:	4422      	add	r2, r4
 800e220:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e224:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e228:	3302      	adds	r3, #2
 800e22a:	e7c7      	b.n	800e1bc <_printf_common+0x58>
 800e22c:	2301      	movs	r3, #1
 800e22e:	4622      	mov	r2, r4
 800e230:	4649      	mov	r1, r9
 800e232:	4638      	mov	r0, r7
 800e234:	47c0      	blx	r8
 800e236:	3001      	adds	r0, #1
 800e238:	d0e6      	beq.n	800e208 <_printf_common+0xa4>
 800e23a:	3601      	adds	r6, #1
 800e23c:	e7d9      	b.n	800e1f2 <_printf_common+0x8e>
	...

0800e240 <_printf_i>:
 800e240:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e244:	7e0f      	ldrb	r7, [r1, #24]
 800e246:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e248:	2f78      	cmp	r7, #120	; 0x78
 800e24a:	4691      	mov	r9, r2
 800e24c:	4680      	mov	r8, r0
 800e24e:	460c      	mov	r4, r1
 800e250:	469a      	mov	sl, r3
 800e252:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e256:	d807      	bhi.n	800e268 <_printf_i+0x28>
 800e258:	2f62      	cmp	r7, #98	; 0x62
 800e25a:	d80a      	bhi.n	800e272 <_printf_i+0x32>
 800e25c:	2f00      	cmp	r7, #0
 800e25e:	f000 80d4 	beq.w	800e40a <_printf_i+0x1ca>
 800e262:	2f58      	cmp	r7, #88	; 0x58
 800e264:	f000 80c0 	beq.w	800e3e8 <_printf_i+0x1a8>
 800e268:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e26c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e270:	e03a      	b.n	800e2e8 <_printf_i+0xa8>
 800e272:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e276:	2b15      	cmp	r3, #21
 800e278:	d8f6      	bhi.n	800e268 <_printf_i+0x28>
 800e27a:	a101      	add	r1, pc, #4	; (adr r1, 800e280 <_printf_i+0x40>)
 800e27c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e280:	0800e2d9 	.word	0x0800e2d9
 800e284:	0800e2ed 	.word	0x0800e2ed
 800e288:	0800e269 	.word	0x0800e269
 800e28c:	0800e269 	.word	0x0800e269
 800e290:	0800e269 	.word	0x0800e269
 800e294:	0800e269 	.word	0x0800e269
 800e298:	0800e2ed 	.word	0x0800e2ed
 800e29c:	0800e269 	.word	0x0800e269
 800e2a0:	0800e269 	.word	0x0800e269
 800e2a4:	0800e269 	.word	0x0800e269
 800e2a8:	0800e269 	.word	0x0800e269
 800e2ac:	0800e3f1 	.word	0x0800e3f1
 800e2b0:	0800e319 	.word	0x0800e319
 800e2b4:	0800e3ab 	.word	0x0800e3ab
 800e2b8:	0800e269 	.word	0x0800e269
 800e2bc:	0800e269 	.word	0x0800e269
 800e2c0:	0800e413 	.word	0x0800e413
 800e2c4:	0800e269 	.word	0x0800e269
 800e2c8:	0800e319 	.word	0x0800e319
 800e2cc:	0800e269 	.word	0x0800e269
 800e2d0:	0800e269 	.word	0x0800e269
 800e2d4:	0800e3b3 	.word	0x0800e3b3
 800e2d8:	682b      	ldr	r3, [r5, #0]
 800e2da:	1d1a      	adds	r2, r3, #4
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	602a      	str	r2, [r5, #0]
 800e2e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e2e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e2e8:	2301      	movs	r3, #1
 800e2ea:	e09f      	b.n	800e42c <_printf_i+0x1ec>
 800e2ec:	6820      	ldr	r0, [r4, #0]
 800e2ee:	682b      	ldr	r3, [r5, #0]
 800e2f0:	0607      	lsls	r7, r0, #24
 800e2f2:	f103 0104 	add.w	r1, r3, #4
 800e2f6:	6029      	str	r1, [r5, #0]
 800e2f8:	d501      	bpl.n	800e2fe <_printf_i+0xbe>
 800e2fa:	681e      	ldr	r6, [r3, #0]
 800e2fc:	e003      	b.n	800e306 <_printf_i+0xc6>
 800e2fe:	0646      	lsls	r6, r0, #25
 800e300:	d5fb      	bpl.n	800e2fa <_printf_i+0xba>
 800e302:	f9b3 6000 	ldrsh.w	r6, [r3]
 800e306:	2e00      	cmp	r6, #0
 800e308:	da03      	bge.n	800e312 <_printf_i+0xd2>
 800e30a:	232d      	movs	r3, #45	; 0x2d
 800e30c:	4276      	negs	r6, r6
 800e30e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e312:	485a      	ldr	r0, [pc, #360]	; (800e47c <_printf_i+0x23c>)
 800e314:	230a      	movs	r3, #10
 800e316:	e012      	b.n	800e33e <_printf_i+0xfe>
 800e318:	682b      	ldr	r3, [r5, #0]
 800e31a:	6820      	ldr	r0, [r4, #0]
 800e31c:	1d19      	adds	r1, r3, #4
 800e31e:	6029      	str	r1, [r5, #0]
 800e320:	0605      	lsls	r5, r0, #24
 800e322:	d501      	bpl.n	800e328 <_printf_i+0xe8>
 800e324:	681e      	ldr	r6, [r3, #0]
 800e326:	e002      	b.n	800e32e <_printf_i+0xee>
 800e328:	0641      	lsls	r1, r0, #25
 800e32a:	d5fb      	bpl.n	800e324 <_printf_i+0xe4>
 800e32c:	881e      	ldrh	r6, [r3, #0]
 800e32e:	4853      	ldr	r0, [pc, #332]	; (800e47c <_printf_i+0x23c>)
 800e330:	2f6f      	cmp	r7, #111	; 0x6f
 800e332:	bf0c      	ite	eq
 800e334:	2308      	moveq	r3, #8
 800e336:	230a      	movne	r3, #10
 800e338:	2100      	movs	r1, #0
 800e33a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e33e:	6865      	ldr	r5, [r4, #4]
 800e340:	60a5      	str	r5, [r4, #8]
 800e342:	2d00      	cmp	r5, #0
 800e344:	bfa2      	ittt	ge
 800e346:	6821      	ldrge	r1, [r4, #0]
 800e348:	f021 0104 	bicge.w	r1, r1, #4
 800e34c:	6021      	strge	r1, [r4, #0]
 800e34e:	b90e      	cbnz	r6, 800e354 <_printf_i+0x114>
 800e350:	2d00      	cmp	r5, #0
 800e352:	d04b      	beq.n	800e3ec <_printf_i+0x1ac>
 800e354:	4615      	mov	r5, r2
 800e356:	fbb6 f1f3 	udiv	r1, r6, r3
 800e35a:	fb03 6711 	mls	r7, r3, r1, r6
 800e35e:	5dc7      	ldrb	r7, [r0, r7]
 800e360:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e364:	4637      	mov	r7, r6
 800e366:	42bb      	cmp	r3, r7
 800e368:	460e      	mov	r6, r1
 800e36a:	d9f4      	bls.n	800e356 <_printf_i+0x116>
 800e36c:	2b08      	cmp	r3, #8
 800e36e:	d10b      	bne.n	800e388 <_printf_i+0x148>
 800e370:	6823      	ldr	r3, [r4, #0]
 800e372:	07de      	lsls	r6, r3, #31
 800e374:	d508      	bpl.n	800e388 <_printf_i+0x148>
 800e376:	6923      	ldr	r3, [r4, #16]
 800e378:	6861      	ldr	r1, [r4, #4]
 800e37a:	4299      	cmp	r1, r3
 800e37c:	bfde      	ittt	le
 800e37e:	2330      	movle	r3, #48	; 0x30
 800e380:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e384:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e388:	1b52      	subs	r2, r2, r5
 800e38a:	6122      	str	r2, [r4, #16]
 800e38c:	f8cd a000 	str.w	sl, [sp]
 800e390:	464b      	mov	r3, r9
 800e392:	aa03      	add	r2, sp, #12
 800e394:	4621      	mov	r1, r4
 800e396:	4640      	mov	r0, r8
 800e398:	f7ff fee4 	bl	800e164 <_printf_common>
 800e39c:	3001      	adds	r0, #1
 800e39e:	d14a      	bne.n	800e436 <_printf_i+0x1f6>
 800e3a0:	f04f 30ff 	mov.w	r0, #4294967295
 800e3a4:	b004      	add	sp, #16
 800e3a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3aa:	6823      	ldr	r3, [r4, #0]
 800e3ac:	f043 0320 	orr.w	r3, r3, #32
 800e3b0:	6023      	str	r3, [r4, #0]
 800e3b2:	4833      	ldr	r0, [pc, #204]	; (800e480 <_printf_i+0x240>)
 800e3b4:	2778      	movs	r7, #120	; 0x78
 800e3b6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e3ba:	6823      	ldr	r3, [r4, #0]
 800e3bc:	6829      	ldr	r1, [r5, #0]
 800e3be:	061f      	lsls	r7, r3, #24
 800e3c0:	f851 6b04 	ldr.w	r6, [r1], #4
 800e3c4:	d402      	bmi.n	800e3cc <_printf_i+0x18c>
 800e3c6:	065f      	lsls	r7, r3, #25
 800e3c8:	bf48      	it	mi
 800e3ca:	b2b6      	uxthmi	r6, r6
 800e3cc:	07df      	lsls	r7, r3, #31
 800e3ce:	bf48      	it	mi
 800e3d0:	f043 0320 	orrmi.w	r3, r3, #32
 800e3d4:	6029      	str	r1, [r5, #0]
 800e3d6:	bf48      	it	mi
 800e3d8:	6023      	strmi	r3, [r4, #0]
 800e3da:	b91e      	cbnz	r6, 800e3e4 <_printf_i+0x1a4>
 800e3dc:	6823      	ldr	r3, [r4, #0]
 800e3de:	f023 0320 	bic.w	r3, r3, #32
 800e3e2:	6023      	str	r3, [r4, #0]
 800e3e4:	2310      	movs	r3, #16
 800e3e6:	e7a7      	b.n	800e338 <_printf_i+0xf8>
 800e3e8:	4824      	ldr	r0, [pc, #144]	; (800e47c <_printf_i+0x23c>)
 800e3ea:	e7e4      	b.n	800e3b6 <_printf_i+0x176>
 800e3ec:	4615      	mov	r5, r2
 800e3ee:	e7bd      	b.n	800e36c <_printf_i+0x12c>
 800e3f0:	682b      	ldr	r3, [r5, #0]
 800e3f2:	6826      	ldr	r6, [r4, #0]
 800e3f4:	6961      	ldr	r1, [r4, #20]
 800e3f6:	1d18      	adds	r0, r3, #4
 800e3f8:	6028      	str	r0, [r5, #0]
 800e3fa:	0635      	lsls	r5, r6, #24
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	d501      	bpl.n	800e404 <_printf_i+0x1c4>
 800e400:	6019      	str	r1, [r3, #0]
 800e402:	e002      	b.n	800e40a <_printf_i+0x1ca>
 800e404:	0670      	lsls	r0, r6, #25
 800e406:	d5fb      	bpl.n	800e400 <_printf_i+0x1c0>
 800e408:	8019      	strh	r1, [r3, #0]
 800e40a:	2300      	movs	r3, #0
 800e40c:	6123      	str	r3, [r4, #16]
 800e40e:	4615      	mov	r5, r2
 800e410:	e7bc      	b.n	800e38c <_printf_i+0x14c>
 800e412:	682b      	ldr	r3, [r5, #0]
 800e414:	1d1a      	adds	r2, r3, #4
 800e416:	602a      	str	r2, [r5, #0]
 800e418:	681d      	ldr	r5, [r3, #0]
 800e41a:	6862      	ldr	r2, [r4, #4]
 800e41c:	2100      	movs	r1, #0
 800e41e:	4628      	mov	r0, r5
 800e420:	f7f1 febe 	bl	80001a0 <memchr>
 800e424:	b108      	cbz	r0, 800e42a <_printf_i+0x1ea>
 800e426:	1b40      	subs	r0, r0, r5
 800e428:	6060      	str	r0, [r4, #4]
 800e42a:	6863      	ldr	r3, [r4, #4]
 800e42c:	6123      	str	r3, [r4, #16]
 800e42e:	2300      	movs	r3, #0
 800e430:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e434:	e7aa      	b.n	800e38c <_printf_i+0x14c>
 800e436:	6923      	ldr	r3, [r4, #16]
 800e438:	462a      	mov	r2, r5
 800e43a:	4649      	mov	r1, r9
 800e43c:	4640      	mov	r0, r8
 800e43e:	47d0      	blx	sl
 800e440:	3001      	adds	r0, #1
 800e442:	d0ad      	beq.n	800e3a0 <_printf_i+0x160>
 800e444:	6823      	ldr	r3, [r4, #0]
 800e446:	079b      	lsls	r3, r3, #30
 800e448:	d413      	bmi.n	800e472 <_printf_i+0x232>
 800e44a:	68e0      	ldr	r0, [r4, #12]
 800e44c:	9b03      	ldr	r3, [sp, #12]
 800e44e:	4298      	cmp	r0, r3
 800e450:	bfb8      	it	lt
 800e452:	4618      	movlt	r0, r3
 800e454:	e7a6      	b.n	800e3a4 <_printf_i+0x164>
 800e456:	2301      	movs	r3, #1
 800e458:	4632      	mov	r2, r6
 800e45a:	4649      	mov	r1, r9
 800e45c:	4640      	mov	r0, r8
 800e45e:	47d0      	blx	sl
 800e460:	3001      	adds	r0, #1
 800e462:	d09d      	beq.n	800e3a0 <_printf_i+0x160>
 800e464:	3501      	adds	r5, #1
 800e466:	68e3      	ldr	r3, [r4, #12]
 800e468:	9903      	ldr	r1, [sp, #12]
 800e46a:	1a5b      	subs	r3, r3, r1
 800e46c:	42ab      	cmp	r3, r5
 800e46e:	dcf2      	bgt.n	800e456 <_printf_i+0x216>
 800e470:	e7eb      	b.n	800e44a <_printf_i+0x20a>
 800e472:	2500      	movs	r5, #0
 800e474:	f104 0619 	add.w	r6, r4, #25
 800e478:	e7f5      	b.n	800e466 <_printf_i+0x226>
 800e47a:	bf00      	nop
 800e47c:	0801212e 	.word	0x0801212e
 800e480:	0801213f 	.word	0x0801213f

0800e484 <std>:
 800e484:	2300      	movs	r3, #0
 800e486:	b510      	push	{r4, lr}
 800e488:	4604      	mov	r4, r0
 800e48a:	e9c0 3300 	strd	r3, r3, [r0]
 800e48e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e492:	6083      	str	r3, [r0, #8]
 800e494:	8181      	strh	r1, [r0, #12]
 800e496:	6643      	str	r3, [r0, #100]	; 0x64
 800e498:	81c2      	strh	r2, [r0, #14]
 800e49a:	6183      	str	r3, [r0, #24]
 800e49c:	4619      	mov	r1, r3
 800e49e:	2208      	movs	r2, #8
 800e4a0:	305c      	adds	r0, #92	; 0x5c
 800e4a2:	f000 fa17 	bl	800e8d4 <memset>
 800e4a6:	4b0d      	ldr	r3, [pc, #52]	; (800e4dc <std+0x58>)
 800e4a8:	6263      	str	r3, [r4, #36]	; 0x24
 800e4aa:	4b0d      	ldr	r3, [pc, #52]	; (800e4e0 <std+0x5c>)
 800e4ac:	62a3      	str	r3, [r4, #40]	; 0x28
 800e4ae:	4b0d      	ldr	r3, [pc, #52]	; (800e4e4 <std+0x60>)
 800e4b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e4b2:	4b0d      	ldr	r3, [pc, #52]	; (800e4e8 <std+0x64>)
 800e4b4:	6323      	str	r3, [r4, #48]	; 0x30
 800e4b6:	4b0d      	ldr	r3, [pc, #52]	; (800e4ec <std+0x68>)
 800e4b8:	6224      	str	r4, [r4, #32]
 800e4ba:	429c      	cmp	r4, r3
 800e4bc:	d006      	beq.n	800e4cc <std+0x48>
 800e4be:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800e4c2:	4294      	cmp	r4, r2
 800e4c4:	d002      	beq.n	800e4cc <std+0x48>
 800e4c6:	33d0      	adds	r3, #208	; 0xd0
 800e4c8:	429c      	cmp	r4, r3
 800e4ca:	d105      	bne.n	800e4d8 <std+0x54>
 800e4cc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e4d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e4d4:	f000 ba7a 	b.w	800e9cc <__retarget_lock_init_recursive>
 800e4d8:	bd10      	pop	{r4, pc}
 800e4da:	bf00      	nop
 800e4dc:	0800e725 	.word	0x0800e725
 800e4e0:	0800e747 	.word	0x0800e747
 800e4e4:	0800e77f 	.word	0x0800e77f
 800e4e8:	0800e7a3 	.word	0x0800e7a3
 800e4ec:	20001a1c 	.word	0x20001a1c

0800e4f0 <stdio_exit_handler>:
 800e4f0:	4a02      	ldr	r2, [pc, #8]	; (800e4fc <stdio_exit_handler+0xc>)
 800e4f2:	4903      	ldr	r1, [pc, #12]	; (800e500 <stdio_exit_handler+0x10>)
 800e4f4:	4803      	ldr	r0, [pc, #12]	; (800e504 <stdio_exit_handler+0x14>)
 800e4f6:	f000 b869 	b.w	800e5cc <_fwalk_sglue>
 800e4fa:	bf00      	nop
 800e4fc:	20000044 	.word	0x20000044
 800e500:	08010621 	.word	0x08010621
 800e504:	20000050 	.word	0x20000050

0800e508 <cleanup_stdio>:
 800e508:	6841      	ldr	r1, [r0, #4]
 800e50a:	4b0c      	ldr	r3, [pc, #48]	; (800e53c <cleanup_stdio+0x34>)
 800e50c:	4299      	cmp	r1, r3
 800e50e:	b510      	push	{r4, lr}
 800e510:	4604      	mov	r4, r0
 800e512:	d001      	beq.n	800e518 <cleanup_stdio+0x10>
 800e514:	f002 f884 	bl	8010620 <_fflush_r>
 800e518:	68a1      	ldr	r1, [r4, #8]
 800e51a:	4b09      	ldr	r3, [pc, #36]	; (800e540 <cleanup_stdio+0x38>)
 800e51c:	4299      	cmp	r1, r3
 800e51e:	d002      	beq.n	800e526 <cleanup_stdio+0x1e>
 800e520:	4620      	mov	r0, r4
 800e522:	f002 f87d 	bl	8010620 <_fflush_r>
 800e526:	68e1      	ldr	r1, [r4, #12]
 800e528:	4b06      	ldr	r3, [pc, #24]	; (800e544 <cleanup_stdio+0x3c>)
 800e52a:	4299      	cmp	r1, r3
 800e52c:	d004      	beq.n	800e538 <cleanup_stdio+0x30>
 800e52e:	4620      	mov	r0, r4
 800e530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e534:	f002 b874 	b.w	8010620 <_fflush_r>
 800e538:	bd10      	pop	{r4, pc}
 800e53a:	bf00      	nop
 800e53c:	20001a1c 	.word	0x20001a1c
 800e540:	20001a84 	.word	0x20001a84
 800e544:	20001aec 	.word	0x20001aec

0800e548 <global_stdio_init.part.0>:
 800e548:	b510      	push	{r4, lr}
 800e54a:	4b0b      	ldr	r3, [pc, #44]	; (800e578 <global_stdio_init.part.0+0x30>)
 800e54c:	4c0b      	ldr	r4, [pc, #44]	; (800e57c <global_stdio_init.part.0+0x34>)
 800e54e:	4a0c      	ldr	r2, [pc, #48]	; (800e580 <global_stdio_init.part.0+0x38>)
 800e550:	601a      	str	r2, [r3, #0]
 800e552:	4620      	mov	r0, r4
 800e554:	2200      	movs	r2, #0
 800e556:	2104      	movs	r1, #4
 800e558:	f7ff ff94 	bl	800e484 <std>
 800e55c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800e560:	2201      	movs	r2, #1
 800e562:	2109      	movs	r1, #9
 800e564:	f7ff ff8e 	bl	800e484 <std>
 800e568:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800e56c:	2202      	movs	r2, #2
 800e56e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e572:	2112      	movs	r1, #18
 800e574:	f7ff bf86 	b.w	800e484 <std>
 800e578:	20001b54 	.word	0x20001b54
 800e57c:	20001a1c 	.word	0x20001a1c
 800e580:	0800e4f1 	.word	0x0800e4f1

0800e584 <__sfp_lock_acquire>:
 800e584:	4801      	ldr	r0, [pc, #4]	; (800e58c <__sfp_lock_acquire+0x8>)
 800e586:	f000 ba22 	b.w	800e9ce <__retarget_lock_acquire_recursive>
 800e58a:	bf00      	nop
 800e58c:	20001b5d 	.word	0x20001b5d

0800e590 <__sfp_lock_release>:
 800e590:	4801      	ldr	r0, [pc, #4]	; (800e598 <__sfp_lock_release+0x8>)
 800e592:	f000 ba1d 	b.w	800e9d0 <__retarget_lock_release_recursive>
 800e596:	bf00      	nop
 800e598:	20001b5d 	.word	0x20001b5d

0800e59c <__sinit>:
 800e59c:	b510      	push	{r4, lr}
 800e59e:	4604      	mov	r4, r0
 800e5a0:	f7ff fff0 	bl	800e584 <__sfp_lock_acquire>
 800e5a4:	6a23      	ldr	r3, [r4, #32]
 800e5a6:	b11b      	cbz	r3, 800e5b0 <__sinit+0x14>
 800e5a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e5ac:	f7ff bff0 	b.w	800e590 <__sfp_lock_release>
 800e5b0:	4b04      	ldr	r3, [pc, #16]	; (800e5c4 <__sinit+0x28>)
 800e5b2:	6223      	str	r3, [r4, #32]
 800e5b4:	4b04      	ldr	r3, [pc, #16]	; (800e5c8 <__sinit+0x2c>)
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d1f5      	bne.n	800e5a8 <__sinit+0xc>
 800e5bc:	f7ff ffc4 	bl	800e548 <global_stdio_init.part.0>
 800e5c0:	e7f2      	b.n	800e5a8 <__sinit+0xc>
 800e5c2:	bf00      	nop
 800e5c4:	0800e509 	.word	0x0800e509
 800e5c8:	20001b54 	.word	0x20001b54

0800e5cc <_fwalk_sglue>:
 800e5cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e5d0:	4607      	mov	r7, r0
 800e5d2:	4688      	mov	r8, r1
 800e5d4:	4614      	mov	r4, r2
 800e5d6:	2600      	movs	r6, #0
 800e5d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e5dc:	f1b9 0901 	subs.w	r9, r9, #1
 800e5e0:	d505      	bpl.n	800e5ee <_fwalk_sglue+0x22>
 800e5e2:	6824      	ldr	r4, [r4, #0]
 800e5e4:	2c00      	cmp	r4, #0
 800e5e6:	d1f7      	bne.n	800e5d8 <_fwalk_sglue+0xc>
 800e5e8:	4630      	mov	r0, r6
 800e5ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e5ee:	89ab      	ldrh	r3, [r5, #12]
 800e5f0:	2b01      	cmp	r3, #1
 800e5f2:	d907      	bls.n	800e604 <_fwalk_sglue+0x38>
 800e5f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e5f8:	3301      	adds	r3, #1
 800e5fa:	d003      	beq.n	800e604 <_fwalk_sglue+0x38>
 800e5fc:	4629      	mov	r1, r5
 800e5fe:	4638      	mov	r0, r7
 800e600:	47c0      	blx	r8
 800e602:	4306      	orrs	r6, r0
 800e604:	3568      	adds	r5, #104	; 0x68
 800e606:	e7e9      	b.n	800e5dc <_fwalk_sglue+0x10>

0800e608 <iprintf>:
 800e608:	b40f      	push	{r0, r1, r2, r3}
 800e60a:	b507      	push	{r0, r1, r2, lr}
 800e60c:	4906      	ldr	r1, [pc, #24]	; (800e628 <iprintf+0x20>)
 800e60e:	ab04      	add	r3, sp, #16
 800e610:	6808      	ldr	r0, [r1, #0]
 800e612:	f853 2b04 	ldr.w	r2, [r3], #4
 800e616:	6881      	ldr	r1, [r0, #8]
 800e618:	9301      	str	r3, [sp, #4]
 800e61a:	f001 fe61 	bl	80102e0 <_vfiprintf_r>
 800e61e:	b003      	add	sp, #12
 800e620:	f85d eb04 	ldr.w	lr, [sp], #4
 800e624:	b004      	add	sp, #16
 800e626:	4770      	bx	lr
 800e628:	2000009c 	.word	0x2000009c

0800e62c <_puts_r>:
 800e62c:	6a03      	ldr	r3, [r0, #32]
 800e62e:	b570      	push	{r4, r5, r6, lr}
 800e630:	6884      	ldr	r4, [r0, #8]
 800e632:	4605      	mov	r5, r0
 800e634:	460e      	mov	r6, r1
 800e636:	b90b      	cbnz	r3, 800e63c <_puts_r+0x10>
 800e638:	f7ff ffb0 	bl	800e59c <__sinit>
 800e63c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e63e:	07db      	lsls	r3, r3, #31
 800e640:	d405      	bmi.n	800e64e <_puts_r+0x22>
 800e642:	89a3      	ldrh	r3, [r4, #12]
 800e644:	0598      	lsls	r0, r3, #22
 800e646:	d402      	bmi.n	800e64e <_puts_r+0x22>
 800e648:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e64a:	f000 f9c0 	bl	800e9ce <__retarget_lock_acquire_recursive>
 800e64e:	89a3      	ldrh	r3, [r4, #12]
 800e650:	0719      	lsls	r1, r3, #28
 800e652:	d513      	bpl.n	800e67c <_puts_r+0x50>
 800e654:	6923      	ldr	r3, [r4, #16]
 800e656:	b18b      	cbz	r3, 800e67c <_puts_r+0x50>
 800e658:	3e01      	subs	r6, #1
 800e65a:	68a3      	ldr	r3, [r4, #8]
 800e65c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e660:	3b01      	subs	r3, #1
 800e662:	60a3      	str	r3, [r4, #8]
 800e664:	b9e9      	cbnz	r1, 800e6a2 <_puts_r+0x76>
 800e666:	2b00      	cmp	r3, #0
 800e668:	da2e      	bge.n	800e6c8 <_puts_r+0x9c>
 800e66a:	4622      	mov	r2, r4
 800e66c:	210a      	movs	r1, #10
 800e66e:	4628      	mov	r0, r5
 800e670:	f000 f89b 	bl	800e7aa <__swbuf_r>
 800e674:	3001      	adds	r0, #1
 800e676:	d007      	beq.n	800e688 <_puts_r+0x5c>
 800e678:	250a      	movs	r5, #10
 800e67a:	e007      	b.n	800e68c <_puts_r+0x60>
 800e67c:	4621      	mov	r1, r4
 800e67e:	4628      	mov	r0, r5
 800e680:	f000 f8d0 	bl	800e824 <__swsetup_r>
 800e684:	2800      	cmp	r0, #0
 800e686:	d0e7      	beq.n	800e658 <_puts_r+0x2c>
 800e688:	f04f 35ff 	mov.w	r5, #4294967295
 800e68c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e68e:	07da      	lsls	r2, r3, #31
 800e690:	d405      	bmi.n	800e69e <_puts_r+0x72>
 800e692:	89a3      	ldrh	r3, [r4, #12]
 800e694:	059b      	lsls	r3, r3, #22
 800e696:	d402      	bmi.n	800e69e <_puts_r+0x72>
 800e698:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e69a:	f000 f999 	bl	800e9d0 <__retarget_lock_release_recursive>
 800e69e:	4628      	mov	r0, r5
 800e6a0:	bd70      	pop	{r4, r5, r6, pc}
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	da04      	bge.n	800e6b0 <_puts_r+0x84>
 800e6a6:	69a2      	ldr	r2, [r4, #24]
 800e6a8:	429a      	cmp	r2, r3
 800e6aa:	dc06      	bgt.n	800e6ba <_puts_r+0x8e>
 800e6ac:	290a      	cmp	r1, #10
 800e6ae:	d004      	beq.n	800e6ba <_puts_r+0x8e>
 800e6b0:	6823      	ldr	r3, [r4, #0]
 800e6b2:	1c5a      	adds	r2, r3, #1
 800e6b4:	6022      	str	r2, [r4, #0]
 800e6b6:	7019      	strb	r1, [r3, #0]
 800e6b8:	e7cf      	b.n	800e65a <_puts_r+0x2e>
 800e6ba:	4622      	mov	r2, r4
 800e6bc:	4628      	mov	r0, r5
 800e6be:	f000 f874 	bl	800e7aa <__swbuf_r>
 800e6c2:	3001      	adds	r0, #1
 800e6c4:	d1c9      	bne.n	800e65a <_puts_r+0x2e>
 800e6c6:	e7df      	b.n	800e688 <_puts_r+0x5c>
 800e6c8:	6823      	ldr	r3, [r4, #0]
 800e6ca:	250a      	movs	r5, #10
 800e6cc:	1c5a      	adds	r2, r3, #1
 800e6ce:	6022      	str	r2, [r4, #0]
 800e6d0:	701d      	strb	r5, [r3, #0]
 800e6d2:	e7db      	b.n	800e68c <_puts_r+0x60>

0800e6d4 <puts>:
 800e6d4:	4b02      	ldr	r3, [pc, #8]	; (800e6e0 <puts+0xc>)
 800e6d6:	4601      	mov	r1, r0
 800e6d8:	6818      	ldr	r0, [r3, #0]
 800e6da:	f7ff bfa7 	b.w	800e62c <_puts_r>
 800e6de:	bf00      	nop
 800e6e0:	2000009c 	.word	0x2000009c

0800e6e4 <siprintf>:
 800e6e4:	b40e      	push	{r1, r2, r3}
 800e6e6:	b500      	push	{lr}
 800e6e8:	b09c      	sub	sp, #112	; 0x70
 800e6ea:	ab1d      	add	r3, sp, #116	; 0x74
 800e6ec:	9002      	str	r0, [sp, #8]
 800e6ee:	9006      	str	r0, [sp, #24]
 800e6f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e6f4:	4809      	ldr	r0, [pc, #36]	; (800e71c <siprintf+0x38>)
 800e6f6:	9107      	str	r1, [sp, #28]
 800e6f8:	9104      	str	r1, [sp, #16]
 800e6fa:	4909      	ldr	r1, [pc, #36]	; (800e720 <siprintf+0x3c>)
 800e6fc:	f853 2b04 	ldr.w	r2, [r3], #4
 800e700:	9105      	str	r1, [sp, #20]
 800e702:	6800      	ldr	r0, [r0, #0]
 800e704:	9301      	str	r3, [sp, #4]
 800e706:	a902      	add	r1, sp, #8
 800e708:	f001 fcc2 	bl	8010090 <_svfiprintf_r>
 800e70c:	9b02      	ldr	r3, [sp, #8]
 800e70e:	2200      	movs	r2, #0
 800e710:	701a      	strb	r2, [r3, #0]
 800e712:	b01c      	add	sp, #112	; 0x70
 800e714:	f85d eb04 	ldr.w	lr, [sp], #4
 800e718:	b003      	add	sp, #12
 800e71a:	4770      	bx	lr
 800e71c:	2000009c 	.word	0x2000009c
 800e720:	ffff0208 	.word	0xffff0208

0800e724 <__sread>:
 800e724:	b510      	push	{r4, lr}
 800e726:	460c      	mov	r4, r1
 800e728:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e72c:	f000 f900 	bl	800e930 <_read_r>
 800e730:	2800      	cmp	r0, #0
 800e732:	bfab      	itete	ge
 800e734:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e736:	89a3      	ldrhlt	r3, [r4, #12]
 800e738:	181b      	addge	r3, r3, r0
 800e73a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e73e:	bfac      	ite	ge
 800e740:	6563      	strge	r3, [r4, #84]	; 0x54
 800e742:	81a3      	strhlt	r3, [r4, #12]
 800e744:	bd10      	pop	{r4, pc}

0800e746 <__swrite>:
 800e746:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e74a:	461f      	mov	r7, r3
 800e74c:	898b      	ldrh	r3, [r1, #12]
 800e74e:	05db      	lsls	r3, r3, #23
 800e750:	4605      	mov	r5, r0
 800e752:	460c      	mov	r4, r1
 800e754:	4616      	mov	r6, r2
 800e756:	d505      	bpl.n	800e764 <__swrite+0x1e>
 800e758:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e75c:	2302      	movs	r3, #2
 800e75e:	2200      	movs	r2, #0
 800e760:	f000 f8d4 	bl	800e90c <_lseek_r>
 800e764:	89a3      	ldrh	r3, [r4, #12]
 800e766:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e76a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e76e:	81a3      	strh	r3, [r4, #12]
 800e770:	4632      	mov	r2, r6
 800e772:	463b      	mov	r3, r7
 800e774:	4628      	mov	r0, r5
 800e776:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e77a:	f000 b8eb 	b.w	800e954 <_write_r>

0800e77e <__sseek>:
 800e77e:	b510      	push	{r4, lr}
 800e780:	460c      	mov	r4, r1
 800e782:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e786:	f000 f8c1 	bl	800e90c <_lseek_r>
 800e78a:	1c43      	adds	r3, r0, #1
 800e78c:	89a3      	ldrh	r3, [r4, #12]
 800e78e:	bf15      	itete	ne
 800e790:	6560      	strne	r0, [r4, #84]	; 0x54
 800e792:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e796:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e79a:	81a3      	strheq	r3, [r4, #12]
 800e79c:	bf18      	it	ne
 800e79e:	81a3      	strhne	r3, [r4, #12]
 800e7a0:	bd10      	pop	{r4, pc}

0800e7a2 <__sclose>:
 800e7a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7a6:	f000 b8a1 	b.w	800e8ec <_close_r>

0800e7aa <__swbuf_r>:
 800e7aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7ac:	460e      	mov	r6, r1
 800e7ae:	4614      	mov	r4, r2
 800e7b0:	4605      	mov	r5, r0
 800e7b2:	b118      	cbz	r0, 800e7bc <__swbuf_r+0x12>
 800e7b4:	6a03      	ldr	r3, [r0, #32]
 800e7b6:	b90b      	cbnz	r3, 800e7bc <__swbuf_r+0x12>
 800e7b8:	f7ff fef0 	bl	800e59c <__sinit>
 800e7bc:	69a3      	ldr	r3, [r4, #24]
 800e7be:	60a3      	str	r3, [r4, #8]
 800e7c0:	89a3      	ldrh	r3, [r4, #12]
 800e7c2:	071a      	lsls	r2, r3, #28
 800e7c4:	d525      	bpl.n	800e812 <__swbuf_r+0x68>
 800e7c6:	6923      	ldr	r3, [r4, #16]
 800e7c8:	b31b      	cbz	r3, 800e812 <__swbuf_r+0x68>
 800e7ca:	6823      	ldr	r3, [r4, #0]
 800e7cc:	6922      	ldr	r2, [r4, #16]
 800e7ce:	1a98      	subs	r0, r3, r2
 800e7d0:	6963      	ldr	r3, [r4, #20]
 800e7d2:	b2f6      	uxtb	r6, r6
 800e7d4:	4283      	cmp	r3, r0
 800e7d6:	4637      	mov	r7, r6
 800e7d8:	dc04      	bgt.n	800e7e4 <__swbuf_r+0x3a>
 800e7da:	4621      	mov	r1, r4
 800e7dc:	4628      	mov	r0, r5
 800e7de:	f001 ff1f 	bl	8010620 <_fflush_r>
 800e7e2:	b9e0      	cbnz	r0, 800e81e <__swbuf_r+0x74>
 800e7e4:	68a3      	ldr	r3, [r4, #8]
 800e7e6:	3b01      	subs	r3, #1
 800e7e8:	60a3      	str	r3, [r4, #8]
 800e7ea:	6823      	ldr	r3, [r4, #0]
 800e7ec:	1c5a      	adds	r2, r3, #1
 800e7ee:	6022      	str	r2, [r4, #0]
 800e7f0:	701e      	strb	r6, [r3, #0]
 800e7f2:	6962      	ldr	r2, [r4, #20]
 800e7f4:	1c43      	adds	r3, r0, #1
 800e7f6:	429a      	cmp	r2, r3
 800e7f8:	d004      	beq.n	800e804 <__swbuf_r+0x5a>
 800e7fa:	89a3      	ldrh	r3, [r4, #12]
 800e7fc:	07db      	lsls	r3, r3, #31
 800e7fe:	d506      	bpl.n	800e80e <__swbuf_r+0x64>
 800e800:	2e0a      	cmp	r6, #10
 800e802:	d104      	bne.n	800e80e <__swbuf_r+0x64>
 800e804:	4621      	mov	r1, r4
 800e806:	4628      	mov	r0, r5
 800e808:	f001 ff0a 	bl	8010620 <_fflush_r>
 800e80c:	b938      	cbnz	r0, 800e81e <__swbuf_r+0x74>
 800e80e:	4638      	mov	r0, r7
 800e810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e812:	4621      	mov	r1, r4
 800e814:	4628      	mov	r0, r5
 800e816:	f000 f805 	bl	800e824 <__swsetup_r>
 800e81a:	2800      	cmp	r0, #0
 800e81c:	d0d5      	beq.n	800e7ca <__swbuf_r+0x20>
 800e81e:	f04f 37ff 	mov.w	r7, #4294967295
 800e822:	e7f4      	b.n	800e80e <__swbuf_r+0x64>

0800e824 <__swsetup_r>:
 800e824:	b538      	push	{r3, r4, r5, lr}
 800e826:	4b2a      	ldr	r3, [pc, #168]	; (800e8d0 <__swsetup_r+0xac>)
 800e828:	4605      	mov	r5, r0
 800e82a:	6818      	ldr	r0, [r3, #0]
 800e82c:	460c      	mov	r4, r1
 800e82e:	b118      	cbz	r0, 800e838 <__swsetup_r+0x14>
 800e830:	6a03      	ldr	r3, [r0, #32]
 800e832:	b90b      	cbnz	r3, 800e838 <__swsetup_r+0x14>
 800e834:	f7ff feb2 	bl	800e59c <__sinit>
 800e838:	89a3      	ldrh	r3, [r4, #12]
 800e83a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e83e:	0718      	lsls	r0, r3, #28
 800e840:	d422      	bmi.n	800e888 <__swsetup_r+0x64>
 800e842:	06d9      	lsls	r1, r3, #27
 800e844:	d407      	bmi.n	800e856 <__swsetup_r+0x32>
 800e846:	2309      	movs	r3, #9
 800e848:	602b      	str	r3, [r5, #0]
 800e84a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e84e:	81a3      	strh	r3, [r4, #12]
 800e850:	f04f 30ff 	mov.w	r0, #4294967295
 800e854:	e034      	b.n	800e8c0 <__swsetup_r+0x9c>
 800e856:	0758      	lsls	r0, r3, #29
 800e858:	d512      	bpl.n	800e880 <__swsetup_r+0x5c>
 800e85a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e85c:	b141      	cbz	r1, 800e870 <__swsetup_r+0x4c>
 800e85e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e862:	4299      	cmp	r1, r3
 800e864:	d002      	beq.n	800e86c <__swsetup_r+0x48>
 800e866:	4628      	mov	r0, r5
 800e868:	f000 ff3c 	bl	800f6e4 <_free_r>
 800e86c:	2300      	movs	r3, #0
 800e86e:	6363      	str	r3, [r4, #52]	; 0x34
 800e870:	89a3      	ldrh	r3, [r4, #12]
 800e872:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e876:	81a3      	strh	r3, [r4, #12]
 800e878:	2300      	movs	r3, #0
 800e87a:	6063      	str	r3, [r4, #4]
 800e87c:	6923      	ldr	r3, [r4, #16]
 800e87e:	6023      	str	r3, [r4, #0]
 800e880:	89a3      	ldrh	r3, [r4, #12]
 800e882:	f043 0308 	orr.w	r3, r3, #8
 800e886:	81a3      	strh	r3, [r4, #12]
 800e888:	6923      	ldr	r3, [r4, #16]
 800e88a:	b94b      	cbnz	r3, 800e8a0 <__swsetup_r+0x7c>
 800e88c:	89a3      	ldrh	r3, [r4, #12]
 800e88e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e892:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e896:	d003      	beq.n	800e8a0 <__swsetup_r+0x7c>
 800e898:	4621      	mov	r1, r4
 800e89a:	4628      	mov	r0, r5
 800e89c:	f001 ff0e 	bl	80106bc <__smakebuf_r>
 800e8a0:	89a0      	ldrh	r0, [r4, #12]
 800e8a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e8a6:	f010 0301 	ands.w	r3, r0, #1
 800e8aa:	d00a      	beq.n	800e8c2 <__swsetup_r+0x9e>
 800e8ac:	2300      	movs	r3, #0
 800e8ae:	60a3      	str	r3, [r4, #8]
 800e8b0:	6963      	ldr	r3, [r4, #20]
 800e8b2:	425b      	negs	r3, r3
 800e8b4:	61a3      	str	r3, [r4, #24]
 800e8b6:	6923      	ldr	r3, [r4, #16]
 800e8b8:	b943      	cbnz	r3, 800e8cc <__swsetup_r+0xa8>
 800e8ba:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e8be:	d1c4      	bne.n	800e84a <__swsetup_r+0x26>
 800e8c0:	bd38      	pop	{r3, r4, r5, pc}
 800e8c2:	0781      	lsls	r1, r0, #30
 800e8c4:	bf58      	it	pl
 800e8c6:	6963      	ldrpl	r3, [r4, #20]
 800e8c8:	60a3      	str	r3, [r4, #8]
 800e8ca:	e7f4      	b.n	800e8b6 <__swsetup_r+0x92>
 800e8cc:	2000      	movs	r0, #0
 800e8ce:	e7f7      	b.n	800e8c0 <__swsetup_r+0x9c>
 800e8d0:	2000009c 	.word	0x2000009c

0800e8d4 <memset>:
 800e8d4:	4402      	add	r2, r0
 800e8d6:	4603      	mov	r3, r0
 800e8d8:	4293      	cmp	r3, r2
 800e8da:	d100      	bne.n	800e8de <memset+0xa>
 800e8dc:	4770      	bx	lr
 800e8de:	f803 1b01 	strb.w	r1, [r3], #1
 800e8e2:	e7f9      	b.n	800e8d8 <memset+0x4>

0800e8e4 <_localeconv_r>:
 800e8e4:	4800      	ldr	r0, [pc, #0]	; (800e8e8 <_localeconv_r+0x4>)
 800e8e6:	4770      	bx	lr
 800e8e8:	20000190 	.word	0x20000190

0800e8ec <_close_r>:
 800e8ec:	b538      	push	{r3, r4, r5, lr}
 800e8ee:	4d06      	ldr	r5, [pc, #24]	; (800e908 <_close_r+0x1c>)
 800e8f0:	2300      	movs	r3, #0
 800e8f2:	4604      	mov	r4, r0
 800e8f4:	4608      	mov	r0, r1
 800e8f6:	602b      	str	r3, [r5, #0]
 800e8f8:	f7f4 fdcc 	bl	8003494 <_close>
 800e8fc:	1c43      	adds	r3, r0, #1
 800e8fe:	d102      	bne.n	800e906 <_close_r+0x1a>
 800e900:	682b      	ldr	r3, [r5, #0]
 800e902:	b103      	cbz	r3, 800e906 <_close_r+0x1a>
 800e904:	6023      	str	r3, [r4, #0]
 800e906:	bd38      	pop	{r3, r4, r5, pc}
 800e908:	20001b58 	.word	0x20001b58

0800e90c <_lseek_r>:
 800e90c:	b538      	push	{r3, r4, r5, lr}
 800e90e:	4d07      	ldr	r5, [pc, #28]	; (800e92c <_lseek_r+0x20>)
 800e910:	4604      	mov	r4, r0
 800e912:	4608      	mov	r0, r1
 800e914:	4611      	mov	r1, r2
 800e916:	2200      	movs	r2, #0
 800e918:	602a      	str	r2, [r5, #0]
 800e91a:	461a      	mov	r2, r3
 800e91c:	f7f4 fde1 	bl	80034e2 <_lseek>
 800e920:	1c43      	adds	r3, r0, #1
 800e922:	d102      	bne.n	800e92a <_lseek_r+0x1e>
 800e924:	682b      	ldr	r3, [r5, #0]
 800e926:	b103      	cbz	r3, 800e92a <_lseek_r+0x1e>
 800e928:	6023      	str	r3, [r4, #0]
 800e92a:	bd38      	pop	{r3, r4, r5, pc}
 800e92c:	20001b58 	.word	0x20001b58

0800e930 <_read_r>:
 800e930:	b538      	push	{r3, r4, r5, lr}
 800e932:	4d07      	ldr	r5, [pc, #28]	; (800e950 <_read_r+0x20>)
 800e934:	4604      	mov	r4, r0
 800e936:	4608      	mov	r0, r1
 800e938:	4611      	mov	r1, r2
 800e93a:	2200      	movs	r2, #0
 800e93c:	602a      	str	r2, [r5, #0]
 800e93e:	461a      	mov	r2, r3
 800e940:	f7f4 fd8b 	bl	800345a <_read>
 800e944:	1c43      	adds	r3, r0, #1
 800e946:	d102      	bne.n	800e94e <_read_r+0x1e>
 800e948:	682b      	ldr	r3, [r5, #0]
 800e94a:	b103      	cbz	r3, 800e94e <_read_r+0x1e>
 800e94c:	6023      	str	r3, [r4, #0]
 800e94e:	bd38      	pop	{r3, r4, r5, pc}
 800e950:	20001b58 	.word	0x20001b58

0800e954 <_write_r>:
 800e954:	b538      	push	{r3, r4, r5, lr}
 800e956:	4d07      	ldr	r5, [pc, #28]	; (800e974 <_write_r+0x20>)
 800e958:	4604      	mov	r4, r0
 800e95a:	4608      	mov	r0, r1
 800e95c:	4611      	mov	r1, r2
 800e95e:	2200      	movs	r2, #0
 800e960:	602a      	str	r2, [r5, #0]
 800e962:	461a      	mov	r2, r3
 800e964:	f7fe f958 	bl	800cc18 <_write>
 800e968:	1c43      	adds	r3, r0, #1
 800e96a:	d102      	bne.n	800e972 <_write_r+0x1e>
 800e96c:	682b      	ldr	r3, [r5, #0]
 800e96e:	b103      	cbz	r3, 800e972 <_write_r+0x1e>
 800e970:	6023      	str	r3, [r4, #0]
 800e972:	bd38      	pop	{r3, r4, r5, pc}
 800e974:	20001b58 	.word	0x20001b58

0800e978 <__errno>:
 800e978:	4b01      	ldr	r3, [pc, #4]	; (800e980 <__errno+0x8>)
 800e97a:	6818      	ldr	r0, [r3, #0]
 800e97c:	4770      	bx	lr
 800e97e:	bf00      	nop
 800e980:	2000009c 	.word	0x2000009c

0800e984 <__libc_init_array>:
 800e984:	b570      	push	{r4, r5, r6, lr}
 800e986:	4d0d      	ldr	r5, [pc, #52]	; (800e9bc <__libc_init_array+0x38>)
 800e988:	4c0d      	ldr	r4, [pc, #52]	; (800e9c0 <__libc_init_array+0x3c>)
 800e98a:	1b64      	subs	r4, r4, r5
 800e98c:	10a4      	asrs	r4, r4, #2
 800e98e:	2600      	movs	r6, #0
 800e990:	42a6      	cmp	r6, r4
 800e992:	d109      	bne.n	800e9a8 <__libc_init_array+0x24>
 800e994:	4d0b      	ldr	r5, [pc, #44]	; (800e9c4 <__libc_init_array+0x40>)
 800e996:	4c0c      	ldr	r4, [pc, #48]	; (800e9c8 <__libc_init_array+0x44>)
 800e998:	f002 f800 	bl	801099c <_init>
 800e99c:	1b64      	subs	r4, r4, r5
 800e99e:	10a4      	asrs	r4, r4, #2
 800e9a0:	2600      	movs	r6, #0
 800e9a2:	42a6      	cmp	r6, r4
 800e9a4:	d105      	bne.n	800e9b2 <__libc_init_array+0x2e>
 800e9a6:	bd70      	pop	{r4, r5, r6, pc}
 800e9a8:	f855 3b04 	ldr.w	r3, [r5], #4
 800e9ac:	4798      	blx	r3
 800e9ae:	3601      	adds	r6, #1
 800e9b0:	e7ee      	b.n	800e990 <__libc_init_array+0xc>
 800e9b2:	f855 3b04 	ldr.w	r3, [r5], #4
 800e9b6:	4798      	blx	r3
 800e9b8:	3601      	adds	r6, #1
 800e9ba:	e7f2      	b.n	800e9a2 <__libc_init_array+0x1e>
 800e9bc:	08012494 	.word	0x08012494
 800e9c0:	08012494 	.word	0x08012494
 800e9c4:	08012494 	.word	0x08012494
 800e9c8:	08012498 	.word	0x08012498

0800e9cc <__retarget_lock_init_recursive>:
 800e9cc:	4770      	bx	lr

0800e9ce <__retarget_lock_acquire_recursive>:
 800e9ce:	4770      	bx	lr

0800e9d0 <__retarget_lock_release_recursive>:
 800e9d0:	4770      	bx	lr

0800e9d2 <memcpy>:
 800e9d2:	440a      	add	r2, r1
 800e9d4:	4291      	cmp	r1, r2
 800e9d6:	f100 33ff 	add.w	r3, r0, #4294967295
 800e9da:	d100      	bne.n	800e9de <memcpy+0xc>
 800e9dc:	4770      	bx	lr
 800e9de:	b510      	push	{r4, lr}
 800e9e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e9e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e9e8:	4291      	cmp	r1, r2
 800e9ea:	d1f9      	bne.n	800e9e0 <memcpy+0xe>
 800e9ec:	bd10      	pop	{r4, pc}

0800e9ee <quorem>:
 800e9ee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9f2:	6903      	ldr	r3, [r0, #16]
 800e9f4:	690c      	ldr	r4, [r1, #16]
 800e9f6:	42a3      	cmp	r3, r4
 800e9f8:	4607      	mov	r7, r0
 800e9fa:	db7e      	blt.n	800eafa <quorem+0x10c>
 800e9fc:	3c01      	subs	r4, #1
 800e9fe:	f101 0814 	add.w	r8, r1, #20
 800ea02:	f100 0514 	add.w	r5, r0, #20
 800ea06:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ea0a:	9301      	str	r3, [sp, #4]
 800ea0c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ea10:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ea14:	3301      	adds	r3, #1
 800ea16:	429a      	cmp	r2, r3
 800ea18:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ea1c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ea20:	fbb2 f6f3 	udiv	r6, r2, r3
 800ea24:	d331      	bcc.n	800ea8a <quorem+0x9c>
 800ea26:	f04f 0e00 	mov.w	lr, #0
 800ea2a:	4640      	mov	r0, r8
 800ea2c:	46ac      	mov	ip, r5
 800ea2e:	46f2      	mov	sl, lr
 800ea30:	f850 2b04 	ldr.w	r2, [r0], #4
 800ea34:	b293      	uxth	r3, r2
 800ea36:	fb06 e303 	mla	r3, r6, r3, lr
 800ea3a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ea3e:	0c1a      	lsrs	r2, r3, #16
 800ea40:	b29b      	uxth	r3, r3
 800ea42:	ebaa 0303 	sub.w	r3, sl, r3
 800ea46:	f8dc a000 	ldr.w	sl, [ip]
 800ea4a:	fa13 f38a 	uxtah	r3, r3, sl
 800ea4e:	fb06 220e 	mla	r2, r6, lr, r2
 800ea52:	9300      	str	r3, [sp, #0]
 800ea54:	9b00      	ldr	r3, [sp, #0]
 800ea56:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ea5a:	b292      	uxth	r2, r2
 800ea5c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ea60:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ea64:	f8bd 3000 	ldrh.w	r3, [sp]
 800ea68:	4581      	cmp	r9, r0
 800ea6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ea6e:	f84c 3b04 	str.w	r3, [ip], #4
 800ea72:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ea76:	d2db      	bcs.n	800ea30 <quorem+0x42>
 800ea78:	f855 300b 	ldr.w	r3, [r5, fp]
 800ea7c:	b92b      	cbnz	r3, 800ea8a <quorem+0x9c>
 800ea7e:	9b01      	ldr	r3, [sp, #4]
 800ea80:	3b04      	subs	r3, #4
 800ea82:	429d      	cmp	r5, r3
 800ea84:	461a      	mov	r2, r3
 800ea86:	d32c      	bcc.n	800eae2 <quorem+0xf4>
 800ea88:	613c      	str	r4, [r7, #16]
 800ea8a:	4638      	mov	r0, r7
 800ea8c:	f001 f9a6 	bl	800fddc <__mcmp>
 800ea90:	2800      	cmp	r0, #0
 800ea92:	db22      	blt.n	800eada <quorem+0xec>
 800ea94:	3601      	adds	r6, #1
 800ea96:	4629      	mov	r1, r5
 800ea98:	2000      	movs	r0, #0
 800ea9a:	f858 2b04 	ldr.w	r2, [r8], #4
 800ea9e:	f8d1 c000 	ldr.w	ip, [r1]
 800eaa2:	b293      	uxth	r3, r2
 800eaa4:	1ac3      	subs	r3, r0, r3
 800eaa6:	0c12      	lsrs	r2, r2, #16
 800eaa8:	fa13 f38c 	uxtah	r3, r3, ip
 800eaac:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800eab0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800eab4:	b29b      	uxth	r3, r3
 800eab6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800eaba:	45c1      	cmp	r9, r8
 800eabc:	f841 3b04 	str.w	r3, [r1], #4
 800eac0:	ea4f 4022 	mov.w	r0, r2, asr #16
 800eac4:	d2e9      	bcs.n	800ea9a <quorem+0xac>
 800eac6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800eaca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800eace:	b922      	cbnz	r2, 800eada <quorem+0xec>
 800ead0:	3b04      	subs	r3, #4
 800ead2:	429d      	cmp	r5, r3
 800ead4:	461a      	mov	r2, r3
 800ead6:	d30a      	bcc.n	800eaee <quorem+0x100>
 800ead8:	613c      	str	r4, [r7, #16]
 800eada:	4630      	mov	r0, r6
 800eadc:	b003      	add	sp, #12
 800eade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eae2:	6812      	ldr	r2, [r2, #0]
 800eae4:	3b04      	subs	r3, #4
 800eae6:	2a00      	cmp	r2, #0
 800eae8:	d1ce      	bne.n	800ea88 <quorem+0x9a>
 800eaea:	3c01      	subs	r4, #1
 800eaec:	e7c9      	b.n	800ea82 <quorem+0x94>
 800eaee:	6812      	ldr	r2, [r2, #0]
 800eaf0:	3b04      	subs	r3, #4
 800eaf2:	2a00      	cmp	r2, #0
 800eaf4:	d1f0      	bne.n	800ead8 <quorem+0xea>
 800eaf6:	3c01      	subs	r4, #1
 800eaf8:	e7eb      	b.n	800ead2 <quorem+0xe4>
 800eafa:	2000      	movs	r0, #0
 800eafc:	e7ee      	b.n	800eadc <quorem+0xee>
	...

0800eb00 <_dtoa_r>:
 800eb00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb04:	ed2d 8b04 	vpush	{d8-d9}
 800eb08:	69c5      	ldr	r5, [r0, #28]
 800eb0a:	b093      	sub	sp, #76	; 0x4c
 800eb0c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800eb10:	ec57 6b10 	vmov	r6, r7, d0
 800eb14:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800eb18:	9107      	str	r1, [sp, #28]
 800eb1a:	4604      	mov	r4, r0
 800eb1c:	920a      	str	r2, [sp, #40]	; 0x28
 800eb1e:	930d      	str	r3, [sp, #52]	; 0x34
 800eb20:	b975      	cbnz	r5, 800eb40 <_dtoa_r+0x40>
 800eb22:	2010      	movs	r0, #16
 800eb24:	f000 fe2a 	bl	800f77c <malloc>
 800eb28:	4602      	mov	r2, r0
 800eb2a:	61e0      	str	r0, [r4, #28]
 800eb2c:	b920      	cbnz	r0, 800eb38 <_dtoa_r+0x38>
 800eb2e:	4bae      	ldr	r3, [pc, #696]	; (800ede8 <_dtoa_r+0x2e8>)
 800eb30:	21ef      	movs	r1, #239	; 0xef
 800eb32:	48ae      	ldr	r0, [pc, #696]	; (800edec <_dtoa_r+0x2ec>)
 800eb34:	f001 fe4a 	bl	80107cc <__assert_func>
 800eb38:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800eb3c:	6005      	str	r5, [r0, #0]
 800eb3e:	60c5      	str	r5, [r0, #12]
 800eb40:	69e3      	ldr	r3, [r4, #28]
 800eb42:	6819      	ldr	r1, [r3, #0]
 800eb44:	b151      	cbz	r1, 800eb5c <_dtoa_r+0x5c>
 800eb46:	685a      	ldr	r2, [r3, #4]
 800eb48:	604a      	str	r2, [r1, #4]
 800eb4a:	2301      	movs	r3, #1
 800eb4c:	4093      	lsls	r3, r2
 800eb4e:	608b      	str	r3, [r1, #8]
 800eb50:	4620      	mov	r0, r4
 800eb52:	f000 ff07 	bl	800f964 <_Bfree>
 800eb56:	69e3      	ldr	r3, [r4, #28]
 800eb58:	2200      	movs	r2, #0
 800eb5a:	601a      	str	r2, [r3, #0]
 800eb5c:	1e3b      	subs	r3, r7, #0
 800eb5e:	bfbb      	ittet	lt
 800eb60:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800eb64:	9303      	strlt	r3, [sp, #12]
 800eb66:	2300      	movge	r3, #0
 800eb68:	2201      	movlt	r2, #1
 800eb6a:	bfac      	ite	ge
 800eb6c:	f8c8 3000 	strge.w	r3, [r8]
 800eb70:	f8c8 2000 	strlt.w	r2, [r8]
 800eb74:	4b9e      	ldr	r3, [pc, #632]	; (800edf0 <_dtoa_r+0x2f0>)
 800eb76:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800eb7a:	ea33 0308 	bics.w	r3, r3, r8
 800eb7e:	d11b      	bne.n	800ebb8 <_dtoa_r+0xb8>
 800eb80:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800eb82:	f242 730f 	movw	r3, #9999	; 0x270f
 800eb86:	6013      	str	r3, [r2, #0]
 800eb88:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800eb8c:	4333      	orrs	r3, r6
 800eb8e:	f000 8593 	beq.w	800f6b8 <_dtoa_r+0xbb8>
 800eb92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800eb94:	b963      	cbnz	r3, 800ebb0 <_dtoa_r+0xb0>
 800eb96:	4b97      	ldr	r3, [pc, #604]	; (800edf4 <_dtoa_r+0x2f4>)
 800eb98:	e027      	b.n	800ebea <_dtoa_r+0xea>
 800eb9a:	4b97      	ldr	r3, [pc, #604]	; (800edf8 <_dtoa_r+0x2f8>)
 800eb9c:	9300      	str	r3, [sp, #0]
 800eb9e:	3308      	adds	r3, #8
 800eba0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800eba2:	6013      	str	r3, [r2, #0]
 800eba4:	9800      	ldr	r0, [sp, #0]
 800eba6:	b013      	add	sp, #76	; 0x4c
 800eba8:	ecbd 8b04 	vpop	{d8-d9}
 800ebac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebb0:	4b90      	ldr	r3, [pc, #576]	; (800edf4 <_dtoa_r+0x2f4>)
 800ebb2:	9300      	str	r3, [sp, #0]
 800ebb4:	3303      	adds	r3, #3
 800ebb6:	e7f3      	b.n	800eba0 <_dtoa_r+0xa0>
 800ebb8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ebbc:	2200      	movs	r2, #0
 800ebbe:	ec51 0b17 	vmov	r0, r1, d7
 800ebc2:	eeb0 8a47 	vmov.f32	s16, s14
 800ebc6:	eef0 8a67 	vmov.f32	s17, s15
 800ebca:	2300      	movs	r3, #0
 800ebcc:	f7f1 ff64 	bl	8000a98 <__aeabi_dcmpeq>
 800ebd0:	4681      	mov	r9, r0
 800ebd2:	b160      	cbz	r0, 800ebee <_dtoa_r+0xee>
 800ebd4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ebd6:	2301      	movs	r3, #1
 800ebd8:	6013      	str	r3, [r2, #0]
 800ebda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	f000 8568 	beq.w	800f6b2 <_dtoa_r+0xbb2>
 800ebe2:	4b86      	ldr	r3, [pc, #536]	; (800edfc <_dtoa_r+0x2fc>)
 800ebe4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ebe6:	6013      	str	r3, [r2, #0]
 800ebe8:	3b01      	subs	r3, #1
 800ebea:	9300      	str	r3, [sp, #0]
 800ebec:	e7da      	b.n	800eba4 <_dtoa_r+0xa4>
 800ebee:	aa10      	add	r2, sp, #64	; 0x40
 800ebf0:	a911      	add	r1, sp, #68	; 0x44
 800ebf2:	4620      	mov	r0, r4
 800ebf4:	eeb0 0a48 	vmov.f32	s0, s16
 800ebf8:	eef0 0a68 	vmov.f32	s1, s17
 800ebfc:	f001 f994 	bl	800ff28 <__d2b>
 800ec00:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800ec04:	4682      	mov	sl, r0
 800ec06:	2d00      	cmp	r5, #0
 800ec08:	d07f      	beq.n	800ed0a <_dtoa_r+0x20a>
 800ec0a:	ee18 3a90 	vmov	r3, s17
 800ec0e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ec12:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800ec16:	ec51 0b18 	vmov	r0, r1, d8
 800ec1a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ec1e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ec22:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800ec26:	4619      	mov	r1, r3
 800ec28:	2200      	movs	r2, #0
 800ec2a:	4b75      	ldr	r3, [pc, #468]	; (800ee00 <_dtoa_r+0x300>)
 800ec2c:	f7f1 fb14 	bl	8000258 <__aeabi_dsub>
 800ec30:	a367      	add	r3, pc, #412	; (adr r3, 800edd0 <_dtoa_r+0x2d0>)
 800ec32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec36:	f7f1 fcc7 	bl	80005c8 <__aeabi_dmul>
 800ec3a:	a367      	add	r3, pc, #412	; (adr r3, 800edd8 <_dtoa_r+0x2d8>)
 800ec3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec40:	f7f1 fb0c 	bl	800025c <__adddf3>
 800ec44:	4606      	mov	r6, r0
 800ec46:	4628      	mov	r0, r5
 800ec48:	460f      	mov	r7, r1
 800ec4a:	f7f1 fc53 	bl	80004f4 <__aeabi_i2d>
 800ec4e:	a364      	add	r3, pc, #400	; (adr r3, 800ede0 <_dtoa_r+0x2e0>)
 800ec50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec54:	f7f1 fcb8 	bl	80005c8 <__aeabi_dmul>
 800ec58:	4602      	mov	r2, r0
 800ec5a:	460b      	mov	r3, r1
 800ec5c:	4630      	mov	r0, r6
 800ec5e:	4639      	mov	r1, r7
 800ec60:	f7f1 fafc 	bl	800025c <__adddf3>
 800ec64:	4606      	mov	r6, r0
 800ec66:	460f      	mov	r7, r1
 800ec68:	f7f1 ff5e 	bl	8000b28 <__aeabi_d2iz>
 800ec6c:	2200      	movs	r2, #0
 800ec6e:	4683      	mov	fp, r0
 800ec70:	2300      	movs	r3, #0
 800ec72:	4630      	mov	r0, r6
 800ec74:	4639      	mov	r1, r7
 800ec76:	f7f1 ff19 	bl	8000aac <__aeabi_dcmplt>
 800ec7a:	b148      	cbz	r0, 800ec90 <_dtoa_r+0x190>
 800ec7c:	4658      	mov	r0, fp
 800ec7e:	f7f1 fc39 	bl	80004f4 <__aeabi_i2d>
 800ec82:	4632      	mov	r2, r6
 800ec84:	463b      	mov	r3, r7
 800ec86:	f7f1 ff07 	bl	8000a98 <__aeabi_dcmpeq>
 800ec8a:	b908      	cbnz	r0, 800ec90 <_dtoa_r+0x190>
 800ec8c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ec90:	f1bb 0f16 	cmp.w	fp, #22
 800ec94:	d857      	bhi.n	800ed46 <_dtoa_r+0x246>
 800ec96:	4b5b      	ldr	r3, [pc, #364]	; (800ee04 <_dtoa_r+0x304>)
 800ec98:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ec9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eca0:	ec51 0b18 	vmov	r0, r1, d8
 800eca4:	f7f1 ff02 	bl	8000aac <__aeabi_dcmplt>
 800eca8:	2800      	cmp	r0, #0
 800ecaa:	d04e      	beq.n	800ed4a <_dtoa_r+0x24a>
 800ecac:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ecb0:	2300      	movs	r3, #0
 800ecb2:	930c      	str	r3, [sp, #48]	; 0x30
 800ecb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ecb6:	1b5b      	subs	r3, r3, r5
 800ecb8:	1e5a      	subs	r2, r3, #1
 800ecba:	bf45      	ittet	mi
 800ecbc:	f1c3 0301 	rsbmi	r3, r3, #1
 800ecc0:	9305      	strmi	r3, [sp, #20]
 800ecc2:	2300      	movpl	r3, #0
 800ecc4:	2300      	movmi	r3, #0
 800ecc6:	9206      	str	r2, [sp, #24]
 800ecc8:	bf54      	ite	pl
 800ecca:	9305      	strpl	r3, [sp, #20]
 800eccc:	9306      	strmi	r3, [sp, #24]
 800ecce:	f1bb 0f00 	cmp.w	fp, #0
 800ecd2:	db3c      	blt.n	800ed4e <_dtoa_r+0x24e>
 800ecd4:	9b06      	ldr	r3, [sp, #24]
 800ecd6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800ecda:	445b      	add	r3, fp
 800ecdc:	9306      	str	r3, [sp, #24]
 800ecde:	2300      	movs	r3, #0
 800ece0:	9308      	str	r3, [sp, #32]
 800ece2:	9b07      	ldr	r3, [sp, #28]
 800ece4:	2b09      	cmp	r3, #9
 800ece6:	d868      	bhi.n	800edba <_dtoa_r+0x2ba>
 800ece8:	2b05      	cmp	r3, #5
 800ecea:	bfc4      	itt	gt
 800ecec:	3b04      	subgt	r3, #4
 800ecee:	9307      	strgt	r3, [sp, #28]
 800ecf0:	9b07      	ldr	r3, [sp, #28]
 800ecf2:	f1a3 0302 	sub.w	r3, r3, #2
 800ecf6:	bfcc      	ite	gt
 800ecf8:	2500      	movgt	r5, #0
 800ecfa:	2501      	movle	r5, #1
 800ecfc:	2b03      	cmp	r3, #3
 800ecfe:	f200 8085 	bhi.w	800ee0c <_dtoa_r+0x30c>
 800ed02:	e8df f003 	tbb	[pc, r3]
 800ed06:	3b2e      	.short	0x3b2e
 800ed08:	5839      	.short	0x5839
 800ed0a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ed0e:	441d      	add	r5, r3
 800ed10:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ed14:	2b20      	cmp	r3, #32
 800ed16:	bfc1      	itttt	gt
 800ed18:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ed1c:	fa08 f803 	lslgt.w	r8, r8, r3
 800ed20:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800ed24:	fa26 f303 	lsrgt.w	r3, r6, r3
 800ed28:	bfd6      	itet	le
 800ed2a:	f1c3 0320 	rsble	r3, r3, #32
 800ed2e:	ea48 0003 	orrgt.w	r0, r8, r3
 800ed32:	fa06 f003 	lslle.w	r0, r6, r3
 800ed36:	f7f1 fbcd 	bl	80004d4 <__aeabi_ui2d>
 800ed3a:	2201      	movs	r2, #1
 800ed3c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800ed40:	3d01      	subs	r5, #1
 800ed42:	920e      	str	r2, [sp, #56]	; 0x38
 800ed44:	e76f      	b.n	800ec26 <_dtoa_r+0x126>
 800ed46:	2301      	movs	r3, #1
 800ed48:	e7b3      	b.n	800ecb2 <_dtoa_r+0x1b2>
 800ed4a:	900c      	str	r0, [sp, #48]	; 0x30
 800ed4c:	e7b2      	b.n	800ecb4 <_dtoa_r+0x1b4>
 800ed4e:	9b05      	ldr	r3, [sp, #20]
 800ed50:	eba3 030b 	sub.w	r3, r3, fp
 800ed54:	9305      	str	r3, [sp, #20]
 800ed56:	f1cb 0300 	rsb	r3, fp, #0
 800ed5a:	9308      	str	r3, [sp, #32]
 800ed5c:	2300      	movs	r3, #0
 800ed5e:	930b      	str	r3, [sp, #44]	; 0x2c
 800ed60:	e7bf      	b.n	800ece2 <_dtoa_r+0x1e2>
 800ed62:	2300      	movs	r3, #0
 800ed64:	9309      	str	r3, [sp, #36]	; 0x24
 800ed66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	dc52      	bgt.n	800ee12 <_dtoa_r+0x312>
 800ed6c:	2301      	movs	r3, #1
 800ed6e:	9301      	str	r3, [sp, #4]
 800ed70:	9304      	str	r3, [sp, #16]
 800ed72:	461a      	mov	r2, r3
 800ed74:	920a      	str	r2, [sp, #40]	; 0x28
 800ed76:	e00b      	b.n	800ed90 <_dtoa_r+0x290>
 800ed78:	2301      	movs	r3, #1
 800ed7a:	e7f3      	b.n	800ed64 <_dtoa_r+0x264>
 800ed7c:	2300      	movs	r3, #0
 800ed7e:	9309      	str	r3, [sp, #36]	; 0x24
 800ed80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed82:	445b      	add	r3, fp
 800ed84:	9301      	str	r3, [sp, #4]
 800ed86:	3301      	adds	r3, #1
 800ed88:	2b01      	cmp	r3, #1
 800ed8a:	9304      	str	r3, [sp, #16]
 800ed8c:	bfb8      	it	lt
 800ed8e:	2301      	movlt	r3, #1
 800ed90:	69e0      	ldr	r0, [r4, #28]
 800ed92:	2100      	movs	r1, #0
 800ed94:	2204      	movs	r2, #4
 800ed96:	f102 0614 	add.w	r6, r2, #20
 800ed9a:	429e      	cmp	r6, r3
 800ed9c:	d93d      	bls.n	800ee1a <_dtoa_r+0x31a>
 800ed9e:	6041      	str	r1, [r0, #4]
 800eda0:	4620      	mov	r0, r4
 800eda2:	f000 fd9f 	bl	800f8e4 <_Balloc>
 800eda6:	9000      	str	r0, [sp, #0]
 800eda8:	2800      	cmp	r0, #0
 800edaa:	d139      	bne.n	800ee20 <_dtoa_r+0x320>
 800edac:	4b16      	ldr	r3, [pc, #88]	; (800ee08 <_dtoa_r+0x308>)
 800edae:	4602      	mov	r2, r0
 800edb0:	f240 11af 	movw	r1, #431	; 0x1af
 800edb4:	e6bd      	b.n	800eb32 <_dtoa_r+0x32>
 800edb6:	2301      	movs	r3, #1
 800edb8:	e7e1      	b.n	800ed7e <_dtoa_r+0x27e>
 800edba:	2501      	movs	r5, #1
 800edbc:	2300      	movs	r3, #0
 800edbe:	9307      	str	r3, [sp, #28]
 800edc0:	9509      	str	r5, [sp, #36]	; 0x24
 800edc2:	f04f 33ff 	mov.w	r3, #4294967295
 800edc6:	9301      	str	r3, [sp, #4]
 800edc8:	9304      	str	r3, [sp, #16]
 800edca:	2200      	movs	r2, #0
 800edcc:	2312      	movs	r3, #18
 800edce:	e7d1      	b.n	800ed74 <_dtoa_r+0x274>
 800edd0:	636f4361 	.word	0x636f4361
 800edd4:	3fd287a7 	.word	0x3fd287a7
 800edd8:	8b60c8b3 	.word	0x8b60c8b3
 800eddc:	3fc68a28 	.word	0x3fc68a28
 800ede0:	509f79fb 	.word	0x509f79fb
 800ede4:	3fd34413 	.word	0x3fd34413
 800ede8:	0801215d 	.word	0x0801215d
 800edec:	08012174 	.word	0x08012174
 800edf0:	7ff00000 	.word	0x7ff00000
 800edf4:	08012159 	.word	0x08012159
 800edf8:	08012150 	.word	0x08012150
 800edfc:	0801212d 	.word	0x0801212d
 800ee00:	3ff80000 	.word	0x3ff80000
 800ee04:	08012260 	.word	0x08012260
 800ee08:	080121cc 	.word	0x080121cc
 800ee0c:	2301      	movs	r3, #1
 800ee0e:	9309      	str	r3, [sp, #36]	; 0x24
 800ee10:	e7d7      	b.n	800edc2 <_dtoa_r+0x2c2>
 800ee12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ee14:	9301      	str	r3, [sp, #4]
 800ee16:	9304      	str	r3, [sp, #16]
 800ee18:	e7ba      	b.n	800ed90 <_dtoa_r+0x290>
 800ee1a:	3101      	adds	r1, #1
 800ee1c:	0052      	lsls	r2, r2, #1
 800ee1e:	e7ba      	b.n	800ed96 <_dtoa_r+0x296>
 800ee20:	69e3      	ldr	r3, [r4, #28]
 800ee22:	9a00      	ldr	r2, [sp, #0]
 800ee24:	601a      	str	r2, [r3, #0]
 800ee26:	9b04      	ldr	r3, [sp, #16]
 800ee28:	2b0e      	cmp	r3, #14
 800ee2a:	f200 80a8 	bhi.w	800ef7e <_dtoa_r+0x47e>
 800ee2e:	2d00      	cmp	r5, #0
 800ee30:	f000 80a5 	beq.w	800ef7e <_dtoa_r+0x47e>
 800ee34:	f1bb 0f00 	cmp.w	fp, #0
 800ee38:	dd38      	ble.n	800eeac <_dtoa_r+0x3ac>
 800ee3a:	4bc0      	ldr	r3, [pc, #768]	; (800f13c <_dtoa_r+0x63c>)
 800ee3c:	f00b 020f 	and.w	r2, fp, #15
 800ee40:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ee44:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800ee48:	e9d3 6700 	ldrd	r6, r7, [r3]
 800ee4c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800ee50:	d019      	beq.n	800ee86 <_dtoa_r+0x386>
 800ee52:	4bbb      	ldr	r3, [pc, #748]	; (800f140 <_dtoa_r+0x640>)
 800ee54:	ec51 0b18 	vmov	r0, r1, d8
 800ee58:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ee5c:	f7f1 fcde 	bl	800081c <__aeabi_ddiv>
 800ee60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ee64:	f008 080f 	and.w	r8, r8, #15
 800ee68:	2503      	movs	r5, #3
 800ee6a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800f140 <_dtoa_r+0x640>
 800ee6e:	f1b8 0f00 	cmp.w	r8, #0
 800ee72:	d10a      	bne.n	800ee8a <_dtoa_r+0x38a>
 800ee74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ee78:	4632      	mov	r2, r6
 800ee7a:	463b      	mov	r3, r7
 800ee7c:	f7f1 fcce 	bl	800081c <__aeabi_ddiv>
 800ee80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ee84:	e02b      	b.n	800eede <_dtoa_r+0x3de>
 800ee86:	2502      	movs	r5, #2
 800ee88:	e7ef      	b.n	800ee6a <_dtoa_r+0x36a>
 800ee8a:	f018 0f01 	tst.w	r8, #1
 800ee8e:	d008      	beq.n	800eea2 <_dtoa_r+0x3a2>
 800ee90:	4630      	mov	r0, r6
 800ee92:	4639      	mov	r1, r7
 800ee94:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ee98:	f7f1 fb96 	bl	80005c8 <__aeabi_dmul>
 800ee9c:	3501      	adds	r5, #1
 800ee9e:	4606      	mov	r6, r0
 800eea0:	460f      	mov	r7, r1
 800eea2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800eea6:	f109 0908 	add.w	r9, r9, #8
 800eeaa:	e7e0      	b.n	800ee6e <_dtoa_r+0x36e>
 800eeac:	f000 809f 	beq.w	800efee <_dtoa_r+0x4ee>
 800eeb0:	f1cb 0600 	rsb	r6, fp, #0
 800eeb4:	4ba1      	ldr	r3, [pc, #644]	; (800f13c <_dtoa_r+0x63c>)
 800eeb6:	4fa2      	ldr	r7, [pc, #648]	; (800f140 <_dtoa_r+0x640>)
 800eeb8:	f006 020f 	and.w	r2, r6, #15
 800eebc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800eec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eec4:	ec51 0b18 	vmov	r0, r1, d8
 800eec8:	f7f1 fb7e 	bl	80005c8 <__aeabi_dmul>
 800eecc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eed0:	1136      	asrs	r6, r6, #4
 800eed2:	2300      	movs	r3, #0
 800eed4:	2502      	movs	r5, #2
 800eed6:	2e00      	cmp	r6, #0
 800eed8:	d17e      	bne.n	800efd8 <_dtoa_r+0x4d8>
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d1d0      	bne.n	800ee80 <_dtoa_r+0x380>
 800eede:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800eee0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	f000 8084 	beq.w	800eff2 <_dtoa_r+0x4f2>
 800eeea:	4b96      	ldr	r3, [pc, #600]	; (800f144 <_dtoa_r+0x644>)
 800eeec:	2200      	movs	r2, #0
 800eeee:	4640      	mov	r0, r8
 800eef0:	4649      	mov	r1, r9
 800eef2:	f7f1 fddb 	bl	8000aac <__aeabi_dcmplt>
 800eef6:	2800      	cmp	r0, #0
 800eef8:	d07b      	beq.n	800eff2 <_dtoa_r+0x4f2>
 800eefa:	9b04      	ldr	r3, [sp, #16]
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d078      	beq.n	800eff2 <_dtoa_r+0x4f2>
 800ef00:	9b01      	ldr	r3, [sp, #4]
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	dd39      	ble.n	800ef7a <_dtoa_r+0x47a>
 800ef06:	4b90      	ldr	r3, [pc, #576]	; (800f148 <_dtoa_r+0x648>)
 800ef08:	2200      	movs	r2, #0
 800ef0a:	4640      	mov	r0, r8
 800ef0c:	4649      	mov	r1, r9
 800ef0e:	f7f1 fb5b 	bl	80005c8 <__aeabi_dmul>
 800ef12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ef16:	9e01      	ldr	r6, [sp, #4]
 800ef18:	f10b 37ff 	add.w	r7, fp, #4294967295
 800ef1c:	3501      	adds	r5, #1
 800ef1e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ef22:	4628      	mov	r0, r5
 800ef24:	f7f1 fae6 	bl	80004f4 <__aeabi_i2d>
 800ef28:	4642      	mov	r2, r8
 800ef2a:	464b      	mov	r3, r9
 800ef2c:	f7f1 fb4c 	bl	80005c8 <__aeabi_dmul>
 800ef30:	4b86      	ldr	r3, [pc, #536]	; (800f14c <_dtoa_r+0x64c>)
 800ef32:	2200      	movs	r2, #0
 800ef34:	f7f1 f992 	bl	800025c <__adddf3>
 800ef38:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800ef3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ef40:	9303      	str	r3, [sp, #12]
 800ef42:	2e00      	cmp	r6, #0
 800ef44:	d158      	bne.n	800eff8 <_dtoa_r+0x4f8>
 800ef46:	4b82      	ldr	r3, [pc, #520]	; (800f150 <_dtoa_r+0x650>)
 800ef48:	2200      	movs	r2, #0
 800ef4a:	4640      	mov	r0, r8
 800ef4c:	4649      	mov	r1, r9
 800ef4e:	f7f1 f983 	bl	8000258 <__aeabi_dsub>
 800ef52:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ef56:	4680      	mov	r8, r0
 800ef58:	4689      	mov	r9, r1
 800ef5a:	f7f1 fdc5 	bl	8000ae8 <__aeabi_dcmpgt>
 800ef5e:	2800      	cmp	r0, #0
 800ef60:	f040 8296 	bne.w	800f490 <_dtoa_r+0x990>
 800ef64:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800ef68:	4640      	mov	r0, r8
 800ef6a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ef6e:	4649      	mov	r1, r9
 800ef70:	f7f1 fd9c 	bl	8000aac <__aeabi_dcmplt>
 800ef74:	2800      	cmp	r0, #0
 800ef76:	f040 8289 	bne.w	800f48c <_dtoa_r+0x98c>
 800ef7a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ef7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	f2c0 814e 	blt.w	800f222 <_dtoa_r+0x722>
 800ef86:	f1bb 0f0e 	cmp.w	fp, #14
 800ef8a:	f300 814a 	bgt.w	800f222 <_dtoa_r+0x722>
 800ef8e:	4b6b      	ldr	r3, [pc, #428]	; (800f13c <_dtoa_r+0x63c>)
 800ef90:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ef94:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ef98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	f280 80dc 	bge.w	800f158 <_dtoa_r+0x658>
 800efa0:	9b04      	ldr	r3, [sp, #16]
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	f300 80d8 	bgt.w	800f158 <_dtoa_r+0x658>
 800efa8:	f040 826f 	bne.w	800f48a <_dtoa_r+0x98a>
 800efac:	4b68      	ldr	r3, [pc, #416]	; (800f150 <_dtoa_r+0x650>)
 800efae:	2200      	movs	r2, #0
 800efb0:	4640      	mov	r0, r8
 800efb2:	4649      	mov	r1, r9
 800efb4:	f7f1 fb08 	bl	80005c8 <__aeabi_dmul>
 800efb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800efbc:	f7f1 fd8a 	bl	8000ad4 <__aeabi_dcmpge>
 800efc0:	9e04      	ldr	r6, [sp, #16]
 800efc2:	4637      	mov	r7, r6
 800efc4:	2800      	cmp	r0, #0
 800efc6:	f040 8245 	bne.w	800f454 <_dtoa_r+0x954>
 800efca:	9d00      	ldr	r5, [sp, #0]
 800efcc:	2331      	movs	r3, #49	; 0x31
 800efce:	f805 3b01 	strb.w	r3, [r5], #1
 800efd2:	f10b 0b01 	add.w	fp, fp, #1
 800efd6:	e241      	b.n	800f45c <_dtoa_r+0x95c>
 800efd8:	07f2      	lsls	r2, r6, #31
 800efda:	d505      	bpl.n	800efe8 <_dtoa_r+0x4e8>
 800efdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800efe0:	f7f1 faf2 	bl	80005c8 <__aeabi_dmul>
 800efe4:	3501      	adds	r5, #1
 800efe6:	2301      	movs	r3, #1
 800efe8:	1076      	asrs	r6, r6, #1
 800efea:	3708      	adds	r7, #8
 800efec:	e773      	b.n	800eed6 <_dtoa_r+0x3d6>
 800efee:	2502      	movs	r5, #2
 800eff0:	e775      	b.n	800eede <_dtoa_r+0x3de>
 800eff2:	9e04      	ldr	r6, [sp, #16]
 800eff4:	465f      	mov	r7, fp
 800eff6:	e792      	b.n	800ef1e <_dtoa_r+0x41e>
 800eff8:	9900      	ldr	r1, [sp, #0]
 800effa:	4b50      	ldr	r3, [pc, #320]	; (800f13c <_dtoa_r+0x63c>)
 800effc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f000:	4431      	add	r1, r6
 800f002:	9102      	str	r1, [sp, #8]
 800f004:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f006:	eeb0 9a47 	vmov.f32	s18, s14
 800f00a:	eef0 9a67 	vmov.f32	s19, s15
 800f00e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800f012:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f016:	2900      	cmp	r1, #0
 800f018:	d044      	beq.n	800f0a4 <_dtoa_r+0x5a4>
 800f01a:	494e      	ldr	r1, [pc, #312]	; (800f154 <_dtoa_r+0x654>)
 800f01c:	2000      	movs	r0, #0
 800f01e:	f7f1 fbfd 	bl	800081c <__aeabi_ddiv>
 800f022:	ec53 2b19 	vmov	r2, r3, d9
 800f026:	f7f1 f917 	bl	8000258 <__aeabi_dsub>
 800f02a:	9d00      	ldr	r5, [sp, #0]
 800f02c:	ec41 0b19 	vmov	d9, r0, r1
 800f030:	4649      	mov	r1, r9
 800f032:	4640      	mov	r0, r8
 800f034:	f7f1 fd78 	bl	8000b28 <__aeabi_d2iz>
 800f038:	4606      	mov	r6, r0
 800f03a:	f7f1 fa5b 	bl	80004f4 <__aeabi_i2d>
 800f03e:	4602      	mov	r2, r0
 800f040:	460b      	mov	r3, r1
 800f042:	4640      	mov	r0, r8
 800f044:	4649      	mov	r1, r9
 800f046:	f7f1 f907 	bl	8000258 <__aeabi_dsub>
 800f04a:	3630      	adds	r6, #48	; 0x30
 800f04c:	f805 6b01 	strb.w	r6, [r5], #1
 800f050:	ec53 2b19 	vmov	r2, r3, d9
 800f054:	4680      	mov	r8, r0
 800f056:	4689      	mov	r9, r1
 800f058:	f7f1 fd28 	bl	8000aac <__aeabi_dcmplt>
 800f05c:	2800      	cmp	r0, #0
 800f05e:	d164      	bne.n	800f12a <_dtoa_r+0x62a>
 800f060:	4642      	mov	r2, r8
 800f062:	464b      	mov	r3, r9
 800f064:	4937      	ldr	r1, [pc, #220]	; (800f144 <_dtoa_r+0x644>)
 800f066:	2000      	movs	r0, #0
 800f068:	f7f1 f8f6 	bl	8000258 <__aeabi_dsub>
 800f06c:	ec53 2b19 	vmov	r2, r3, d9
 800f070:	f7f1 fd1c 	bl	8000aac <__aeabi_dcmplt>
 800f074:	2800      	cmp	r0, #0
 800f076:	f040 80b6 	bne.w	800f1e6 <_dtoa_r+0x6e6>
 800f07a:	9b02      	ldr	r3, [sp, #8]
 800f07c:	429d      	cmp	r5, r3
 800f07e:	f43f af7c 	beq.w	800ef7a <_dtoa_r+0x47a>
 800f082:	4b31      	ldr	r3, [pc, #196]	; (800f148 <_dtoa_r+0x648>)
 800f084:	ec51 0b19 	vmov	r0, r1, d9
 800f088:	2200      	movs	r2, #0
 800f08a:	f7f1 fa9d 	bl	80005c8 <__aeabi_dmul>
 800f08e:	4b2e      	ldr	r3, [pc, #184]	; (800f148 <_dtoa_r+0x648>)
 800f090:	ec41 0b19 	vmov	d9, r0, r1
 800f094:	2200      	movs	r2, #0
 800f096:	4640      	mov	r0, r8
 800f098:	4649      	mov	r1, r9
 800f09a:	f7f1 fa95 	bl	80005c8 <__aeabi_dmul>
 800f09e:	4680      	mov	r8, r0
 800f0a0:	4689      	mov	r9, r1
 800f0a2:	e7c5      	b.n	800f030 <_dtoa_r+0x530>
 800f0a4:	ec51 0b17 	vmov	r0, r1, d7
 800f0a8:	f7f1 fa8e 	bl	80005c8 <__aeabi_dmul>
 800f0ac:	9b02      	ldr	r3, [sp, #8]
 800f0ae:	9d00      	ldr	r5, [sp, #0]
 800f0b0:	930f      	str	r3, [sp, #60]	; 0x3c
 800f0b2:	ec41 0b19 	vmov	d9, r0, r1
 800f0b6:	4649      	mov	r1, r9
 800f0b8:	4640      	mov	r0, r8
 800f0ba:	f7f1 fd35 	bl	8000b28 <__aeabi_d2iz>
 800f0be:	4606      	mov	r6, r0
 800f0c0:	f7f1 fa18 	bl	80004f4 <__aeabi_i2d>
 800f0c4:	3630      	adds	r6, #48	; 0x30
 800f0c6:	4602      	mov	r2, r0
 800f0c8:	460b      	mov	r3, r1
 800f0ca:	4640      	mov	r0, r8
 800f0cc:	4649      	mov	r1, r9
 800f0ce:	f7f1 f8c3 	bl	8000258 <__aeabi_dsub>
 800f0d2:	f805 6b01 	strb.w	r6, [r5], #1
 800f0d6:	9b02      	ldr	r3, [sp, #8]
 800f0d8:	429d      	cmp	r5, r3
 800f0da:	4680      	mov	r8, r0
 800f0dc:	4689      	mov	r9, r1
 800f0de:	f04f 0200 	mov.w	r2, #0
 800f0e2:	d124      	bne.n	800f12e <_dtoa_r+0x62e>
 800f0e4:	4b1b      	ldr	r3, [pc, #108]	; (800f154 <_dtoa_r+0x654>)
 800f0e6:	ec51 0b19 	vmov	r0, r1, d9
 800f0ea:	f7f1 f8b7 	bl	800025c <__adddf3>
 800f0ee:	4602      	mov	r2, r0
 800f0f0:	460b      	mov	r3, r1
 800f0f2:	4640      	mov	r0, r8
 800f0f4:	4649      	mov	r1, r9
 800f0f6:	f7f1 fcf7 	bl	8000ae8 <__aeabi_dcmpgt>
 800f0fa:	2800      	cmp	r0, #0
 800f0fc:	d173      	bne.n	800f1e6 <_dtoa_r+0x6e6>
 800f0fe:	ec53 2b19 	vmov	r2, r3, d9
 800f102:	4914      	ldr	r1, [pc, #80]	; (800f154 <_dtoa_r+0x654>)
 800f104:	2000      	movs	r0, #0
 800f106:	f7f1 f8a7 	bl	8000258 <__aeabi_dsub>
 800f10a:	4602      	mov	r2, r0
 800f10c:	460b      	mov	r3, r1
 800f10e:	4640      	mov	r0, r8
 800f110:	4649      	mov	r1, r9
 800f112:	f7f1 fccb 	bl	8000aac <__aeabi_dcmplt>
 800f116:	2800      	cmp	r0, #0
 800f118:	f43f af2f 	beq.w	800ef7a <_dtoa_r+0x47a>
 800f11c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800f11e:	1e6b      	subs	r3, r5, #1
 800f120:	930f      	str	r3, [sp, #60]	; 0x3c
 800f122:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f126:	2b30      	cmp	r3, #48	; 0x30
 800f128:	d0f8      	beq.n	800f11c <_dtoa_r+0x61c>
 800f12a:	46bb      	mov	fp, r7
 800f12c:	e04a      	b.n	800f1c4 <_dtoa_r+0x6c4>
 800f12e:	4b06      	ldr	r3, [pc, #24]	; (800f148 <_dtoa_r+0x648>)
 800f130:	f7f1 fa4a 	bl	80005c8 <__aeabi_dmul>
 800f134:	4680      	mov	r8, r0
 800f136:	4689      	mov	r9, r1
 800f138:	e7bd      	b.n	800f0b6 <_dtoa_r+0x5b6>
 800f13a:	bf00      	nop
 800f13c:	08012260 	.word	0x08012260
 800f140:	08012238 	.word	0x08012238
 800f144:	3ff00000 	.word	0x3ff00000
 800f148:	40240000 	.word	0x40240000
 800f14c:	401c0000 	.word	0x401c0000
 800f150:	40140000 	.word	0x40140000
 800f154:	3fe00000 	.word	0x3fe00000
 800f158:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f15c:	9d00      	ldr	r5, [sp, #0]
 800f15e:	4642      	mov	r2, r8
 800f160:	464b      	mov	r3, r9
 800f162:	4630      	mov	r0, r6
 800f164:	4639      	mov	r1, r7
 800f166:	f7f1 fb59 	bl	800081c <__aeabi_ddiv>
 800f16a:	f7f1 fcdd 	bl	8000b28 <__aeabi_d2iz>
 800f16e:	9001      	str	r0, [sp, #4]
 800f170:	f7f1 f9c0 	bl	80004f4 <__aeabi_i2d>
 800f174:	4642      	mov	r2, r8
 800f176:	464b      	mov	r3, r9
 800f178:	f7f1 fa26 	bl	80005c8 <__aeabi_dmul>
 800f17c:	4602      	mov	r2, r0
 800f17e:	460b      	mov	r3, r1
 800f180:	4630      	mov	r0, r6
 800f182:	4639      	mov	r1, r7
 800f184:	f7f1 f868 	bl	8000258 <__aeabi_dsub>
 800f188:	9e01      	ldr	r6, [sp, #4]
 800f18a:	9f04      	ldr	r7, [sp, #16]
 800f18c:	3630      	adds	r6, #48	; 0x30
 800f18e:	f805 6b01 	strb.w	r6, [r5], #1
 800f192:	9e00      	ldr	r6, [sp, #0]
 800f194:	1bae      	subs	r6, r5, r6
 800f196:	42b7      	cmp	r7, r6
 800f198:	4602      	mov	r2, r0
 800f19a:	460b      	mov	r3, r1
 800f19c:	d134      	bne.n	800f208 <_dtoa_r+0x708>
 800f19e:	f7f1 f85d 	bl	800025c <__adddf3>
 800f1a2:	4642      	mov	r2, r8
 800f1a4:	464b      	mov	r3, r9
 800f1a6:	4606      	mov	r6, r0
 800f1a8:	460f      	mov	r7, r1
 800f1aa:	f7f1 fc9d 	bl	8000ae8 <__aeabi_dcmpgt>
 800f1ae:	b9c8      	cbnz	r0, 800f1e4 <_dtoa_r+0x6e4>
 800f1b0:	4642      	mov	r2, r8
 800f1b2:	464b      	mov	r3, r9
 800f1b4:	4630      	mov	r0, r6
 800f1b6:	4639      	mov	r1, r7
 800f1b8:	f7f1 fc6e 	bl	8000a98 <__aeabi_dcmpeq>
 800f1bc:	b110      	cbz	r0, 800f1c4 <_dtoa_r+0x6c4>
 800f1be:	9b01      	ldr	r3, [sp, #4]
 800f1c0:	07db      	lsls	r3, r3, #31
 800f1c2:	d40f      	bmi.n	800f1e4 <_dtoa_r+0x6e4>
 800f1c4:	4651      	mov	r1, sl
 800f1c6:	4620      	mov	r0, r4
 800f1c8:	f000 fbcc 	bl	800f964 <_Bfree>
 800f1cc:	2300      	movs	r3, #0
 800f1ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f1d0:	702b      	strb	r3, [r5, #0]
 800f1d2:	f10b 0301 	add.w	r3, fp, #1
 800f1d6:	6013      	str	r3, [r2, #0]
 800f1d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	f43f ace2 	beq.w	800eba4 <_dtoa_r+0xa4>
 800f1e0:	601d      	str	r5, [r3, #0]
 800f1e2:	e4df      	b.n	800eba4 <_dtoa_r+0xa4>
 800f1e4:	465f      	mov	r7, fp
 800f1e6:	462b      	mov	r3, r5
 800f1e8:	461d      	mov	r5, r3
 800f1ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f1ee:	2a39      	cmp	r2, #57	; 0x39
 800f1f0:	d106      	bne.n	800f200 <_dtoa_r+0x700>
 800f1f2:	9a00      	ldr	r2, [sp, #0]
 800f1f4:	429a      	cmp	r2, r3
 800f1f6:	d1f7      	bne.n	800f1e8 <_dtoa_r+0x6e8>
 800f1f8:	9900      	ldr	r1, [sp, #0]
 800f1fa:	2230      	movs	r2, #48	; 0x30
 800f1fc:	3701      	adds	r7, #1
 800f1fe:	700a      	strb	r2, [r1, #0]
 800f200:	781a      	ldrb	r2, [r3, #0]
 800f202:	3201      	adds	r2, #1
 800f204:	701a      	strb	r2, [r3, #0]
 800f206:	e790      	b.n	800f12a <_dtoa_r+0x62a>
 800f208:	4ba3      	ldr	r3, [pc, #652]	; (800f498 <_dtoa_r+0x998>)
 800f20a:	2200      	movs	r2, #0
 800f20c:	f7f1 f9dc 	bl	80005c8 <__aeabi_dmul>
 800f210:	2200      	movs	r2, #0
 800f212:	2300      	movs	r3, #0
 800f214:	4606      	mov	r6, r0
 800f216:	460f      	mov	r7, r1
 800f218:	f7f1 fc3e 	bl	8000a98 <__aeabi_dcmpeq>
 800f21c:	2800      	cmp	r0, #0
 800f21e:	d09e      	beq.n	800f15e <_dtoa_r+0x65e>
 800f220:	e7d0      	b.n	800f1c4 <_dtoa_r+0x6c4>
 800f222:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f224:	2a00      	cmp	r2, #0
 800f226:	f000 80ca 	beq.w	800f3be <_dtoa_r+0x8be>
 800f22a:	9a07      	ldr	r2, [sp, #28]
 800f22c:	2a01      	cmp	r2, #1
 800f22e:	f300 80ad 	bgt.w	800f38c <_dtoa_r+0x88c>
 800f232:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f234:	2a00      	cmp	r2, #0
 800f236:	f000 80a5 	beq.w	800f384 <_dtoa_r+0x884>
 800f23a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f23e:	9e08      	ldr	r6, [sp, #32]
 800f240:	9d05      	ldr	r5, [sp, #20]
 800f242:	9a05      	ldr	r2, [sp, #20]
 800f244:	441a      	add	r2, r3
 800f246:	9205      	str	r2, [sp, #20]
 800f248:	9a06      	ldr	r2, [sp, #24]
 800f24a:	2101      	movs	r1, #1
 800f24c:	441a      	add	r2, r3
 800f24e:	4620      	mov	r0, r4
 800f250:	9206      	str	r2, [sp, #24]
 800f252:	f000 fc3d 	bl	800fad0 <__i2b>
 800f256:	4607      	mov	r7, r0
 800f258:	b165      	cbz	r5, 800f274 <_dtoa_r+0x774>
 800f25a:	9b06      	ldr	r3, [sp, #24]
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	dd09      	ble.n	800f274 <_dtoa_r+0x774>
 800f260:	42ab      	cmp	r3, r5
 800f262:	9a05      	ldr	r2, [sp, #20]
 800f264:	bfa8      	it	ge
 800f266:	462b      	movge	r3, r5
 800f268:	1ad2      	subs	r2, r2, r3
 800f26a:	9205      	str	r2, [sp, #20]
 800f26c:	9a06      	ldr	r2, [sp, #24]
 800f26e:	1aed      	subs	r5, r5, r3
 800f270:	1ad3      	subs	r3, r2, r3
 800f272:	9306      	str	r3, [sp, #24]
 800f274:	9b08      	ldr	r3, [sp, #32]
 800f276:	b1f3      	cbz	r3, 800f2b6 <_dtoa_r+0x7b6>
 800f278:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	f000 80a3 	beq.w	800f3c6 <_dtoa_r+0x8c6>
 800f280:	2e00      	cmp	r6, #0
 800f282:	dd10      	ble.n	800f2a6 <_dtoa_r+0x7a6>
 800f284:	4639      	mov	r1, r7
 800f286:	4632      	mov	r2, r6
 800f288:	4620      	mov	r0, r4
 800f28a:	f000 fce1 	bl	800fc50 <__pow5mult>
 800f28e:	4652      	mov	r2, sl
 800f290:	4601      	mov	r1, r0
 800f292:	4607      	mov	r7, r0
 800f294:	4620      	mov	r0, r4
 800f296:	f000 fc31 	bl	800fafc <__multiply>
 800f29a:	4651      	mov	r1, sl
 800f29c:	4680      	mov	r8, r0
 800f29e:	4620      	mov	r0, r4
 800f2a0:	f000 fb60 	bl	800f964 <_Bfree>
 800f2a4:	46c2      	mov	sl, r8
 800f2a6:	9b08      	ldr	r3, [sp, #32]
 800f2a8:	1b9a      	subs	r2, r3, r6
 800f2aa:	d004      	beq.n	800f2b6 <_dtoa_r+0x7b6>
 800f2ac:	4651      	mov	r1, sl
 800f2ae:	4620      	mov	r0, r4
 800f2b0:	f000 fcce 	bl	800fc50 <__pow5mult>
 800f2b4:	4682      	mov	sl, r0
 800f2b6:	2101      	movs	r1, #1
 800f2b8:	4620      	mov	r0, r4
 800f2ba:	f000 fc09 	bl	800fad0 <__i2b>
 800f2be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	4606      	mov	r6, r0
 800f2c4:	f340 8081 	ble.w	800f3ca <_dtoa_r+0x8ca>
 800f2c8:	461a      	mov	r2, r3
 800f2ca:	4601      	mov	r1, r0
 800f2cc:	4620      	mov	r0, r4
 800f2ce:	f000 fcbf 	bl	800fc50 <__pow5mult>
 800f2d2:	9b07      	ldr	r3, [sp, #28]
 800f2d4:	2b01      	cmp	r3, #1
 800f2d6:	4606      	mov	r6, r0
 800f2d8:	dd7a      	ble.n	800f3d0 <_dtoa_r+0x8d0>
 800f2da:	f04f 0800 	mov.w	r8, #0
 800f2de:	6933      	ldr	r3, [r6, #16]
 800f2e0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f2e4:	6918      	ldr	r0, [r3, #16]
 800f2e6:	f000 fba5 	bl	800fa34 <__hi0bits>
 800f2ea:	f1c0 0020 	rsb	r0, r0, #32
 800f2ee:	9b06      	ldr	r3, [sp, #24]
 800f2f0:	4418      	add	r0, r3
 800f2f2:	f010 001f 	ands.w	r0, r0, #31
 800f2f6:	f000 8094 	beq.w	800f422 <_dtoa_r+0x922>
 800f2fa:	f1c0 0320 	rsb	r3, r0, #32
 800f2fe:	2b04      	cmp	r3, #4
 800f300:	f340 8085 	ble.w	800f40e <_dtoa_r+0x90e>
 800f304:	9b05      	ldr	r3, [sp, #20]
 800f306:	f1c0 001c 	rsb	r0, r0, #28
 800f30a:	4403      	add	r3, r0
 800f30c:	9305      	str	r3, [sp, #20]
 800f30e:	9b06      	ldr	r3, [sp, #24]
 800f310:	4403      	add	r3, r0
 800f312:	4405      	add	r5, r0
 800f314:	9306      	str	r3, [sp, #24]
 800f316:	9b05      	ldr	r3, [sp, #20]
 800f318:	2b00      	cmp	r3, #0
 800f31a:	dd05      	ble.n	800f328 <_dtoa_r+0x828>
 800f31c:	4651      	mov	r1, sl
 800f31e:	461a      	mov	r2, r3
 800f320:	4620      	mov	r0, r4
 800f322:	f000 fcef 	bl	800fd04 <__lshift>
 800f326:	4682      	mov	sl, r0
 800f328:	9b06      	ldr	r3, [sp, #24]
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	dd05      	ble.n	800f33a <_dtoa_r+0x83a>
 800f32e:	4631      	mov	r1, r6
 800f330:	461a      	mov	r2, r3
 800f332:	4620      	mov	r0, r4
 800f334:	f000 fce6 	bl	800fd04 <__lshift>
 800f338:	4606      	mov	r6, r0
 800f33a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d072      	beq.n	800f426 <_dtoa_r+0x926>
 800f340:	4631      	mov	r1, r6
 800f342:	4650      	mov	r0, sl
 800f344:	f000 fd4a 	bl	800fddc <__mcmp>
 800f348:	2800      	cmp	r0, #0
 800f34a:	da6c      	bge.n	800f426 <_dtoa_r+0x926>
 800f34c:	2300      	movs	r3, #0
 800f34e:	4651      	mov	r1, sl
 800f350:	220a      	movs	r2, #10
 800f352:	4620      	mov	r0, r4
 800f354:	f000 fb28 	bl	800f9a8 <__multadd>
 800f358:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f35a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f35e:	4682      	mov	sl, r0
 800f360:	2b00      	cmp	r3, #0
 800f362:	f000 81b0 	beq.w	800f6c6 <_dtoa_r+0xbc6>
 800f366:	2300      	movs	r3, #0
 800f368:	4639      	mov	r1, r7
 800f36a:	220a      	movs	r2, #10
 800f36c:	4620      	mov	r0, r4
 800f36e:	f000 fb1b 	bl	800f9a8 <__multadd>
 800f372:	9b01      	ldr	r3, [sp, #4]
 800f374:	2b00      	cmp	r3, #0
 800f376:	4607      	mov	r7, r0
 800f378:	f300 8096 	bgt.w	800f4a8 <_dtoa_r+0x9a8>
 800f37c:	9b07      	ldr	r3, [sp, #28]
 800f37e:	2b02      	cmp	r3, #2
 800f380:	dc59      	bgt.n	800f436 <_dtoa_r+0x936>
 800f382:	e091      	b.n	800f4a8 <_dtoa_r+0x9a8>
 800f384:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f386:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f38a:	e758      	b.n	800f23e <_dtoa_r+0x73e>
 800f38c:	9b04      	ldr	r3, [sp, #16]
 800f38e:	1e5e      	subs	r6, r3, #1
 800f390:	9b08      	ldr	r3, [sp, #32]
 800f392:	42b3      	cmp	r3, r6
 800f394:	bfbf      	itttt	lt
 800f396:	9b08      	ldrlt	r3, [sp, #32]
 800f398:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800f39a:	9608      	strlt	r6, [sp, #32]
 800f39c:	1af3      	sublt	r3, r6, r3
 800f39e:	bfb4      	ite	lt
 800f3a0:	18d2      	addlt	r2, r2, r3
 800f3a2:	1b9e      	subge	r6, r3, r6
 800f3a4:	9b04      	ldr	r3, [sp, #16]
 800f3a6:	bfbc      	itt	lt
 800f3a8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800f3aa:	2600      	movlt	r6, #0
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	bfb7      	itett	lt
 800f3b0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800f3b4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800f3b8:	1a9d      	sublt	r5, r3, r2
 800f3ba:	2300      	movlt	r3, #0
 800f3bc:	e741      	b.n	800f242 <_dtoa_r+0x742>
 800f3be:	9e08      	ldr	r6, [sp, #32]
 800f3c0:	9d05      	ldr	r5, [sp, #20]
 800f3c2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800f3c4:	e748      	b.n	800f258 <_dtoa_r+0x758>
 800f3c6:	9a08      	ldr	r2, [sp, #32]
 800f3c8:	e770      	b.n	800f2ac <_dtoa_r+0x7ac>
 800f3ca:	9b07      	ldr	r3, [sp, #28]
 800f3cc:	2b01      	cmp	r3, #1
 800f3ce:	dc19      	bgt.n	800f404 <_dtoa_r+0x904>
 800f3d0:	9b02      	ldr	r3, [sp, #8]
 800f3d2:	b9bb      	cbnz	r3, 800f404 <_dtoa_r+0x904>
 800f3d4:	9b03      	ldr	r3, [sp, #12]
 800f3d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f3da:	b99b      	cbnz	r3, 800f404 <_dtoa_r+0x904>
 800f3dc:	9b03      	ldr	r3, [sp, #12]
 800f3de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f3e2:	0d1b      	lsrs	r3, r3, #20
 800f3e4:	051b      	lsls	r3, r3, #20
 800f3e6:	b183      	cbz	r3, 800f40a <_dtoa_r+0x90a>
 800f3e8:	9b05      	ldr	r3, [sp, #20]
 800f3ea:	3301      	adds	r3, #1
 800f3ec:	9305      	str	r3, [sp, #20]
 800f3ee:	9b06      	ldr	r3, [sp, #24]
 800f3f0:	3301      	adds	r3, #1
 800f3f2:	9306      	str	r3, [sp, #24]
 800f3f4:	f04f 0801 	mov.w	r8, #1
 800f3f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	f47f af6f 	bne.w	800f2de <_dtoa_r+0x7de>
 800f400:	2001      	movs	r0, #1
 800f402:	e774      	b.n	800f2ee <_dtoa_r+0x7ee>
 800f404:	f04f 0800 	mov.w	r8, #0
 800f408:	e7f6      	b.n	800f3f8 <_dtoa_r+0x8f8>
 800f40a:	4698      	mov	r8, r3
 800f40c:	e7f4      	b.n	800f3f8 <_dtoa_r+0x8f8>
 800f40e:	d082      	beq.n	800f316 <_dtoa_r+0x816>
 800f410:	9a05      	ldr	r2, [sp, #20]
 800f412:	331c      	adds	r3, #28
 800f414:	441a      	add	r2, r3
 800f416:	9205      	str	r2, [sp, #20]
 800f418:	9a06      	ldr	r2, [sp, #24]
 800f41a:	441a      	add	r2, r3
 800f41c:	441d      	add	r5, r3
 800f41e:	9206      	str	r2, [sp, #24]
 800f420:	e779      	b.n	800f316 <_dtoa_r+0x816>
 800f422:	4603      	mov	r3, r0
 800f424:	e7f4      	b.n	800f410 <_dtoa_r+0x910>
 800f426:	9b04      	ldr	r3, [sp, #16]
 800f428:	2b00      	cmp	r3, #0
 800f42a:	dc37      	bgt.n	800f49c <_dtoa_r+0x99c>
 800f42c:	9b07      	ldr	r3, [sp, #28]
 800f42e:	2b02      	cmp	r3, #2
 800f430:	dd34      	ble.n	800f49c <_dtoa_r+0x99c>
 800f432:	9b04      	ldr	r3, [sp, #16]
 800f434:	9301      	str	r3, [sp, #4]
 800f436:	9b01      	ldr	r3, [sp, #4]
 800f438:	b963      	cbnz	r3, 800f454 <_dtoa_r+0x954>
 800f43a:	4631      	mov	r1, r6
 800f43c:	2205      	movs	r2, #5
 800f43e:	4620      	mov	r0, r4
 800f440:	f000 fab2 	bl	800f9a8 <__multadd>
 800f444:	4601      	mov	r1, r0
 800f446:	4606      	mov	r6, r0
 800f448:	4650      	mov	r0, sl
 800f44a:	f000 fcc7 	bl	800fddc <__mcmp>
 800f44e:	2800      	cmp	r0, #0
 800f450:	f73f adbb 	bgt.w	800efca <_dtoa_r+0x4ca>
 800f454:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f456:	9d00      	ldr	r5, [sp, #0]
 800f458:	ea6f 0b03 	mvn.w	fp, r3
 800f45c:	f04f 0800 	mov.w	r8, #0
 800f460:	4631      	mov	r1, r6
 800f462:	4620      	mov	r0, r4
 800f464:	f000 fa7e 	bl	800f964 <_Bfree>
 800f468:	2f00      	cmp	r7, #0
 800f46a:	f43f aeab 	beq.w	800f1c4 <_dtoa_r+0x6c4>
 800f46e:	f1b8 0f00 	cmp.w	r8, #0
 800f472:	d005      	beq.n	800f480 <_dtoa_r+0x980>
 800f474:	45b8      	cmp	r8, r7
 800f476:	d003      	beq.n	800f480 <_dtoa_r+0x980>
 800f478:	4641      	mov	r1, r8
 800f47a:	4620      	mov	r0, r4
 800f47c:	f000 fa72 	bl	800f964 <_Bfree>
 800f480:	4639      	mov	r1, r7
 800f482:	4620      	mov	r0, r4
 800f484:	f000 fa6e 	bl	800f964 <_Bfree>
 800f488:	e69c      	b.n	800f1c4 <_dtoa_r+0x6c4>
 800f48a:	2600      	movs	r6, #0
 800f48c:	4637      	mov	r7, r6
 800f48e:	e7e1      	b.n	800f454 <_dtoa_r+0x954>
 800f490:	46bb      	mov	fp, r7
 800f492:	4637      	mov	r7, r6
 800f494:	e599      	b.n	800efca <_dtoa_r+0x4ca>
 800f496:	bf00      	nop
 800f498:	40240000 	.word	0x40240000
 800f49c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	f000 80c8 	beq.w	800f634 <_dtoa_r+0xb34>
 800f4a4:	9b04      	ldr	r3, [sp, #16]
 800f4a6:	9301      	str	r3, [sp, #4]
 800f4a8:	2d00      	cmp	r5, #0
 800f4aa:	dd05      	ble.n	800f4b8 <_dtoa_r+0x9b8>
 800f4ac:	4639      	mov	r1, r7
 800f4ae:	462a      	mov	r2, r5
 800f4b0:	4620      	mov	r0, r4
 800f4b2:	f000 fc27 	bl	800fd04 <__lshift>
 800f4b6:	4607      	mov	r7, r0
 800f4b8:	f1b8 0f00 	cmp.w	r8, #0
 800f4bc:	d05b      	beq.n	800f576 <_dtoa_r+0xa76>
 800f4be:	6879      	ldr	r1, [r7, #4]
 800f4c0:	4620      	mov	r0, r4
 800f4c2:	f000 fa0f 	bl	800f8e4 <_Balloc>
 800f4c6:	4605      	mov	r5, r0
 800f4c8:	b928      	cbnz	r0, 800f4d6 <_dtoa_r+0x9d6>
 800f4ca:	4b83      	ldr	r3, [pc, #524]	; (800f6d8 <_dtoa_r+0xbd8>)
 800f4cc:	4602      	mov	r2, r0
 800f4ce:	f240 21ef 	movw	r1, #751	; 0x2ef
 800f4d2:	f7ff bb2e 	b.w	800eb32 <_dtoa_r+0x32>
 800f4d6:	693a      	ldr	r2, [r7, #16]
 800f4d8:	3202      	adds	r2, #2
 800f4da:	0092      	lsls	r2, r2, #2
 800f4dc:	f107 010c 	add.w	r1, r7, #12
 800f4e0:	300c      	adds	r0, #12
 800f4e2:	f7ff fa76 	bl	800e9d2 <memcpy>
 800f4e6:	2201      	movs	r2, #1
 800f4e8:	4629      	mov	r1, r5
 800f4ea:	4620      	mov	r0, r4
 800f4ec:	f000 fc0a 	bl	800fd04 <__lshift>
 800f4f0:	9b00      	ldr	r3, [sp, #0]
 800f4f2:	3301      	adds	r3, #1
 800f4f4:	9304      	str	r3, [sp, #16]
 800f4f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f4fa:	4413      	add	r3, r2
 800f4fc:	9308      	str	r3, [sp, #32]
 800f4fe:	9b02      	ldr	r3, [sp, #8]
 800f500:	f003 0301 	and.w	r3, r3, #1
 800f504:	46b8      	mov	r8, r7
 800f506:	9306      	str	r3, [sp, #24]
 800f508:	4607      	mov	r7, r0
 800f50a:	9b04      	ldr	r3, [sp, #16]
 800f50c:	4631      	mov	r1, r6
 800f50e:	3b01      	subs	r3, #1
 800f510:	4650      	mov	r0, sl
 800f512:	9301      	str	r3, [sp, #4]
 800f514:	f7ff fa6b 	bl	800e9ee <quorem>
 800f518:	4641      	mov	r1, r8
 800f51a:	9002      	str	r0, [sp, #8]
 800f51c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800f520:	4650      	mov	r0, sl
 800f522:	f000 fc5b 	bl	800fddc <__mcmp>
 800f526:	463a      	mov	r2, r7
 800f528:	9005      	str	r0, [sp, #20]
 800f52a:	4631      	mov	r1, r6
 800f52c:	4620      	mov	r0, r4
 800f52e:	f000 fc71 	bl	800fe14 <__mdiff>
 800f532:	68c2      	ldr	r2, [r0, #12]
 800f534:	4605      	mov	r5, r0
 800f536:	bb02      	cbnz	r2, 800f57a <_dtoa_r+0xa7a>
 800f538:	4601      	mov	r1, r0
 800f53a:	4650      	mov	r0, sl
 800f53c:	f000 fc4e 	bl	800fddc <__mcmp>
 800f540:	4602      	mov	r2, r0
 800f542:	4629      	mov	r1, r5
 800f544:	4620      	mov	r0, r4
 800f546:	9209      	str	r2, [sp, #36]	; 0x24
 800f548:	f000 fa0c 	bl	800f964 <_Bfree>
 800f54c:	9b07      	ldr	r3, [sp, #28]
 800f54e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f550:	9d04      	ldr	r5, [sp, #16]
 800f552:	ea43 0102 	orr.w	r1, r3, r2
 800f556:	9b06      	ldr	r3, [sp, #24]
 800f558:	4319      	orrs	r1, r3
 800f55a:	d110      	bne.n	800f57e <_dtoa_r+0xa7e>
 800f55c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f560:	d029      	beq.n	800f5b6 <_dtoa_r+0xab6>
 800f562:	9b05      	ldr	r3, [sp, #20]
 800f564:	2b00      	cmp	r3, #0
 800f566:	dd02      	ble.n	800f56e <_dtoa_r+0xa6e>
 800f568:	9b02      	ldr	r3, [sp, #8]
 800f56a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800f56e:	9b01      	ldr	r3, [sp, #4]
 800f570:	f883 9000 	strb.w	r9, [r3]
 800f574:	e774      	b.n	800f460 <_dtoa_r+0x960>
 800f576:	4638      	mov	r0, r7
 800f578:	e7ba      	b.n	800f4f0 <_dtoa_r+0x9f0>
 800f57a:	2201      	movs	r2, #1
 800f57c:	e7e1      	b.n	800f542 <_dtoa_r+0xa42>
 800f57e:	9b05      	ldr	r3, [sp, #20]
 800f580:	2b00      	cmp	r3, #0
 800f582:	db04      	blt.n	800f58e <_dtoa_r+0xa8e>
 800f584:	9907      	ldr	r1, [sp, #28]
 800f586:	430b      	orrs	r3, r1
 800f588:	9906      	ldr	r1, [sp, #24]
 800f58a:	430b      	orrs	r3, r1
 800f58c:	d120      	bne.n	800f5d0 <_dtoa_r+0xad0>
 800f58e:	2a00      	cmp	r2, #0
 800f590:	dded      	ble.n	800f56e <_dtoa_r+0xa6e>
 800f592:	4651      	mov	r1, sl
 800f594:	2201      	movs	r2, #1
 800f596:	4620      	mov	r0, r4
 800f598:	f000 fbb4 	bl	800fd04 <__lshift>
 800f59c:	4631      	mov	r1, r6
 800f59e:	4682      	mov	sl, r0
 800f5a0:	f000 fc1c 	bl	800fddc <__mcmp>
 800f5a4:	2800      	cmp	r0, #0
 800f5a6:	dc03      	bgt.n	800f5b0 <_dtoa_r+0xab0>
 800f5a8:	d1e1      	bne.n	800f56e <_dtoa_r+0xa6e>
 800f5aa:	f019 0f01 	tst.w	r9, #1
 800f5ae:	d0de      	beq.n	800f56e <_dtoa_r+0xa6e>
 800f5b0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f5b4:	d1d8      	bne.n	800f568 <_dtoa_r+0xa68>
 800f5b6:	9a01      	ldr	r2, [sp, #4]
 800f5b8:	2339      	movs	r3, #57	; 0x39
 800f5ba:	7013      	strb	r3, [r2, #0]
 800f5bc:	462b      	mov	r3, r5
 800f5be:	461d      	mov	r5, r3
 800f5c0:	3b01      	subs	r3, #1
 800f5c2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f5c6:	2a39      	cmp	r2, #57	; 0x39
 800f5c8:	d06c      	beq.n	800f6a4 <_dtoa_r+0xba4>
 800f5ca:	3201      	adds	r2, #1
 800f5cc:	701a      	strb	r2, [r3, #0]
 800f5ce:	e747      	b.n	800f460 <_dtoa_r+0x960>
 800f5d0:	2a00      	cmp	r2, #0
 800f5d2:	dd07      	ble.n	800f5e4 <_dtoa_r+0xae4>
 800f5d4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f5d8:	d0ed      	beq.n	800f5b6 <_dtoa_r+0xab6>
 800f5da:	9a01      	ldr	r2, [sp, #4]
 800f5dc:	f109 0301 	add.w	r3, r9, #1
 800f5e0:	7013      	strb	r3, [r2, #0]
 800f5e2:	e73d      	b.n	800f460 <_dtoa_r+0x960>
 800f5e4:	9b04      	ldr	r3, [sp, #16]
 800f5e6:	9a08      	ldr	r2, [sp, #32]
 800f5e8:	f803 9c01 	strb.w	r9, [r3, #-1]
 800f5ec:	4293      	cmp	r3, r2
 800f5ee:	d043      	beq.n	800f678 <_dtoa_r+0xb78>
 800f5f0:	4651      	mov	r1, sl
 800f5f2:	2300      	movs	r3, #0
 800f5f4:	220a      	movs	r2, #10
 800f5f6:	4620      	mov	r0, r4
 800f5f8:	f000 f9d6 	bl	800f9a8 <__multadd>
 800f5fc:	45b8      	cmp	r8, r7
 800f5fe:	4682      	mov	sl, r0
 800f600:	f04f 0300 	mov.w	r3, #0
 800f604:	f04f 020a 	mov.w	r2, #10
 800f608:	4641      	mov	r1, r8
 800f60a:	4620      	mov	r0, r4
 800f60c:	d107      	bne.n	800f61e <_dtoa_r+0xb1e>
 800f60e:	f000 f9cb 	bl	800f9a8 <__multadd>
 800f612:	4680      	mov	r8, r0
 800f614:	4607      	mov	r7, r0
 800f616:	9b04      	ldr	r3, [sp, #16]
 800f618:	3301      	adds	r3, #1
 800f61a:	9304      	str	r3, [sp, #16]
 800f61c:	e775      	b.n	800f50a <_dtoa_r+0xa0a>
 800f61e:	f000 f9c3 	bl	800f9a8 <__multadd>
 800f622:	4639      	mov	r1, r7
 800f624:	4680      	mov	r8, r0
 800f626:	2300      	movs	r3, #0
 800f628:	220a      	movs	r2, #10
 800f62a:	4620      	mov	r0, r4
 800f62c:	f000 f9bc 	bl	800f9a8 <__multadd>
 800f630:	4607      	mov	r7, r0
 800f632:	e7f0      	b.n	800f616 <_dtoa_r+0xb16>
 800f634:	9b04      	ldr	r3, [sp, #16]
 800f636:	9301      	str	r3, [sp, #4]
 800f638:	9d00      	ldr	r5, [sp, #0]
 800f63a:	4631      	mov	r1, r6
 800f63c:	4650      	mov	r0, sl
 800f63e:	f7ff f9d6 	bl	800e9ee <quorem>
 800f642:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800f646:	9b00      	ldr	r3, [sp, #0]
 800f648:	f805 9b01 	strb.w	r9, [r5], #1
 800f64c:	1aea      	subs	r2, r5, r3
 800f64e:	9b01      	ldr	r3, [sp, #4]
 800f650:	4293      	cmp	r3, r2
 800f652:	dd07      	ble.n	800f664 <_dtoa_r+0xb64>
 800f654:	4651      	mov	r1, sl
 800f656:	2300      	movs	r3, #0
 800f658:	220a      	movs	r2, #10
 800f65a:	4620      	mov	r0, r4
 800f65c:	f000 f9a4 	bl	800f9a8 <__multadd>
 800f660:	4682      	mov	sl, r0
 800f662:	e7ea      	b.n	800f63a <_dtoa_r+0xb3a>
 800f664:	9b01      	ldr	r3, [sp, #4]
 800f666:	2b00      	cmp	r3, #0
 800f668:	bfc8      	it	gt
 800f66a:	461d      	movgt	r5, r3
 800f66c:	9b00      	ldr	r3, [sp, #0]
 800f66e:	bfd8      	it	le
 800f670:	2501      	movle	r5, #1
 800f672:	441d      	add	r5, r3
 800f674:	f04f 0800 	mov.w	r8, #0
 800f678:	4651      	mov	r1, sl
 800f67a:	2201      	movs	r2, #1
 800f67c:	4620      	mov	r0, r4
 800f67e:	f000 fb41 	bl	800fd04 <__lshift>
 800f682:	4631      	mov	r1, r6
 800f684:	4682      	mov	sl, r0
 800f686:	f000 fba9 	bl	800fddc <__mcmp>
 800f68a:	2800      	cmp	r0, #0
 800f68c:	dc96      	bgt.n	800f5bc <_dtoa_r+0xabc>
 800f68e:	d102      	bne.n	800f696 <_dtoa_r+0xb96>
 800f690:	f019 0f01 	tst.w	r9, #1
 800f694:	d192      	bne.n	800f5bc <_dtoa_r+0xabc>
 800f696:	462b      	mov	r3, r5
 800f698:	461d      	mov	r5, r3
 800f69a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f69e:	2a30      	cmp	r2, #48	; 0x30
 800f6a0:	d0fa      	beq.n	800f698 <_dtoa_r+0xb98>
 800f6a2:	e6dd      	b.n	800f460 <_dtoa_r+0x960>
 800f6a4:	9a00      	ldr	r2, [sp, #0]
 800f6a6:	429a      	cmp	r2, r3
 800f6a8:	d189      	bne.n	800f5be <_dtoa_r+0xabe>
 800f6aa:	f10b 0b01 	add.w	fp, fp, #1
 800f6ae:	2331      	movs	r3, #49	; 0x31
 800f6b0:	e796      	b.n	800f5e0 <_dtoa_r+0xae0>
 800f6b2:	4b0a      	ldr	r3, [pc, #40]	; (800f6dc <_dtoa_r+0xbdc>)
 800f6b4:	f7ff ba99 	b.w	800ebea <_dtoa_r+0xea>
 800f6b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	f47f aa6d 	bne.w	800eb9a <_dtoa_r+0x9a>
 800f6c0:	4b07      	ldr	r3, [pc, #28]	; (800f6e0 <_dtoa_r+0xbe0>)
 800f6c2:	f7ff ba92 	b.w	800ebea <_dtoa_r+0xea>
 800f6c6:	9b01      	ldr	r3, [sp, #4]
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	dcb5      	bgt.n	800f638 <_dtoa_r+0xb38>
 800f6cc:	9b07      	ldr	r3, [sp, #28]
 800f6ce:	2b02      	cmp	r3, #2
 800f6d0:	f73f aeb1 	bgt.w	800f436 <_dtoa_r+0x936>
 800f6d4:	e7b0      	b.n	800f638 <_dtoa_r+0xb38>
 800f6d6:	bf00      	nop
 800f6d8:	080121cc 	.word	0x080121cc
 800f6dc:	0801212c 	.word	0x0801212c
 800f6e0:	08012150 	.word	0x08012150

0800f6e4 <_free_r>:
 800f6e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f6e6:	2900      	cmp	r1, #0
 800f6e8:	d044      	beq.n	800f774 <_free_r+0x90>
 800f6ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f6ee:	9001      	str	r0, [sp, #4]
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	f1a1 0404 	sub.w	r4, r1, #4
 800f6f6:	bfb8      	it	lt
 800f6f8:	18e4      	addlt	r4, r4, r3
 800f6fa:	f000 f8e7 	bl	800f8cc <__malloc_lock>
 800f6fe:	4a1e      	ldr	r2, [pc, #120]	; (800f778 <_free_r+0x94>)
 800f700:	9801      	ldr	r0, [sp, #4]
 800f702:	6813      	ldr	r3, [r2, #0]
 800f704:	b933      	cbnz	r3, 800f714 <_free_r+0x30>
 800f706:	6063      	str	r3, [r4, #4]
 800f708:	6014      	str	r4, [r2, #0]
 800f70a:	b003      	add	sp, #12
 800f70c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f710:	f000 b8e2 	b.w	800f8d8 <__malloc_unlock>
 800f714:	42a3      	cmp	r3, r4
 800f716:	d908      	bls.n	800f72a <_free_r+0x46>
 800f718:	6825      	ldr	r5, [r4, #0]
 800f71a:	1961      	adds	r1, r4, r5
 800f71c:	428b      	cmp	r3, r1
 800f71e:	bf01      	itttt	eq
 800f720:	6819      	ldreq	r1, [r3, #0]
 800f722:	685b      	ldreq	r3, [r3, #4]
 800f724:	1949      	addeq	r1, r1, r5
 800f726:	6021      	streq	r1, [r4, #0]
 800f728:	e7ed      	b.n	800f706 <_free_r+0x22>
 800f72a:	461a      	mov	r2, r3
 800f72c:	685b      	ldr	r3, [r3, #4]
 800f72e:	b10b      	cbz	r3, 800f734 <_free_r+0x50>
 800f730:	42a3      	cmp	r3, r4
 800f732:	d9fa      	bls.n	800f72a <_free_r+0x46>
 800f734:	6811      	ldr	r1, [r2, #0]
 800f736:	1855      	adds	r5, r2, r1
 800f738:	42a5      	cmp	r5, r4
 800f73a:	d10b      	bne.n	800f754 <_free_r+0x70>
 800f73c:	6824      	ldr	r4, [r4, #0]
 800f73e:	4421      	add	r1, r4
 800f740:	1854      	adds	r4, r2, r1
 800f742:	42a3      	cmp	r3, r4
 800f744:	6011      	str	r1, [r2, #0]
 800f746:	d1e0      	bne.n	800f70a <_free_r+0x26>
 800f748:	681c      	ldr	r4, [r3, #0]
 800f74a:	685b      	ldr	r3, [r3, #4]
 800f74c:	6053      	str	r3, [r2, #4]
 800f74e:	440c      	add	r4, r1
 800f750:	6014      	str	r4, [r2, #0]
 800f752:	e7da      	b.n	800f70a <_free_r+0x26>
 800f754:	d902      	bls.n	800f75c <_free_r+0x78>
 800f756:	230c      	movs	r3, #12
 800f758:	6003      	str	r3, [r0, #0]
 800f75a:	e7d6      	b.n	800f70a <_free_r+0x26>
 800f75c:	6825      	ldr	r5, [r4, #0]
 800f75e:	1961      	adds	r1, r4, r5
 800f760:	428b      	cmp	r3, r1
 800f762:	bf04      	itt	eq
 800f764:	6819      	ldreq	r1, [r3, #0]
 800f766:	685b      	ldreq	r3, [r3, #4]
 800f768:	6063      	str	r3, [r4, #4]
 800f76a:	bf04      	itt	eq
 800f76c:	1949      	addeq	r1, r1, r5
 800f76e:	6021      	streq	r1, [r4, #0]
 800f770:	6054      	str	r4, [r2, #4]
 800f772:	e7ca      	b.n	800f70a <_free_r+0x26>
 800f774:	b003      	add	sp, #12
 800f776:	bd30      	pop	{r4, r5, pc}
 800f778:	20001b60 	.word	0x20001b60

0800f77c <malloc>:
 800f77c:	4b02      	ldr	r3, [pc, #8]	; (800f788 <malloc+0xc>)
 800f77e:	4601      	mov	r1, r0
 800f780:	6818      	ldr	r0, [r3, #0]
 800f782:	f000 b823 	b.w	800f7cc <_malloc_r>
 800f786:	bf00      	nop
 800f788:	2000009c 	.word	0x2000009c

0800f78c <sbrk_aligned>:
 800f78c:	b570      	push	{r4, r5, r6, lr}
 800f78e:	4e0e      	ldr	r6, [pc, #56]	; (800f7c8 <sbrk_aligned+0x3c>)
 800f790:	460c      	mov	r4, r1
 800f792:	6831      	ldr	r1, [r6, #0]
 800f794:	4605      	mov	r5, r0
 800f796:	b911      	cbnz	r1, 800f79e <sbrk_aligned+0x12>
 800f798:	f001 f808 	bl	80107ac <_sbrk_r>
 800f79c:	6030      	str	r0, [r6, #0]
 800f79e:	4621      	mov	r1, r4
 800f7a0:	4628      	mov	r0, r5
 800f7a2:	f001 f803 	bl	80107ac <_sbrk_r>
 800f7a6:	1c43      	adds	r3, r0, #1
 800f7a8:	d00a      	beq.n	800f7c0 <sbrk_aligned+0x34>
 800f7aa:	1cc4      	adds	r4, r0, #3
 800f7ac:	f024 0403 	bic.w	r4, r4, #3
 800f7b0:	42a0      	cmp	r0, r4
 800f7b2:	d007      	beq.n	800f7c4 <sbrk_aligned+0x38>
 800f7b4:	1a21      	subs	r1, r4, r0
 800f7b6:	4628      	mov	r0, r5
 800f7b8:	f000 fff8 	bl	80107ac <_sbrk_r>
 800f7bc:	3001      	adds	r0, #1
 800f7be:	d101      	bne.n	800f7c4 <sbrk_aligned+0x38>
 800f7c0:	f04f 34ff 	mov.w	r4, #4294967295
 800f7c4:	4620      	mov	r0, r4
 800f7c6:	bd70      	pop	{r4, r5, r6, pc}
 800f7c8:	20001b64 	.word	0x20001b64

0800f7cc <_malloc_r>:
 800f7cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f7d0:	1ccd      	adds	r5, r1, #3
 800f7d2:	f025 0503 	bic.w	r5, r5, #3
 800f7d6:	3508      	adds	r5, #8
 800f7d8:	2d0c      	cmp	r5, #12
 800f7da:	bf38      	it	cc
 800f7dc:	250c      	movcc	r5, #12
 800f7de:	2d00      	cmp	r5, #0
 800f7e0:	4607      	mov	r7, r0
 800f7e2:	db01      	blt.n	800f7e8 <_malloc_r+0x1c>
 800f7e4:	42a9      	cmp	r1, r5
 800f7e6:	d905      	bls.n	800f7f4 <_malloc_r+0x28>
 800f7e8:	230c      	movs	r3, #12
 800f7ea:	603b      	str	r3, [r7, #0]
 800f7ec:	2600      	movs	r6, #0
 800f7ee:	4630      	mov	r0, r6
 800f7f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f7f4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f8c8 <_malloc_r+0xfc>
 800f7f8:	f000 f868 	bl	800f8cc <__malloc_lock>
 800f7fc:	f8d8 3000 	ldr.w	r3, [r8]
 800f800:	461c      	mov	r4, r3
 800f802:	bb5c      	cbnz	r4, 800f85c <_malloc_r+0x90>
 800f804:	4629      	mov	r1, r5
 800f806:	4638      	mov	r0, r7
 800f808:	f7ff ffc0 	bl	800f78c <sbrk_aligned>
 800f80c:	1c43      	adds	r3, r0, #1
 800f80e:	4604      	mov	r4, r0
 800f810:	d155      	bne.n	800f8be <_malloc_r+0xf2>
 800f812:	f8d8 4000 	ldr.w	r4, [r8]
 800f816:	4626      	mov	r6, r4
 800f818:	2e00      	cmp	r6, #0
 800f81a:	d145      	bne.n	800f8a8 <_malloc_r+0xdc>
 800f81c:	2c00      	cmp	r4, #0
 800f81e:	d048      	beq.n	800f8b2 <_malloc_r+0xe6>
 800f820:	6823      	ldr	r3, [r4, #0]
 800f822:	4631      	mov	r1, r6
 800f824:	4638      	mov	r0, r7
 800f826:	eb04 0903 	add.w	r9, r4, r3
 800f82a:	f000 ffbf 	bl	80107ac <_sbrk_r>
 800f82e:	4581      	cmp	r9, r0
 800f830:	d13f      	bne.n	800f8b2 <_malloc_r+0xe6>
 800f832:	6821      	ldr	r1, [r4, #0]
 800f834:	1a6d      	subs	r5, r5, r1
 800f836:	4629      	mov	r1, r5
 800f838:	4638      	mov	r0, r7
 800f83a:	f7ff ffa7 	bl	800f78c <sbrk_aligned>
 800f83e:	3001      	adds	r0, #1
 800f840:	d037      	beq.n	800f8b2 <_malloc_r+0xe6>
 800f842:	6823      	ldr	r3, [r4, #0]
 800f844:	442b      	add	r3, r5
 800f846:	6023      	str	r3, [r4, #0]
 800f848:	f8d8 3000 	ldr.w	r3, [r8]
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d038      	beq.n	800f8c2 <_malloc_r+0xf6>
 800f850:	685a      	ldr	r2, [r3, #4]
 800f852:	42a2      	cmp	r2, r4
 800f854:	d12b      	bne.n	800f8ae <_malloc_r+0xe2>
 800f856:	2200      	movs	r2, #0
 800f858:	605a      	str	r2, [r3, #4]
 800f85a:	e00f      	b.n	800f87c <_malloc_r+0xb0>
 800f85c:	6822      	ldr	r2, [r4, #0]
 800f85e:	1b52      	subs	r2, r2, r5
 800f860:	d41f      	bmi.n	800f8a2 <_malloc_r+0xd6>
 800f862:	2a0b      	cmp	r2, #11
 800f864:	d917      	bls.n	800f896 <_malloc_r+0xca>
 800f866:	1961      	adds	r1, r4, r5
 800f868:	42a3      	cmp	r3, r4
 800f86a:	6025      	str	r5, [r4, #0]
 800f86c:	bf18      	it	ne
 800f86e:	6059      	strne	r1, [r3, #4]
 800f870:	6863      	ldr	r3, [r4, #4]
 800f872:	bf08      	it	eq
 800f874:	f8c8 1000 	streq.w	r1, [r8]
 800f878:	5162      	str	r2, [r4, r5]
 800f87a:	604b      	str	r3, [r1, #4]
 800f87c:	4638      	mov	r0, r7
 800f87e:	f104 060b 	add.w	r6, r4, #11
 800f882:	f000 f829 	bl	800f8d8 <__malloc_unlock>
 800f886:	f026 0607 	bic.w	r6, r6, #7
 800f88a:	1d23      	adds	r3, r4, #4
 800f88c:	1af2      	subs	r2, r6, r3
 800f88e:	d0ae      	beq.n	800f7ee <_malloc_r+0x22>
 800f890:	1b9b      	subs	r3, r3, r6
 800f892:	50a3      	str	r3, [r4, r2]
 800f894:	e7ab      	b.n	800f7ee <_malloc_r+0x22>
 800f896:	42a3      	cmp	r3, r4
 800f898:	6862      	ldr	r2, [r4, #4]
 800f89a:	d1dd      	bne.n	800f858 <_malloc_r+0x8c>
 800f89c:	f8c8 2000 	str.w	r2, [r8]
 800f8a0:	e7ec      	b.n	800f87c <_malloc_r+0xb0>
 800f8a2:	4623      	mov	r3, r4
 800f8a4:	6864      	ldr	r4, [r4, #4]
 800f8a6:	e7ac      	b.n	800f802 <_malloc_r+0x36>
 800f8a8:	4634      	mov	r4, r6
 800f8aa:	6876      	ldr	r6, [r6, #4]
 800f8ac:	e7b4      	b.n	800f818 <_malloc_r+0x4c>
 800f8ae:	4613      	mov	r3, r2
 800f8b0:	e7cc      	b.n	800f84c <_malloc_r+0x80>
 800f8b2:	230c      	movs	r3, #12
 800f8b4:	603b      	str	r3, [r7, #0]
 800f8b6:	4638      	mov	r0, r7
 800f8b8:	f000 f80e 	bl	800f8d8 <__malloc_unlock>
 800f8bc:	e797      	b.n	800f7ee <_malloc_r+0x22>
 800f8be:	6025      	str	r5, [r4, #0]
 800f8c0:	e7dc      	b.n	800f87c <_malloc_r+0xb0>
 800f8c2:	605b      	str	r3, [r3, #4]
 800f8c4:	deff      	udf	#255	; 0xff
 800f8c6:	bf00      	nop
 800f8c8:	20001b60 	.word	0x20001b60

0800f8cc <__malloc_lock>:
 800f8cc:	4801      	ldr	r0, [pc, #4]	; (800f8d4 <__malloc_lock+0x8>)
 800f8ce:	f7ff b87e 	b.w	800e9ce <__retarget_lock_acquire_recursive>
 800f8d2:	bf00      	nop
 800f8d4:	20001b5c 	.word	0x20001b5c

0800f8d8 <__malloc_unlock>:
 800f8d8:	4801      	ldr	r0, [pc, #4]	; (800f8e0 <__malloc_unlock+0x8>)
 800f8da:	f7ff b879 	b.w	800e9d0 <__retarget_lock_release_recursive>
 800f8de:	bf00      	nop
 800f8e0:	20001b5c 	.word	0x20001b5c

0800f8e4 <_Balloc>:
 800f8e4:	b570      	push	{r4, r5, r6, lr}
 800f8e6:	69c6      	ldr	r6, [r0, #28]
 800f8e8:	4604      	mov	r4, r0
 800f8ea:	460d      	mov	r5, r1
 800f8ec:	b976      	cbnz	r6, 800f90c <_Balloc+0x28>
 800f8ee:	2010      	movs	r0, #16
 800f8f0:	f7ff ff44 	bl	800f77c <malloc>
 800f8f4:	4602      	mov	r2, r0
 800f8f6:	61e0      	str	r0, [r4, #28]
 800f8f8:	b920      	cbnz	r0, 800f904 <_Balloc+0x20>
 800f8fa:	4b18      	ldr	r3, [pc, #96]	; (800f95c <_Balloc+0x78>)
 800f8fc:	4818      	ldr	r0, [pc, #96]	; (800f960 <_Balloc+0x7c>)
 800f8fe:	216b      	movs	r1, #107	; 0x6b
 800f900:	f000 ff64 	bl	80107cc <__assert_func>
 800f904:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f908:	6006      	str	r6, [r0, #0]
 800f90a:	60c6      	str	r6, [r0, #12]
 800f90c:	69e6      	ldr	r6, [r4, #28]
 800f90e:	68f3      	ldr	r3, [r6, #12]
 800f910:	b183      	cbz	r3, 800f934 <_Balloc+0x50>
 800f912:	69e3      	ldr	r3, [r4, #28]
 800f914:	68db      	ldr	r3, [r3, #12]
 800f916:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f91a:	b9b8      	cbnz	r0, 800f94c <_Balloc+0x68>
 800f91c:	2101      	movs	r1, #1
 800f91e:	fa01 f605 	lsl.w	r6, r1, r5
 800f922:	1d72      	adds	r2, r6, #5
 800f924:	0092      	lsls	r2, r2, #2
 800f926:	4620      	mov	r0, r4
 800f928:	f000 ff6e 	bl	8010808 <_calloc_r>
 800f92c:	b160      	cbz	r0, 800f948 <_Balloc+0x64>
 800f92e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f932:	e00e      	b.n	800f952 <_Balloc+0x6e>
 800f934:	2221      	movs	r2, #33	; 0x21
 800f936:	2104      	movs	r1, #4
 800f938:	4620      	mov	r0, r4
 800f93a:	f000 ff65 	bl	8010808 <_calloc_r>
 800f93e:	69e3      	ldr	r3, [r4, #28]
 800f940:	60f0      	str	r0, [r6, #12]
 800f942:	68db      	ldr	r3, [r3, #12]
 800f944:	2b00      	cmp	r3, #0
 800f946:	d1e4      	bne.n	800f912 <_Balloc+0x2e>
 800f948:	2000      	movs	r0, #0
 800f94a:	bd70      	pop	{r4, r5, r6, pc}
 800f94c:	6802      	ldr	r2, [r0, #0]
 800f94e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f952:	2300      	movs	r3, #0
 800f954:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f958:	e7f7      	b.n	800f94a <_Balloc+0x66>
 800f95a:	bf00      	nop
 800f95c:	0801215d 	.word	0x0801215d
 800f960:	080121dd 	.word	0x080121dd

0800f964 <_Bfree>:
 800f964:	b570      	push	{r4, r5, r6, lr}
 800f966:	69c6      	ldr	r6, [r0, #28]
 800f968:	4605      	mov	r5, r0
 800f96a:	460c      	mov	r4, r1
 800f96c:	b976      	cbnz	r6, 800f98c <_Bfree+0x28>
 800f96e:	2010      	movs	r0, #16
 800f970:	f7ff ff04 	bl	800f77c <malloc>
 800f974:	4602      	mov	r2, r0
 800f976:	61e8      	str	r0, [r5, #28]
 800f978:	b920      	cbnz	r0, 800f984 <_Bfree+0x20>
 800f97a:	4b09      	ldr	r3, [pc, #36]	; (800f9a0 <_Bfree+0x3c>)
 800f97c:	4809      	ldr	r0, [pc, #36]	; (800f9a4 <_Bfree+0x40>)
 800f97e:	218f      	movs	r1, #143	; 0x8f
 800f980:	f000 ff24 	bl	80107cc <__assert_func>
 800f984:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f988:	6006      	str	r6, [r0, #0]
 800f98a:	60c6      	str	r6, [r0, #12]
 800f98c:	b13c      	cbz	r4, 800f99e <_Bfree+0x3a>
 800f98e:	69eb      	ldr	r3, [r5, #28]
 800f990:	6862      	ldr	r2, [r4, #4]
 800f992:	68db      	ldr	r3, [r3, #12]
 800f994:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f998:	6021      	str	r1, [r4, #0]
 800f99a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f99e:	bd70      	pop	{r4, r5, r6, pc}
 800f9a0:	0801215d 	.word	0x0801215d
 800f9a4:	080121dd 	.word	0x080121dd

0800f9a8 <__multadd>:
 800f9a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9ac:	690d      	ldr	r5, [r1, #16]
 800f9ae:	4607      	mov	r7, r0
 800f9b0:	460c      	mov	r4, r1
 800f9b2:	461e      	mov	r6, r3
 800f9b4:	f101 0c14 	add.w	ip, r1, #20
 800f9b8:	2000      	movs	r0, #0
 800f9ba:	f8dc 3000 	ldr.w	r3, [ip]
 800f9be:	b299      	uxth	r1, r3
 800f9c0:	fb02 6101 	mla	r1, r2, r1, r6
 800f9c4:	0c1e      	lsrs	r6, r3, #16
 800f9c6:	0c0b      	lsrs	r3, r1, #16
 800f9c8:	fb02 3306 	mla	r3, r2, r6, r3
 800f9cc:	b289      	uxth	r1, r1
 800f9ce:	3001      	adds	r0, #1
 800f9d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f9d4:	4285      	cmp	r5, r0
 800f9d6:	f84c 1b04 	str.w	r1, [ip], #4
 800f9da:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f9de:	dcec      	bgt.n	800f9ba <__multadd+0x12>
 800f9e0:	b30e      	cbz	r6, 800fa26 <__multadd+0x7e>
 800f9e2:	68a3      	ldr	r3, [r4, #8]
 800f9e4:	42ab      	cmp	r3, r5
 800f9e6:	dc19      	bgt.n	800fa1c <__multadd+0x74>
 800f9e8:	6861      	ldr	r1, [r4, #4]
 800f9ea:	4638      	mov	r0, r7
 800f9ec:	3101      	adds	r1, #1
 800f9ee:	f7ff ff79 	bl	800f8e4 <_Balloc>
 800f9f2:	4680      	mov	r8, r0
 800f9f4:	b928      	cbnz	r0, 800fa02 <__multadd+0x5a>
 800f9f6:	4602      	mov	r2, r0
 800f9f8:	4b0c      	ldr	r3, [pc, #48]	; (800fa2c <__multadd+0x84>)
 800f9fa:	480d      	ldr	r0, [pc, #52]	; (800fa30 <__multadd+0x88>)
 800f9fc:	21ba      	movs	r1, #186	; 0xba
 800f9fe:	f000 fee5 	bl	80107cc <__assert_func>
 800fa02:	6922      	ldr	r2, [r4, #16]
 800fa04:	3202      	adds	r2, #2
 800fa06:	f104 010c 	add.w	r1, r4, #12
 800fa0a:	0092      	lsls	r2, r2, #2
 800fa0c:	300c      	adds	r0, #12
 800fa0e:	f7fe ffe0 	bl	800e9d2 <memcpy>
 800fa12:	4621      	mov	r1, r4
 800fa14:	4638      	mov	r0, r7
 800fa16:	f7ff ffa5 	bl	800f964 <_Bfree>
 800fa1a:	4644      	mov	r4, r8
 800fa1c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fa20:	3501      	adds	r5, #1
 800fa22:	615e      	str	r6, [r3, #20]
 800fa24:	6125      	str	r5, [r4, #16]
 800fa26:	4620      	mov	r0, r4
 800fa28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa2c:	080121cc 	.word	0x080121cc
 800fa30:	080121dd 	.word	0x080121dd

0800fa34 <__hi0bits>:
 800fa34:	0c03      	lsrs	r3, r0, #16
 800fa36:	041b      	lsls	r3, r3, #16
 800fa38:	b9d3      	cbnz	r3, 800fa70 <__hi0bits+0x3c>
 800fa3a:	0400      	lsls	r0, r0, #16
 800fa3c:	2310      	movs	r3, #16
 800fa3e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800fa42:	bf04      	itt	eq
 800fa44:	0200      	lsleq	r0, r0, #8
 800fa46:	3308      	addeq	r3, #8
 800fa48:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800fa4c:	bf04      	itt	eq
 800fa4e:	0100      	lsleq	r0, r0, #4
 800fa50:	3304      	addeq	r3, #4
 800fa52:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800fa56:	bf04      	itt	eq
 800fa58:	0080      	lsleq	r0, r0, #2
 800fa5a:	3302      	addeq	r3, #2
 800fa5c:	2800      	cmp	r0, #0
 800fa5e:	db05      	blt.n	800fa6c <__hi0bits+0x38>
 800fa60:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800fa64:	f103 0301 	add.w	r3, r3, #1
 800fa68:	bf08      	it	eq
 800fa6a:	2320      	moveq	r3, #32
 800fa6c:	4618      	mov	r0, r3
 800fa6e:	4770      	bx	lr
 800fa70:	2300      	movs	r3, #0
 800fa72:	e7e4      	b.n	800fa3e <__hi0bits+0xa>

0800fa74 <__lo0bits>:
 800fa74:	6803      	ldr	r3, [r0, #0]
 800fa76:	f013 0207 	ands.w	r2, r3, #7
 800fa7a:	d00c      	beq.n	800fa96 <__lo0bits+0x22>
 800fa7c:	07d9      	lsls	r1, r3, #31
 800fa7e:	d422      	bmi.n	800fac6 <__lo0bits+0x52>
 800fa80:	079a      	lsls	r2, r3, #30
 800fa82:	bf49      	itett	mi
 800fa84:	085b      	lsrmi	r3, r3, #1
 800fa86:	089b      	lsrpl	r3, r3, #2
 800fa88:	6003      	strmi	r3, [r0, #0]
 800fa8a:	2201      	movmi	r2, #1
 800fa8c:	bf5c      	itt	pl
 800fa8e:	6003      	strpl	r3, [r0, #0]
 800fa90:	2202      	movpl	r2, #2
 800fa92:	4610      	mov	r0, r2
 800fa94:	4770      	bx	lr
 800fa96:	b299      	uxth	r1, r3
 800fa98:	b909      	cbnz	r1, 800fa9e <__lo0bits+0x2a>
 800fa9a:	0c1b      	lsrs	r3, r3, #16
 800fa9c:	2210      	movs	r2, #16
 800fa9e:	b2d9      	uxtb	r1, r3
 800faa0:	b909      	cbnz	r1, 800faa6 <__lo0bits+0x32>
 800faa2:	3208      	adds	r2, #8
 800faa4:	0a1b      	lsrs	r3, r3, #8
 800faa6:	0719      	lsls	r1, r3, #28
 800faa8:	bf04      	itt	eq
 800faaa:	091b      	lsreq	r3, r3, #4
 800faac:	3204      	addeq	r2, #4
 800faae:	0799      	lsls	r1, r3, #30
 800fab0:	bf04      	itt	eq
 800fab2:	089b      	lsreq	r3, r3, #2
 800fab4:	3202      	addeq	r2, #2
 800fab6:	07d9      	lsls	r1, r3, #31
 800fab8:	d403      	bmi.n	800fac2 <__lo0bits+0x4e>
 800faba:	085b      	lsrs	r3, r3, #1
 800fabc:	f102 0201 	add.w	r2, r2, #1
 800fac0:	d003      	beq.n	800faca <__lo0bits+0x56>
 800fac2:	6003      	str	r3, [r0, #0]
 800fac4:	e7e5      	b.n	800fa92 <__lo0bits+0x1e>
 800fac6:	2200      	movs	r2, #0
 800fac8:	e7e3      	b.n	800fa92 <__lo0bits+0x1e>
 800faca:	2220      	movs	r2, #32
 800facc:	e7e1      	b.n	800fa92 <__lo0bits+0x1e>
	...

0800fad0 <__i2b>:
 800fad0:	b510      	push	{r4, lr}
 800fad2:	460c      	mov	r4, r1
 800fad4:	2101      	movs	r1, #1
 800fad6:	f7ff ff05 	bl	800f8e4 <_Balloc>
 800fada:	4602      	mov	r2, r0
 800fadc:	b928      	cbnz	r0, 800faea <__i2b+0x1a>
 800fade:	4b05      	ldr	r3, [pc, #20]	; (800faf4 <__i2b+0x24>)
 800fae0:	4805      	ldr	r0, [pc, #20]	; (800faf8 <__i2b+0x28>)
 800fae2:	f240 1145 	movw	r1, #325	; 0x145
 800fae6:	f000 fe71 	bl	80107cc <__assert_func>
 800faea:	2301      	movs	r3, #1
 800faec:	6144      	str	r4, [r0, #20]
 800faee:	6103      	str	r3, [r0, #16]
 800faf0:	bd10      	pop	{r4, pc}
 800faf2:	bf00      	nop
 800faf4:	080121cc 	.word	0x080121cc
 800faf8:	080121dd 	.word	0x080121dd

0800fafc <__multiply>:
 800fafc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb00:	4691      	mov	r9, r2
 800fb02:	690a      	ldr	r2, [r1, #16]
 800fb04:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fb08:	429a      	cmp	r2, r3
 800fb0a:	bfb8      	it	lt
 800fb0c:	460b      	movlt	r3, r1
 800fb0e:	460c      	mov	r4, r1
 800fb10:	bfbc      	itt	lt
 800fb12:	464c      	movlt	r4, r9
 800fb14:	4699      	movlt	r9, r3
 800fb16:	6927      	ldr	r7, [r4, #16]
 800fb18:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800fb1c:	68a3      	ldr	r3, [r4, #8]
 800fb1e:	6861      	ldr	r1, [r4, #4]
 800fb20:	eb07 060a 	add.w	r6, r7, sl
 800fb24:	42b3      	cmp	r3, r6
 800fb26:	b085      	sub	sp, #20
 800fb28:	bfb8      	it	lt
 800fb2a:	3101      	addlt	r1, #1
 800fb2c:	f7ff feda 	bl	800f8e4 <_Balloc>
 800fb30:	b930      	cbnz	r0, 800fb40 <__multiply+0x44>
 800fb32:	4602      	mov	r2, r0
 800fb34:	4b44      	ldr	r3, [pc, #272]	; (800fc48 <__multiply+0x14c>)
 800fb36:	4845      	ldr	r0, [pc, #276]	; (800fc4c <__multiply+0x150>)
 800fb38:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800fb3c:	f000 fe46 	bl	80107cc <__assert_func>
 800fb40:	f100 0514 	add.w	r5, r0, #20
 800fb44:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800fb48:	462b      	mov	r3, r5
 800fb4a:	2200      	movs	r2, #0
 800fb4c:	4543      	cmp	r3, r8
 800fb4e:	d321      	bcc.n	800fb94 <__multiply+0x98>
 800fb50:	f104 0314 	add.w	r3, r4, #20
 800fb54:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800fb58:	f109 0314 	add.w	r3, r9, #20
 800fb5c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800fb60:	9202      	str	r2, [sp, #8]
 800fb62:	1b3a      	subs	r2, r7, r4
 800fb64:	3a15      	subs	r2, #21
 800fb66:	f022 0203 	bic.w	r2, r2, #3
 800fb6a:	3204      	adds	r2, #4
 800fb6c:	f104 0115 	add.w	r1, r4, #21
 800fb70:	428f      	cmp	r7, r1
 800fb72:	bf38      	it	cc
 800fb74:	2204      	movcc	r2, #4
 800fb76:	9201      	str	r2, [sp, #4]
 800fb78:	9a02      	ldr	r2, [sp, #8]
 800fb7a:	9303      	str	r3, [sp, #12]
 800fb7c:	429a      	cmp	r2, r3
 800fb7e:	d80c      	bhi.n	800fb9a <__multiply+0x9e>
 800fb80:	2e00      	cmp	r6, #0
 800fb82:	dd03      	ble.n	800fb8c <__multiply+0x90>
 800fb84:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d05b      	beq.n	800fc44 <__multiply+0x148>
 800fb8c:	6106      	str	r6, [r0, #16]
 800fb8e:	b005      	add	sp, #20
 800fb90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb94:	f843 2b04 	str.w	r2, [r3], #4
 800fb98:	e7d8      	b.n	800fb4c <__multiply+0x50>
 800fb9a:	f8b3 a000 	ldrh.w	sl, [r3]
 800fb9e:	f1ba 0f00 	cmp.w	sl, #0
 800fba2:	d024      	beq.n	800fbee <__multiply+0xf2>
 800fba4:	f104 0e14 	add.w	lr, r4, #20
 800fba8:	46a9      	mov	r9, r5
 800fbaa:	f04f 0c00 	mov.w	ip, #0
 800fbae:	f85e 2b04 	ldr.w	r2, [lr], #4
 800fbb2:	f8d9 1000 	ldr.w	r1, [r9]
 800fbb6:	fa1f fb82 	uxth.w	fp, r2
 800fbba:	b289      	uxth	r1, r1
 800fbbc:	fb0a 110b 	mla	r1, sl, fp, r1
 800fbc0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800fbc4:	f8d9 2000 	ldr.w	r2, [r9]
 800fbc8:	4461      	add	r1, ip
 800fbca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fbce:	fb0a c20b 	mla	r2, sl, fp, ip
 800fbd2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800fbd6:	b289      	uxth	r1, r1
 800fbd8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800fbdc:	4577      	cmp	r7, lr
 800fbde:	f849 1b04 	str.w	r1, [r9], #4
 800fbe2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fbe6:	d8e2      	bhi.n	800fbae <__multiply+0xb2>
 800fbe8:	9a01      	ldr	r2, [sp, #4]
 800fbea:	f845 c002 	str.w	ip, [r5, r2]
 800fbee:	9a03      	ldr	r2, [sp, #12]
 800fbf0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800fbf4:	3304      	adds	r3, #4
 800fbf6:	f1b9 0f00 	cmp.w	r9, #0
 800fbfa:	d021      	beq.n	800fc40 <__multiply+0x144>
 800fbfc:	6829      	ldr	r1, [r5, #0]
 800fbfe:	f104 0c14 	add.w	ip, r4, #20
 800fc02:	46ae      	mov	lr, r5
 800fc04:	f04f 0a00 	mov.w	sl, #0
 800fc08:	f8bc b000 	ldrh.w	fp, [ip]
 800fc0c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800fc10:	fb09 220b 	mla	r2, r9, fp, r2
 800fc14:	4452      	add	r2, sl
 800fc16:	b289      	uxth	r1, r1
 800fc18:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800fc1c:	f84e 1b04 	str.w	r1, [lr], #4
 800fc20:	f85c 1b04 	ldr.w	r1, [ip], #4
 800fc24:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800fc28:	f8be 1000 	ldrh.w	r1, [lr]
 800fc2c:	fb09 110a 	mla	r1, r9, sl, r1
 800fc30:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800fc34:	4567      	cmp	r7, ip
 800fc36:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800fc3a:	d8e5      	bhi.n	800fc08 <__multiply+0x10c>
 800fc3c:	9a01      	ldr	r2, [sp, #4]
 800fc3e:	50a9      	str	r1, [r5, r2]
 800fc40:	3504      	adds	r5, #4
 800fc42:	e799      	b.n	800fb78 <__multiply+0x7c>
 800fc44:	3e01      	subs	r6, #1
 800fc46:	e79b      	b.n	800fb80 <__multiply+0x84>
 800fc48:	080121cc 	.word	0x080121cc
 800fc4c:	080121dd 	.word	0x080121dd

0800fc50 <__pow5mult>:
 800fc50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fc54:	4615      	mov	r5, r2
 800fc56:	f012 0203 	ands.w	r2, r2, #3
 800fc5a:	4606      	mov	r6, r0
 800fc5c:	460f      	mov	r7, r1
 800fc5e:	d007      	beq.n	800fc70 <__pow5mult+0x20>
 800fc60:	4c25      	ldr	r4, [pc, #148]	; (800fcf8 <__pow5mult+0xa8>)
 800fc62:	3a01      	subs	r2, #1
 800fc64:	2300      	movs	r3, #0
 800fc66:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fc6a:	f7ff fe9d 	bl	800f9a8 <__multadd>
 800fc6e:	4607      	mov	r7, r0
 800fc70:	10ad      	asrs	r5, r5, #2
 800fc72:	d03d      	beq.n	800fcf0 <__pow5mult+0xa0>
 800fc74:	69f4      	ldr	r4, [r6, #28]
 800fc76:	b97c      	cbnz	r4, 800fc98 <__pow5mult+0x48>
 800fc78:	2010      	movs	r0, #16
 800fc7a:	f7ff fd7f 	bl	800f77c <malloc>
 800fc7e:	4602      	mov	r2, r0
 800fc80:	61f0      	str	r0, [r6, #28]
 800fc82:	b928      	cbnz	r0, 800fc90 <__pow5mult+0x40>
 800fc84:	4b1d      	ldr	r3, [pc, #116]	; (800fcfc <__pow5mult+0xac>)
 800fc86:	481e      	ldr	r0, [pc, #120]	; (800fd00 <__pow5mult+0xb0>)
 800fc88:	f240 11b3 	movw	r1, #435	; 0x1b3
 800fc8c:	f000 fd9e 	bl	80107cc <__assert_func>
 800fc90:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fc94:	6004      	str	r4, [r0, #0]
 800fc96:	60c4      	str	r4, [r0, #12]
 800fc98:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800fc9c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fca0:	b94c      	cbnz	r4, 800fcb6 <__pow5mult+0x66>
 800fca2:	f240 2171 	movw	r1, #625	; 0x271
 800fca6:	4630      	mov	r0, r6
 800fca8:	f7ff ff12 	bl	800fad0 <__i2b>
 800fcac:	2300      	movs	r3, #0
 800fcae:	f8c8 0008 	str.w	r0, [r8, #8]
 800fcb2:	4604      	mov	r4, r0
 800fcb4:	6003      	str	r3, [r0, #0]
 800fcb6:	f04f 0900 	mov.w	r9, #0
 800fcba:	07eb      	lsls	r3, r5, #31
 800fcbc:	d50a      	bpl.n	800fcd4 <__pow5mult+0x84>
 800fcbe:	4639      	mov	r1, r7
 800fcc0:	4622      	mov	r2, r4
 800fcc2:	4630      	mov	r0, r6
 800fcc4:	f7ff ff1a 	bl	800fafc <__multiply>
 800fcc8:	4639      	mov	r1, r7
 800fcca:	4680      	mov	r8, r0
 800fccc:	4630      	mov	r0, r6
 800fcce:	f7ff fe49 	bl	800f964 <_Bfree>
 800fcd2:	4647      	mov	r7, r8
 800fcd4:	106d      	asrs	r5, r5, #1
 800fcd6:	d00b      	beq.n	800fcf0 <__pow5mult+0xa0>
 800fcd8:	6820      	ldr	r0, [r4, #0]
 800fcda:	b938      	cbnz	r0, 800fcec <__pow5mult+0x9c>
 800fcdc:	4622      	mov	r2, r4
 800fcde:	4621      	mov	r1, r4
 800fce0:	4630      	mov	r0, r6
 800fce2:	f7ff ff0b 	bl	800fafc <__multiply>
 800fce6:	6020      	str	r0, [r4, #0]
 800fce8:	f8c0 9000 	str.w	r9, [r0]
 800fcec:	4604      	mov	r4, r0
 800fcee:	e7e4      	b.n	800fcba <__pow5mult+0x6a>
 800fcf0:	4638      	mov	r0, r7
 800fcf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fcf6:	bf00      	nop
 800fcf8:	08012328 	.word	0x08012328
 800fcfc:	0801215d 	.word	0x0801215d
 800fd00:	080121dd 	.word	0x080121dd

0800fd04 <__lshift>:
 800fd04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fd08:	460c      	mov	r4, r1
 800fd0a:	6849      	ldr	r1, [r1, #4]
 800fd0c:	6923      	ldr	r3, [r4, #16]
 800fd0e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fd12:	68a3      	ldr	r3, [r4, #8]
 800fd14:	4607      	mov	r7, r0
 800fd16:	4691      	mov	r9, r2
 800fd18:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fd1c:	f108 0601 	add.w	r6, r8, #1
 800fd20:	42b3      	cmp	r3, r6
 800fd22:	db0b      	blt.n	800fd3c <__lshift+0x38>
 800fd24:	4638      	mov	r0, r7
 800fd26:	f7ff fddd 	bl	800f8e4 <_Balloc>
 800fd2a:	4605      	mov	r5, r0
 800fd2c:	b948      	cbnz	r0, 800fd42 <__lshift+0x3e>
 800fd2e:	4602      	mov	r2, r0
 800fd30:	4b28      	ldr	r3, [pc, #160]	; (800fdd4 <__lshift+0xd0>)
 800fd32:	4829      	ldr	r0, [pc, #164]	; (800fdd8 <__lshift+0xd4>)
 800fd34:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800fd38:	f000 fd48 	bl	80107cc <__assert_func>
 800fd3c:	3101      	adds	r1, #1
 800fd3e:	005b      	lsls	r3, r3, #1
 800fd40:	e7ee      	b.n	800fd20 <__lshift+0x1c>
 800fd42:	2300      	movs	r3, #0
 800fd44:	f100 0114 	add.w	r1, r0, #20
 800fd48:	f100 0210 	add.w	r2, r0, #16
 800fd4c:	4618      	mov	r0, r3
 800fd4e:	4553      	cmp	r3, sl
 800fd50:	db33      	blt.n	800fdba <__lshift+0xb6>
 800fd52:	6920      	ldr	r0, [r4, #16]
 800fd54:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fd58:	f104 0314 	add.w	r3, r4, #20
 800fd5c:	f019 091f 	ands.w	r9, r9, #31
 800fd60:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fd64:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800fd68:	d02b      	beq.n	800fdc2 <__lshift+0xbe>
 800fd6a:	f1c9 0e20 	rsb	lr, r9, #32
 800fd6e:	468a      	mov	sl, r1
 800fd70:	2200      	movs	r2, #0
 800fd72:	6818      	ldr	r0, [r3, #0]
 800fd74:	fa00 f009 	lsl.w	r0, r0, r9
 800fd78:	4310      	orrs	r0, r2
 800fd7a:	f84a 0b04 	str.w	r0, [sl], #4
 800fd7e:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd82:	459c      	cmp	ip, r3
 800fd84:	fa22 f20e 	lsr.w	r2, r2, lr
 800fd88:	d8f3      	bhi.n	800fd72 <__lshift+0x6e>
 800fd8a:	ebac 0304 	sub.w	r3, ip, r4
 800fd8e:	3b15      	subs	r3, #21
 800fd90:	f023 0303 	bic.w	r3, r3, #3
 800fd94:	3304      	adds	r3, #4
 800fd96:	f104 0015 	add.w	r0, r4, #21
 800fd9a:	4584      	cmp	ip, r0
 800fd9c:	bf38      	it	cc
 800fd9e:	2304      	movcc	r3, #4
 800fda0:	50ca      	str	r2, [r1, r3]
 800fda2:	b10a      	cbz	r2, 800fda8 <__lshift+0xa4>
 800fda4:	f108 0602 	add.w	r6, r8, #2
 800fda8:	3e01      	subs	r6, #1
 800fdaa:	4638      	mov	r0, r7
 800fdac:	612e      	str	r6, [r5, #16]
 800fdae:	4621      	mov	r1, r4
 800fdb0:	f7ff fdd8 	bl	800f964 <_Bfree>
 800fdb4:	4628      	mov	r0, r5
 800fdb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fdba:	f842 0f04 	str.w	r0, [r2, #4]!
 800fdbe:	3301      	adds	r3, #1
 800fdc0:	e7c5      	b.n	800fd4e <__lshift+0x4a>
 800fdc2:	3904      	subs	r1, #4
 800fdc4:	f853 2b04 	ldr.w	r2, [r3], #4
 800fdc8:	f841 2f04 	str.w	r2, [r1, #4]!
 800fdcc:	459c      	cmp	ip, r3
 800fdce:	d8f9      	bhi.n	800fdc4 <__lshift+0xc0>
 800fdd0:	e7ea      	b.n	800fda8 <__lshift+0xa4>
 800fdd2:	bf00      	nop
 800fdd4:	080121cc 	.word	0x080121cc
 800fdd8:	080121dd 	.word	0x080121dd

0800fddc <__mcmp>:
 800fddc:	b530      	push	{r4, r5, lr}
 800fdde:	6902      	ldr	r2, [r0, #16]
 800fde0:	690c      	ldr	r4, [r1, #16]
 800fde2:	1b12      	subs	r2, r2, r4
 800fde4:	d10e      	bne.n	800fe04 <__mcmp+0x28>
 800fde6:	f100 0314 	add.w	r3, r0, #20
 800fdea:	3114      	adds	r1, #20
 800fdec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800fdf0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800fdf4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800fdf8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800fdfc:	42a5      	cmp	r5, r4
 800fdfe:	d003      	beq.n	800fe08 <__mcmp+0x2c>
 800fe00:	d305      	bcc.n	800fe0e <__mcmp+0x32>
 800fe02:	2201      	movs	r2, #1
 800fe04:	4610      	mov	r0, r2
 800fe06:	bd30      	pop	{r4, r5, pc}
 800fe08:	4283      	cmp	r3, r0
 800fe0a:	d3f3      	bcc.n	800fdf4 <__mcmp+0x18>
 800fe0c:	e7fa      	b.n	800fe04 <__mcmp+0x28>
 800fe0e:	f04f 32ff 	mov.w	r2, #4294967295
 800fe12:	e7f7      	b.n	800fe04 <__mcmp+0x28>

0800fe14 <__mdiff>:
 800fe14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe18:	460c      	mov	r4, r1
 800fe1a:	4606      	mov	r6, r0
 800fe1c:	4611      	mov	r1, r2
 800fe1e:	4620      	mov	r0, r4
 800fe20:	4690      	mov	r8, r2
 800fe22:	f7ff ffdb 	bl	800fddc <__mcmp>
 800fe26:	1e05      	subs	r5, r0, #0
 800fe28:	d110      	bne.n	800fe4c <__mdiff+0x38>
 800fe2a:	4629      	mov	r1, r5
 800fe2c:	4630      	mov	r0, r6
 800fe2e:	f7ff fd59 	bl	800f8e4 <_Balloc>
 800fe32:	b930      	cbnz	r0, 800fe42 <__mdiff+0x2e>
 800fe34:	4b3a      	ldr	r3, [pc, #232]	; (800ff20 <__mdiff+0x10c>)
 800fe36:	4602      	mov	r2, r0
 800fe38:	f240 2137 	movw	r1, #567	; 0x237
 800fe3c:	4839      	ldr	r0, [pc, #228]	; (800ff24 <__mdiff+0x110>)
 800fe3e:	f000 fcc5 	bl	80107cc <__assert_func>
 800fe42:	2301      	movs	r3, #1
 800fe44:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fe48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe4c:	bfa4      	itt	ge
 800fe4e:	4643      	movge	r3, r8
 800fe50:	46a0      	movge	r8, r4
 800fe52:	4630      	mov	r0, r6
 800fe54:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800fe58:	bfa6      	itte	ge
 800fe5a:	461c      	movge	r4, r3
 800fe5c:	2500      	movge	r5, #0
 800fe5e:	2501      	movlt	r5, #1
 800fe60:	f7ff fd40 	bl	800f8e4 <_Balloc>
 800fe64:	b920      	cbnz	r0, 800fe70 <__mdiff+0x5c>
 800fe66:	4b2e      	ldr	r3, [pc, #184]	; (800ff20 <__mdiff+0x10c>)
 800fe68:	4602      	mov	r2, r0
 800fe6a:	f240 2145 	movw	r1, #581	; 0x245
 800fe6e:	e7e5      	b.n	800fe3c <__mdiff+0x28>
 800fe70:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800fe74:	6926      	ldr	r6, [r4, #16]
 800fe76:	60c5      	str	r5, [r0, #12]
 800fe78:	f104 0914 	add.w	r9, r4, #20
 800fe7c:	f108 0514 	add.w	r5, r8, #20
 800fe80:	f100 0e14 	add.w	lr, r0, #20
 800fe84:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800fe88:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800fe8c:	f108 0210 	add.w	r2, r8, #16
 800fe90:	46f2      	mov	sl, lr
 800fe92:	2100      	movs	r1, #0
 800fe94:	f859 3b04 	ldr.w	r3, [r9], #4
 800fe98:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800fe9c:	fa11 f88b 	uxtah	r8, r1, fp
 800fea0:	b299      	uxth	r1, r3
 800fea2:	0c1b      	lsrs	r3, r3, #16
 800fea4:	eba8 0801 	sub.w	r8, r8, r1
 800fea8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800feac:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800feb0:	fa1f f888 	uxth.w	r8, r8
 800feb4:	1419      	asrs	r1, r3, #16
 800feb6:	454e      	cmp	r6, r9
 800feb8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800febc:	f84a 3b04 	str.w	r3, [sl], #4
 800fec0:	d8e8      	bhi.n	800fe94 <__mdiff+0x80>
 800fec2:	1b33      	subs	r3, r6, r4
 800fec4:	3b15      	subs	r3, #21
 800fec6:	f023 0303 	bic.w	r3, r3, #3
 800feca:	3304      	adds	r3, #4
 800fecc:	3415      	adds	r4, #21
 800fece:	42a6      	cmp	r6, r4
 800fed0:	bf38      	it	cc
 800fed2:	2304      	movcc	r3, #4
 800fed4:	441d      	add	r5, r3
 800fed6:	4473      	add	r3, lr
 800fed8:	469e      	mov	lr, r3
 800feda:	462e      	mov	r6, r5
 800fedc:	4566      	cmp	r6, ip
 800fede:	d30e      	bcc.n	800fefe <__mdiff+0xea>
 800fee0:	f10c 0203 	add.w	r2, ip, #3
 800fee4:	1b52      	subs	r2, r2, r5
 800fee6:	f022 0203 	bic.w	r2, r2, #3
 800feea:	3d03      	subs	r5, #3
 800feec:	45ac      	cmp	ip, r5
 800feee:	bf38      	it	cc
 800fef0:	2200      	movcc	r2, #0
 800fef2:	4413      	add	r3, r2
 800fef4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800fef8:	b17a      	cbz	r2, 800ff1a <__mdiff+0x106>
 800fefa:	6107      	str	r7, [r0, #16]
 800fefc:	e7a4      	b.n	800fe48 <__mdiff+0x34>
 800fefe:	f856 8b04 	ldr.w	r8, [r6], #4
 800ff02:	fa11 f288 	uxtah	r2, r1, r8
 800ff06:	1414      	asrs	r4, r2, #16
 800ff08:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ff0c:	b292      	uxth	r2, r2
 800ff0e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ff12:	f84e 2b04 	str.w	r2, [lr], #4
 800ff16:	1421      	asrs	r1, r4, #16
 800ff18:	e7e0      	b.n	800fedc <__mdiff+0xc8>
 800ff1a:	3f01      	subs	r7, #1
 800ff1c:	e7ea      	b.n	800fef4 <__mdiff+0xe0>
 800ff1e:	bf00      	nop
 800ff20:	080121cc 	.word	0x080121cc
 800ff24:	080121dd 	.word	0x080121dd

0800ff28 <__d2b>:
 800ff28:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ff2c:	460f      	mov	r7, r1
 800ff2e:	2101      	movs	r1, #1
 800ff30:	ec59 8b10 	vmov	r8, r9, d0
 800ff34:	4616      	mov	r6, r2
 800ff36:	f7ff fcd5 	bl	800f8e4 <_Balloc>
 800ff3a:	4604      	mov	r4, r0
 800ff3c:	b930      	cbnz	r0, 800ff4c <__d2b+0x24>
 800ff3e:	4602      	mov	r2, r0
 800ff40:	4b24      	ldr	r3, [pc, #144]	; (800ffd4 <__d2b+0xac>)
 800ff42:	4825      	ldr	r0, [pc, #148]	; (800ffd8 <__d2b+0xb0>)
 800ff44:	f240 310f 	movw	r1, #783	; 0x30f
 800ff48:	f000 fc40 	bl	80107cc <__assert_func>
 800ff4c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ff50:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ff54:	bb2d      	cbnz	r5, 800ffa2 <__d2b+0x7a>
 800ff56:	9301      	str	r3, [sp, #4]
 800ff58:	f1b8 0300 	subs.w	r3, r8, #0
 800ff5c:	d026      	beq.n	800ffac <__d2b+0x84>
 800ff5e:	4668      	mov	r0, sp
 800ff60:	9300      	str	r3, [sp, #0]
 800ff62:	f7ff fd87 	bl	800fa74 <__lo0bits>
 800ff66:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ff6a:	b1e8      	cbz	r0, 800ffa8 <__d2b+0x80>
 800ff6c:	f1c0 0320 	rsb	r3, r0, #32
 800ff70:	fa02 f303 	lsl.w	r3, r2, r3
 800ff74:	430b      	orrs	r3, r1
 800ff76:	40c2      	lsrs	r2, r0
 800ff78:	6163      	str	r3, [r4, #20]
 800ff7a:	9201      	str	r2, [sp, #4]
 800ff7c:	9b01      	ldr	r3, [sp, #4]
 800ff7e:	61a3      	str	r3, [r4, #24]
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	bf14      	ite	ne
 800ff84:	2202      	movne	r2, #2
 800ff86:	2201      	moveq	r2, #1
 800ff88:	6122      	str	r2, [r4, #16]
 800ff8a:	b1bd      	cbz	r5, 800ffbc <__d2b+0x94>
 800ff8c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ff90:	4405      	add	r5, r0
 800ff92:	603d      	str	r5, [r7, #0]
 800ff94:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ff98:	6030      	str	r0, [r6, #0]
 800ff9a:	4620      	mov	r0, r4
 800ff9c:	b003      	add	sp, #12
 800ff9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ffa2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ffa6:	e7d6      	b.n	800ff56 <__d2b+0x2e>
 800ffa8:	6161      	str	r1, [r4, #20]
 800ffaa:	e7e7      	b.n	800ff7c <__d2b+0x54>
 800ffac:	a801      	add	r0, sp, #4
 800ffae:	f7ff fd61 	bl	800fa74 <__lo0bits>
 800ffb2:	9b01      	ldr	r3, [sp, #4]
 800ffb4:	6163      	str	r3, [r4, #20]
 800ffb6:	3020      	adds	r0, #32
 800ffb8:	2201      	movs	r2, #1
 800ffba:	e7e5      	b.n	800ff88 <__d2b+0x60>
 800ffbc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ffc0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ffc4:	6038      	str	r0, [r7, #0]
 800ffc6:	6918      	ldr	r0, [r3, #16]
 800ffc8:	f7ff fd34 	bl	800fa34 <__hi0bits>
 800ffcc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ffd0:	e7e2      	b.n	800ff98 <__d2b+0x70>
 800ffd2:	bf00      	nop
 800ffd4:	080121cc 	.word	0x080121cc
 800ffd8:	080121dd 	.word	0x080121dd

0800ffdc <__ssputs_r>:
 800ffdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ffe0:	688e      	ldr	r6, [r1, #8]
 800ffe2:	461f      	mov	r7, r3
 800ffe4:	42be      	cmp	r6, r7
 800ffe6:	680b      	ldr	r3, [r1, #0]
 800ffe8:	4682      	mov	sl, r0
 800ffea:	460c      	mov	r4, r1
 800ffec:	4690      	mov	r8, r2
 800ffee:	d82c      	bhi.n	801004a <__ssputs_r+0x6e>
 800fff0:	898a      	ldrh	r2, [r1, #12]
 800fff2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fff6:	d026      	beq.n	8010046 <__ssputs_r+0x6a>
 800fff8:	6965      	ldr	r5, [r4, #20]
 800fffa:	6909      	ldr	r1, [r1, #16]
 800fffc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010000:	eba3 0901 	sub.w	r9, r3, r1
 8010004:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010008:	1c7b      	adds	r3, r7, #1
 801000a:	444b      	add	r3, r9
 801000c:	106d      	asrs	r5, r5, #1
 801000e:	429d      	cmp	r5, r3
 8010010:	bf38      	it	cc
 8010012:	461d      	movcc	r5, r3
 8010014:	0553      	lsls	r3, r2, #21
 8010016:	d527      	bpl.n	8010068 <__ssputs_r+0x8c>
 8010018:	4629      	mov	r1, r5
 801001a:	f7ff fbd7 	bl	800f7cc <_malloc_r>
 801001e:	4606      	mov	r6, r0
 8010020:	b360      	cbz	r0, 801007c <__ssputs_r+0xa0>
 8010022:	6921      	ldr	r1, [r4, #16]
 8010024:	464a      	mov	r2, r9
 8010026:	f7fe fcd4 	bl	800e9d2 <memcpy>
 801002a:	89a3      	ldrh	r3, [r4, #12]
 801002c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010030:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010034:	81a3      	strh	r3, [r4, #12]
 8010036:	6126      	str	r6, [r4, #16]
 8010038:	6165      	str	r5, [r4, #20]
 801003a:	444e      	add	r6, r9
 801003c:	eba5 0509 	sub.w	r5, r5, r9
 8010040:	6026      	str	r6, [r4, #0]
 8010042:	60a5      	str	r5, [r4, #8]
 8010044:	463e      	mov	r6, r7
 8010046:	42be      	cmp	r6, r7
 8010048:	d900      	bls.n	801004c <__ssputs_r+0x70>
 801004a:	463e      	mov	r6, r7
 801004c:	6820      	ldr	r0, [r4, #0]
 801004e:	4632      	mov	r2, r6
 8010050:	4641      	mov	r1, r8
 8010052:	f000 fb6f 	bl	8010734 <memmove>
 8010056:	68a3      	ldr	r3, [r4, #8]
 8010058:	1b9b      	subs	r3, r3, r6
 801005a:	60a3      	str	r3, [r4, #8]
 801005c:	6823      	ldr	r3, [r4, #0]
 801005e:	4433      	add	r3, r6
 8010060:	6023      	str	r3, [r4, #0]
 8010062:	2000      	movs	r0, #0
 8010064:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010068:	462a      	mov	r2, r5
 801006a:	f000 fbf5 	bl	8010858 <_realloc_r>
 801006e:	4606      	mov	r6, r0
 8010070:	2800      	cmp	r0, #0
 8010072:	d1e0      	bne.n	8010036 <__ssputs_r+0x5a>
 8010074:	6921      	ldr	r1, [r4, #16]
 8010076:	4650      	mov	r0, sl
 8010078:	f7ff fb34 	bl	800f6e4 <_free_r>
 801007c:	230c      	movs	r3, #12
 801007e:	f8ca 3000 	str.w	r3, [sl]
 8010082:	89a3      	ldrh	r3, [r4, #12]
 8010084:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010088:	81a3      	strh	r3, [r4, #12]
 801008a:	f04f 30ff 	mov.w	r0, #4294967295
 801008e:	e7e9      	b.n	8010064 <__ssputs_r+0x88>

08010090 <_svfiprintf_r>:
 8010090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010094:	4698      	mov	r8, r3
 8010096:	898b      	ldrh	r3, [r1, #12]
 8010098:	061b      	lsls	r3, r3, #24
 801009a:	b09d      	sub	sp, #116	; 0x74
 801009c:	4607      	mov	r7, r0
 801009e:	460d      	mov	r5, r1
 80100a0:	4614      	mov	r4, r2
 80100a2:	d50e      	bpl.n	80100c2 <_svfiprintf_r+0x32>
 80100a4:	690b      	ldr	r3, [r1, #16]
 80100a6:	b963      	cbnz	r3, 80100c2 <_svfiprintf_r+0x32>
 80100a8:	2140      	movs	r1, #64	; 0x40
 80100aa:	f7ff fb8f 	bl	800f7cc <_malloc_r>
 80100ae:	6028      	str	r0, [r5, #0]
 80100b0:	6128      	str	r0, [r5, #16]
 80100b2:	b920      	cbnz	r0, 80100be <_svfiprintf_r+0x2e>
 80100b4:	230c      	movs	r3, #12
 80100b6:	603b      	str	r3, [r7, #0]
 80100b8:	f04f 30ff 	mov.w	r0, #4294967295
 80100bc:	e0d0      	b.n	8010260 <_svfiprintf_r+0x1d0>
 80100be:	2340      	movs	r3, #64	; 0x40
 80100c0:	616b      	str	r3, [r5, #20]
 80100c2:	2300      	movs	r3, #0
 80100c4:	9309      	str	r3, [sp, #36]	; 0x24
 80100c6:	2320      	movs	r3, #32
 80100c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80100cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80100d0:	2330      	movs	r3, #48	; 0x30
 80100d2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8010278 <_svfiprintf_r+0x1e8>
 80100d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80100da:	f04f 0901 	mov.w	r9, #1
 80100de:	4623      	mov	r3, r4
 80100e0:	469a      	mov	sl, r3
 80100e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80100e6:	b10a      	cbz	r2, 80100ec <_svfiprintf_r+0x5c>
 80100e8:	2a25      	cmp	r2, #37	; 0x25
 80100ea:	d1f9      	bne.n	80100e0 <_svfiprintf_r+0x50>
 80100ec:	ebba 0b04 	subs.w	fp, sl, r4
 80100f0:	d00b      	beq.n	801010a <_svfiprintf_r+0x7a>
 80100f2:	465b      	mov	r3, fp
 80100f4:	4622      	mov	r2, r4
 80100f6:	4629      	mov	r1, r5
 80100f8:	4638      	mov	r0, r7
 80100fa:	f7ff ff6f 	bl	800ffdc <__ssputs_r>
 80100fe:	3001      	adds	r0, #1
 8010100:	f000 80a9 	beq.w	8010256 <_svfiprintf_r+0x1c6>
 8010104:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010106:	445a      	add	r2, fp
 8010108:	9209      	str	r2, [sp, #36]	; 0x24
 801010a:	f89a 3000 	ldrb.w	r3, [sl]
 801010e:	2b00      	cmp	r3, #0
 8010110:	f000 80a1 	beq.w	8010256 <_svfiprintf_r+0x1c6>
 8010114:	2300      	movs	r3, #0
 8010116:	f04f 32ff 	mov.w	r2, #4294967295
 801011a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801011e:	f10a 0a01 	add.w	sl, sl, #1
 8010122:	9304      	str	r3, [sp, #16]
 8010124:	9307      	str	r3, [sp, #28]
 8010126:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801012a:	931a      	str	r3, [sp, #104]	; 0x68
 801012c:	4654      	mov	r4, sl
 801012e:	2205      	movs	r2, #5
 8010130:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010134:	4850      	ldr	r0, [pc, #320]	; (8010278 <_svfiprintf_r+0x1e8>)
 8010136:	f7f0 f833 	bl	80001a0 <memchr>
 801013a:	9a04      	ldr	r2, [sp, #16]
 801013c:	b9d8      	cbnz	r0, 8010176 <_svfiprintf_r+0xe6>
 801013e:	06d0      	lsls	r0, r2, #27
 8010140:	bf44      	itt	mi
 8010142:	2320      	movmi	r3, #32
 8010144:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010148:	0711      	lsls	r1, r2, #28
 801014a:	bf44      	itt	mi
 801014c:	232b      	movmi	r3, #43	; 0x2b
 801014e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010152:	f89a 3000 	ldrb.w	r3, [sl]
 8010156:	2b2a      	cmp	r3, #42	; 0x2a
 8010158:	d015      	beq.n	8010186 <_svfiprintf_r+0xf6>
 801015a:	9a07      	ldr	r2, [sp, #28]
 801015c:	4654      	mov	r4, sl
 801015e:	2000      	movs	r0, #0
 8010160:	f04f 0c0a 	mov.w	ip, #10
 8010164:	4621      	mov	r1, r4
 8010166:	f811 3b01 	ldrb.w	r3, [r1], #1
 801016a:	3b30      	subs	r3, #48	; 0x30
 801016c:	2b09      	cmp	r3, #9
 801016e:	d94d      	bls.n	801020c <_svfiprintf_r+0x17c>
 8010170:	b1b0      	cbz	r0, 80101a0 <_svfiprintf_r+0x110>
 8010172:	9207      	str	r2, [sp, #28]
 8010174:	e014      	b.n	80101a0 <_svfiprintf_r+0x110>
 8010176:	eba0 0308 	sub.w	r3, r0, r8
 801017a:	fa09 f303 	lsl.w	r3, r9, r3
 801017e:	4313      	orrs	r3, r2
 8010180:	9304      	str	r3, [sp, #16]
 8010182:	46a2      	mov	sl, r4
 8010184:	e7d2      	b.n	801012c <_svfiprintf_r+0x9c>
 8010186:	9b03      	ldr	r3, [sp, #12]
 8010188:	1d19      	adds	r1, r3, #4
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	9103      	str	r1, [sp, #12]
 801018e:	2b00      	cmp	r3, #0
 8010190:	bfbb      	ittet	lt
 8010192:	425b      	neglt	r3, r3
 8010194:	f042 0202 	orrlt.w	r2, r2, #2
 8010198:	9307      	strge	r3, [sp, #28]
 801019a:	9307      	strlt	r3, [sp, #28]
 801019c:	bfb8      	it	lt
 801019e:	9204      	strlt	r2, [sp, #16]
 80101a0:	7823      	ldrb	r3, [r4, #0]
 80101a2:	2b2e      	cmp	r3, #46	; 0x2e
 80101a4:	d10c      	bne.n	80101c0 <_svfiprintf_r+0x130>
 80101a6:	7863      	ldrb	r3, [r4, #1]
 80101a8:	2b2a      	cmp	r3, #42	; 0x2a
 80101aa:	d134      	bne.n	8010216 <_svfiprintf_r+0x186>
 80101ac:	9b03      	ldr	r3, [sp, #12]
 80101ae:	1d1a      	adds	r2, r3, #4
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	9203      	str	r2, [sp, #12]
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	bfb8      	it	lt
 80101b8:	f04f 33ff 	movlt.w	r3, #4294967295
 80101bc:	3402      	adds	r4, #2
 80101be:	9305      	str	r3, [sp, #20]
 80101c0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8010288 <_svfiprintf_r+0x1f8>
 80101c4:	7821      	ldrb	r1, [r4, #0]
 80101c6:	2203      	movs	r2, #3
 80101c8:	4650      	mov	r0, sl
 80101ca:	f7ef ffe9 	bl	80001a0 <memchr>
 80101ce:	b138      	cbz	r0, 80101e0 <_svfiprintf_r+0x150>
 80101d0:	9b04      	ldr	r3, [sp, #16]
 80101d2:	eba0 000a 	sub.w	r0, r0, sl
 80101d6:	2240      	movs	r2, #64	; 0x40
 80101d8:	4082      	lsls	r2, r0
 80101da:	4313      	orrs	r3, r2
 80101dc:	3401      	adds	r4, #1
 80101de:	9304      	str	r3, [sp, #16]
 80101e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80101e4:	4825      	ldr	r0, [pc, #148]	; (801027c <_svfiprintf_r+0x1ec>)
 80101e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80101ea:	2206      	movs	r2, #6
 80101ec:	f7ef ffd8 	bl	80001a0 <memchr>
 80101f0:	2800      	cmp	r0, #0
 80101f2:	d038      	beq.n	8010266 <_svfiprintf_r+0x1d6>
 80101f4:	4b22      	ldr	r3, [pc, #136]	; (8010280 <_svfiprintf_r+0x1f0>)
 80101f6:	bb1b      	cbnz	r3, 8010240 <_svfiprintf_r+0x1b0>
 80101f8:	9b03      	ldr	r3, [sp, #12]
 80101fa:	3307      	adds	r3, #7
 80101fc:	f023 0307 	bic.w	r3, r3, #7
 8010200:	3308      	adds	r3, #8
 8010202:	9303      	str	r3, [sp, #12]
 8010204:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010206:	4433      	add	r3, r6
 8010208:	9309      	str	r3, [sp, #36]	; 0x24
 801020a:	e768      	b.n	80100de <_svfiprintf_r+0x4e>
 801020c:	fb0c 3202 	mla	r2, ip, r2, r3
 8010210:	460c      	mov	r4, r1
 8010212:	2001      	movs	r0, #1
 8010214:	e7a6      	b.n	8010164 <_svfiprintf_r+0xd4>
 8010216:	2300      	movs	r3, #0
 8010218:	3401      	adds	r4, #1
 801021a:	9305      	str	r3, [sp, #20]
 801021c:	4619      	mov	r1, r3
 801021e:	f04f 0c0a 	mov.w	ip, #10
 8010222:	4620      	mov	r0, r4
 8010224:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010228:	3a30      	subs	r2, #48	; 0x30
 801022a:	2a09      	cmp	r2, #9
 801022c:	d903      	bls.n	8010236 <_svfiprintf_r+0x1a6>
 801022e:	2b00      	cmp	r3, #0
 8010230:	d0c6      	beq.n	80101c0 <_svfiprintf_r+0x130>
 8010232:	9105      	str	r1, [sp, #20]
 8010234:	e7c4      	b.n	80101c0 <_svfiprintf_r+0x130>
 8010236:	fb0c 2101 	mla	r1, ip, r1, r2
 801023a:	4604      	mov	r4, r0
 801023c:	2301      	movs	r3, #1
 801023e:	e7f0      	b.n	8010222 <_svfiprintf_r+0x192>
 8010240:	ab03      	add	r3, sp, #12
 8010242:	9300      	str	r3, [sp, #0]
 8010244:	462a      	mov	r2, r5
 8010246:	4b0f      	ldr	r3, [pc, #60]	; (8010284 <_svfiprintf_r+0x1f4>)
 8010248:	a904      	add	r1, sp, #16
 801024a:	4638      	mov	r0, r7
 801024c:	f7fd fd54 	bl	800dcf8 <_printf_float>
 8010250:	1c42      	adds	r2, r0, #1
 8010252:	4606      	mov	r6, r0
 8010254:	d1d6      	bne.n	8010204 <_svfiprintf_r+0x174>
 8010256:	89ab      	ldrh	r3, [r5, #12]
 8010258:	065b      	lsls	r3, r3, #25
 801025a:	f53f af2d 	bmi.w	80100b8 <_svfiprintf_r+0x28>
 801025e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010260:	b01d      	add	sp, #116	; 0x74
 8010262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010266:	ab03      	add	r3, sp, #12
 8010268:	9300      	str	r3, [sp, #0]
 801026a:	462a      	mov	r2, r5
 801026c:	4b05      	ldr	r3, [pc, #20]	; (8010284 <_svfiprintf_r+0x1f4>)
 801026e:	a904      	add	r1, sp, #16
 8010270:	4638      	mov	r0, r7
 8010272:	f7fd ffe5 	bl	800e240 <_printf_i>
 8010276:	e7eb      	b.n	8010250 <_svfiprintf_r+0x1c0>
 8010278:	08012334 	.word	0x08012334
 801027c:	0801233e 	.word	0x0801233e
 8010280:	0800dcf9 	.word	0x0800dcf9
 8010284:	0800ffdd 	.word	0x0800ffdd
 8010288:	0801233a 	.word	0x0801233a

0801028c <__sfputc_r>:
 801028c:	6893      	ldr	r3, [r2, #8]
 801028e:	3b01      	subs	r3, #1
 8010290:	2b00      	cmp	r3, #0
 8010292:	b410      	push	{r4}
 8010294:	6093      	str	r3, [r2, #8]
 8010296:	da08      	bge.n	80102aa <__sfputc_r+0x1e>
 8010298:	6994      	ldr	r4, [r2, #24]
 801029a:	42a3      	cmp	r3, r4
 801029c:	db01      	blt.n	80102a2 <__sfputc_r+0x16>
 801029e:	290a      	cmp	r1, #10
 80102a0:	d103      	bne.n	80102aa <__sfputc_r+0x1e>
 80102a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80102a6:	f7fe ba80 	b.w	800e7aa <__swbuf_r>
 80102aa:	6813      	ldr	r3, [r2, #0]
 80102ac:	1c58      	adds	r0, r3, #1
 80102ae:	6010      	str	r0, [r2, #0]
 80102b0:	7019      	strb	r1, [r3, #0]
 80102b2:	4608      	mov	r0, r1
 80102b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80102b8:	4770      	bx	lr

080102ba <__sfputs_r>:
 80102ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102bc:	4606      	mov	r6, r0
 80102be:	460f      	mov	r7, r1
 80102c0:	4614      	mov	r4, r2
 80102c2:	18d5      	adds	r5, r2, r3
 80102c4:	42ac      	cmp	r4, r5
 80102c6:	d101      	bne.n	80102cc <__sfputs_r+0x12>
 80102c8:	2000      	movs	r0, #0
 80102ca:	e007      	b.n	80102dc <__sfputs_r+0x22>
 80102cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80102d0:	463a      	mov	r2, r7
 80102d2:	4630      	mov	r0, r6
 80102d4:	f7ff ffda 	bl	801028c <__sfputc_r>
 80102d8:	1c43      	adds	r3, r0, #1
 80102da:	d1f3      	bne.n	80102c4 <__sfputs_r+0xa>
 80102dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080102e0 <_vfiprintf_r>:
 80102e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102e4:	460d      	mov	r5, r1
 80102e6:	b09d      	sub	sp, #116	; 0x74
 80102e8:	4614      	mov	r4, r2
 80102ea:	4698      	mov	r8, r3
 80102ec:	4606      	mov	r6, r0
 80102ee:	b118      	cbz	r0, 80102f8 <_vfiprintf_r+0x18>
 80102f0:	6a03      	ldr	r3, [r0, #32]
 80102f2:	b90b      	cbnz	r3, 80102f8 <_vfiprintf_r+0x18>
 80102f4:	f7fe f952 	bl	800e59c <__sinit>
 80102f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80102fa:	07d9      	lsls	r1, r3, #31
 80102fc:	d405      	bmi.n	801030a <_vfiprintf_r+0x2a>
 80102fe:	89ab      	ldrh	r3, [r5, #12]
 8010300:	059a      	lsls	r2, r3, #22
 8010302:	d402      	bmi.n	801030a <_vfiprintf_r+0x2a>
 8010304:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010306:	f7fe fb62 	bl	800e9ce <__retarget_lock_acquire_recursive>
 801030a:	89ab      	ldrh	r3, [r5, #12]
 801030c:	071b      	lsls	r3, r3, #28
 801030e:	d501      	bpl.n	8010314 <_vfiprintf_r+0x34>
 8010310:	692b      	ldr	r3, [r5, #16]
 8010312:	b99b      	cbnz	r3, 801033c <_vfiprintf_r+0x5c>
 8010314:	4629      	mov	r1, r5
 8010316:	4630      	mov	r0, r6
 8010318:	f7fe fa84 	bl	800e824 <__swsetup_r>
 801031c:	b170      	cbz	r0, 801033c <_vfiprintf_r+0x5c>
 801031e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010320:	07dc      	lsls	r4, r3, #31
 8010322:	d504      	bpl.n	801032e <_vfiprintf_r+0x4e>
 8010324:	f04f 30ff 	mov.w	r0, #4294967295
 8010328:	b01d      	add	sp, #116	; 0x74
 801032a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801032e:	89ab      	ldrh	r3, [r5, #12]
 8010330:	0598      	lsls	r0, r3, #22
 8010332:	d4f7      	bmi.n	8010324 <_vfiprintf_r+0x44>
 8010334:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010336:	f7fe fb4b 	bl	800e9d0 <__retarget_lock_release_recursive>
 801033a:	e7f3      	b.n	8010324 <_vfiprintf_r+0x44>
 801033c:	2300      	movs	r3, #0
 801033e:	9309      	str	r3, [sp, #36]	; 0x24
 8010340:	2320      	movs	r3, #32
 8010342:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010346:	f8cd 800c 	str.w	r8, [sp, #12]
 801034a:	2330      	movs	r3, #48	; 0x30
 801034c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8010500 <_vfiprintf_r+0x220>
 8010350:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010354:	f04f 0901 	mov.w	r9, #1
 8010358:	4623      	mov	r3, r4
 801035a:	469a      	mov	sl, r3
 801035c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010360:	b10a      	cbz	r2, 8010366 <_vfiprintf_r+0x86>
 8010362:	2a25      	cmp	r2, #37	; 0x25
 8010364:	d1f9      	bne.n	801035a <_vfiprintf_r+0x7a>
 8010366:	ebba 0b04 	subs.w	fp, sl, r4
 801036a:	d00b      	beq.n	8010384 <_vfiprintf_r+0xa4>
 801036c:	465b      	mov	r3, fp
 801036e:	4622      	mov	r2, r4
 8010370:	4629      	mov	r1, r5
 8010372:	4630      	mov	r0, r6
 8010374:	f7ff ffa1 	bl	80102ba <__sfputs_r>
 8010378:	3001      	adds	r0, #1
 801037a:	f000 80a9 	beq.w	80104d0 <_vfiprintf_r+0x1f0>
 801037e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010380:	445a      	add	r2, fp
 8010382:	9209      	str	r2, [sp, #36]	; 0x24
 8010384:	f89a 3000 	ldrb.w	r3, [sl]
 8010388:	2b00      	cmp	r3, #0
 801038a:	f000 80a1 	beq.w	80104d0 <_vfiprintf_r+0x1f0>
 801038e:	2300      	movs	r3, #0
 8010390:	f04f 32ff 	mov.w	r2, #4294967295
 8010394:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010398:	f10a 0a01 	add.w	sl, sl, #1
 801039c:	9304      	str	r3, [sp, #16]
 801039e:	9307      	str	r3, [sp, #28]
 80103a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80103a4:	931a      	str	r3, [sp, #104]	; 0x68
 80103a6:	4654      	mov	r4, sl
 80103a8:	2205      	movs	r2, #5
 80103aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80103ae:	4854      	ldr	r0, [pc, #336]	; (8010500 <_vfiprintf_r+0x220>)
 80103b0:	f7ef fef6 	bl	80001a0 <memchr>
 80103b4:	9a04      	ldr	r2, [sp, #16]
 80103b6:	b9d8      	cbnz	r0, 80103f0 <_vfiprintf_r+0x110>
 80103b8:	06d1      	lsls	r1, r2, #27
 80103ba:	bf44      	itt	mi
 80103bc:	2320      	movmi	r3, #32
 80103be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80103c2:	0713      	lsls	r3, r2, #28
 80103c4:	bf44      	itt	mi
 80103c6:	232b      	movmi	r3, #43	; 0x2b
 80103c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80103cc:	f89a 3000 	ldrb.w	r3, [sl]
 80103d0:	2b2a      	cmp	r3, #42	; 0x2a
 80103d2:	d015      	beq.n	8010400 <_vfiprintf_r+0x120>
 80103d4:	9a07      	ldr	r2, [sp, #28]
 80103d6:	4654      	mov	r4, sl
 80103d8:	2000      	movs	r0, #0
 80103da:	f04f 0c0a 	mov.w	ip, #10
 80103de:	4621      	mov	r1, r4
 80103e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80103e4:	3b30      	subs	r3, #48	; 0x30
 80103e6:	2b09      	cmp	r3, #9
 80103e8:	d94d      	bls.n	8010486 <_vfiprintf_r+0x1a6>
 80103ea:	b1b0      	cbz	r0, 801041a <_vfiprintf_r+0x13a>
 80103ec:	9207      	str	r2, [sp, #28]
 80103ee:	e014      	b.n	801041a <_vfiprintf_r+0x13a>
 80103f0:	eba0 0308 	sub.w	r3, r0, r8
 80103f4:	fa09 f303 	lsl.w	r3, r9, r3
 80103f8:	4313      	orrs	r3, r2
 80103fa:	9304      	str	r3, [sp, #16]
 80103fc:	46a2      	mov	sl, r4
 80103fe:	e7d2      	b.n	80103a6 <_vfiprintf_r+0xc6>
 8010400:	9b03      	ldr	r3, [sp, #12]
 8010402:	1d19      	adds	r1, r3, #4
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	9103      	str	r1, [sp, #12]
 8010408:	2b00      	cmp	r3, #0
 801040a:	bfbb      	ittet	lt
 801040c:	425b      	neglt	r3, r3
 801040e:	f042 0202 	orrlt.w	r2, r2, #2
 8010412:	9307      	strge	r3, [sp, #28]
 8010414:	9307      	strlt	r3, [sp, #28]
 8010416:	bfb8      	it	lt
 8010418:	9204      	strlt	r2, [sp, #16]
 801041a:	7823      	ldrb	r3, [r4, #0]
 801041c:	2b2e      	cmp	r3, #46	; 0x2e
 801041e:	d10c      	bne.n	801043a <_vfiprintf_r+0x15a>
 8010420:	7863      	ldrb	r3, [r4, #1]
 8010422:	2b2a      	cmp	r3, #42	; 0x2a
 8010424:	d134      	bne.n	8010490 <_vfiprintf_r+0x1b0>
 8010426:	9b03      	ldr	r3, [sp, #12]
 8010428:	1d1a      	adds	r2, r3, #4
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	9203      	str	r2, [sp, #12]
 801042e:	2b00      	cmp	r3, #0
 8010430:	bfb8      	it	lt
 8010432:	f04f 33ff 	movlt.w	r3, #4294967295
 8010436:	3402      	adds	r4, #2
 8010438:	9305      	str	r3, [sp, #20]
 801043a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8010510 <_vfiprintf_r+0x230>
 801043e:	7821      	ldrb	r1, [r4, #0]
 8010440:	2203      	movs	r2, #3
 8010442:	4650      	mov	r0, sl
 8010444:	f7ef feac 	bl	80001a0 <memchr>
 8010448:	b138      	cbz	r0, 801045a <_vfiprintf_r+0x17a>
 801044a:	9b04      	ldr	r3, [sp, #16]
 801044c:	eba0 000a 	sub.w	r0, r0, sl
 8010450:	2240      	movs	r2, #64	; 0x40
 8010452:	4082      	lsls	r2, r0
 8010454:	4313      	orrs	r3, r2
 8010456:	3401      	adds	r4, #1
 8010458:	9304      	str	r3, [sp, #16]
 801045a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801045e:	4829      	ldr	r0, [pc, #164]	; (8010504 <_vfiprintf_r+0x224>)
 8010460:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010464:	2206      	movs	r2, #6
 8010466:	f7ef fe9b 	bl	80001a0 <memchr>
 801046a:	2800      	cmp	r0, #0
 801046c:	d03f      	beq.n	80104ee <_vfiprintf_r+0x20e>
 801046e:	4b26      	ldr	r3, [pc, #152]	; (8010508 <_vfiprintf_r+0x228>)
 8010470:	bb1b      	cbnz	r3, 80104ba <_vfiprintf_r+0x1da>
 8010472:	9b03      	ldr	r3, [sp, #12]
 8010474:	3307      	adds	r3, #7
 8010476:	f023 0307 	bic.w	r3, r3, #7
 801047a:	3308      	adds	r3, #8
 801047c:	9303      	str	r3, [sp, #12]
 801047e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010480:	443b      	add	r3, r7
 8010482:	9309      	str	r3, [sp, #36]	; 0x24
 8010484:	e768      	b.n	8010358 <_vfiprintf_r+0x78>
 8010486:	fb0c 3202 	mla	r2, ip, r2, r3
 801048a:	460c      	mov	r4, r1
 801048c:	2001      	movs	r0, #1
 801048e:	e7a6      	b.n	80103de <_vfiprintf_r+0xfe>
 8010490:	2300      	movs	r3, #0
 8010492:	3401      	adds	r4, #1
 8010494:	9305      	str	r3, [sp, #20]
 8010496:	4619      	mov	r1, r3
 8010498:	f04f 0c0a 	mov.w	ip, #10
 801049c:	4620      	mov	r0, r4
 801049e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80104a2:	3a30      	subs	r2, #48	; 0x30
 80104a4:	2a09      	cmp	r2, #9
 80104a6:	d903      	bls.n	80104b0 <_vfiprintf_r+0x1d0>
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d0c6      	beq.n	801043a <_vfiprintf_r+0x15a>
 80104ac:	9105      	str	r1, [sp, #20]
 80104ae:	e7c4      	b.n	801043a <_vfiprintf_r+0x15a>
 80104b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80104b4:	4604      	mov	r4, r0
 80104b6:	2301      	movs	r3, #1
 80104b8:	e7f0      	b.n	801049c <_vfiprintf_r+0x1bc>
 80104ba:	ab03      	add	r3, sp, #12
 80104bc:	9300      	str	r3, [sp, #0]
 80104be:	462a      	mov	r2, r5
 80104c0:	4b12      	ldr	r3, [pc, #72]	; (801050c <_vfiprintf_r+0x22c>)
 80104c2:	a904      	add	r1, sp, #16
 80104c4:	4630      	mov	r0, r6
 80104c6:	f7fd fc17 	bl	800dcf8 <_printf_float>
 80104ca:	4607      	mov	r7, r0
 80104cc:	1c78      	adds	r0, r7, #1
 80104ce:	d1d6      	bne.n	801047e <_vfiprintf_r+0x19e>
 80104d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80104d2:	07d9      	lsls	r1, r3, #31
 80104d4:	d405      	bmi.n	80104e2 <_vfiprintf_r+0x202>
 80104d6:	89ab      	ldrh	r3, [r5, #12]
 80104d8:	059a      	lsls	r2, r3, #22
 80104da:	d402      	bmi.n	80104e2 <_vfiprintf_r+0x202>
 80104dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80104de:	f7fe fa77 	bl	800e9d0 <__retarget_lock_release_recursive>
 80104e2:	89ab      	ldrh	r3, [r5, #12]
 80104e4:	065b      	lsls	r3, r3, #25
 80104e6:	f53f af1d 	bmi.w	8010324 <_vfiprintf_r+0x44>
 80104ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 80104ec:	e71c      	b.n	8010328 <_vfiprintf_r+0x48>
 80104ee:	ab03      	add	r3, sp, #12
 80104f0:	9300      	str	r3, [sp, #0]
 80104f2:	462a      	mov	r2, r5
 80104f4:	4b05      	ldr	r3, [pc, #20]	; (801050c <_vfiprintf_r+0x22c>)
 80104f6:	a904      	add	r1, sp, #16
 80104f8:	4630      	mov	r0, r6
 80104fa:	f7fd fea1 	bl	800e240 <_printf_i>
 80104fe:	e7e4      	b.n	80104ca <_vfiprintf_r+0x1ea>
 8010500:	08012334 	.word	0x08012334
 8010504:	0801233e 	.word	0x0801233e
 8010508:	0800dcf9 	.word	0x0800dcf9
 801050c:	080102bb 	.word	0x080102bb
 8010510:	0801233a 	.word	0x0801233a

08010514 <__sflush_r>:
 8010514:	898a      	ldrh	r2, [r1, #12]
 8010516:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801051a:	4605      	mov	r5, r0
 801051c:	0710      	lsls	r0, r2, #28
 801051e:	460c      	mov	r4, r1
 8010520:	d458      	bmi.n	80105d4 <__sflush_r+0xc0>
 8010522:	684b      	ldr	r3, [r1, #4]
 8010524:	2b00      	cmp	r3, #0
 8010526:	dc05      	bgt.n	8010534 <__sflush_r+0x20>
 8010528:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801052a:	2b00      	cmp	r3, #0
 801052c:	dc02      	bgt.n	8010534 <__sflush_r+0x20>
 801052e:	2000      	movs	r0, #0
 8010530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010534:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010536:	2e00      	cmp	r6, #0
 8010538:	d0f9      	beq.n	801052e <__sflush_r+0x1a>
 801053a:	2300      	movs	r3, #0
 801053c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010540:	682f      	ldr	r7, [r5, #0]
 8010542:	6a21      	ldr	r1, [r4, #32]
 8010544:	602b      	str	r3, [r5, #0]
 8010546:	d032      	beq.n	80105ae <__sflush_r+0x9a>
 8010548:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801054a:	89a3      	ldrh	r3, [r4, #12]
 801054c:	075a      	lsls	r2, r3, #29
 801054e:	d505      	bpl.n	801055c <__sflush_r+0x48>
 8010550:	6863      	ldr	r3, [r4, #4]
 8010552:	1ac0      	subs	r0, r0, r3
 8010554:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010556:	b10b      	cbz	r3, 801055c <__sflush_r+0x48>
 8010558:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801055a:	1ac0      	subs	r0, r0, r3
 801055c:	2300      	movs	r3, #0
 801055e:	4602      	mov	r2, r0
 8010560:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010562:	6a21      	ldr	r1, [r4, #32]
 8010564:	4628      	mov	r0, r5
 8010566:	47b0      	blx	r6
 8010568:	1c43      	adds	r3, r0, #1
 801056a:	89a3      	ldrh	r3, [r4, #12]
 801056c:	d106      	bne.n	801057c <__sflush_r+0x68>
 801056e:	6829      	ldr	r1, [r5, #0]
 8010570:	291d      	cmp	r1, #29
 8010572:	d82b      	bhi.n	80105cc <__sflush_r+0xb8>
 8010574:	4a29      	ldr	r2, [pc, #164]	; (801061c <__sflush_r+0x108>)
 8010576:	410a      	asrs	r2, r1
 8010578:	07d6      	lsls	r6, r2, #31
 801057a:	d427      	bmi.n	80105cc <__sflush_r+0xb8>
 801057c:	2200      	movs	r2, #0
 801057e:	6062      	str	r2, [r4, #4]
 8010580:	04d9      	lsls	r1, r3, #19
 8010582:	6922      	ldr	r2, [r4, #16]
 8010584:	6022      	str	r2, [r4, #0]
 8010586:	d504      	bpl.n	8010592 <__sflush_r+0x7e>
 8010588:	1c42      	adds	r2, r0, #1
 801058a:	d101      	bne.n	8010590 <__sflush_r+0x7c>
 801058c:	682b      	ldr	r3, [r5, #0]
 801058e:	b903      	cbnz	r3, 8010592 <__sflush_r+0x7e>
 8010590:	6560      	str	r0, [r4, #84]	; 0x54
 8010592:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010594:	602f      	str	r7, [r5, #0]
 8010596:	2900      	cmp	r1, #0
 8010598:	d0c9      	beq.n	801052e <__sflush_r+0x1a>
 801059a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801059e:	4299      	cmp	r1, r3
 80105a0:	d002      	beq.n	80105a8 <__sflush_r+0x94>
 80105a2:	4628      	mov	r0, r5
 80105a4:	f7ff f89e 	bl	800f6e4 <_free_r>
 80105a8:	2000      	movs	r0, #0
 80105aa:	6360      	str	r0, [r4, #52]	; 0x34
 80105ac:	e7c0      	b.n	8010530 <__sflush_r+0x1c>
 80105ae:	2301      	movs	r3, #1
 80105b0:	4628      	mov	r0, r5
 80105b2:	47b0      	blx	r6
 80105b4:	1c41      	adds	r1, r0, #1
 80105b6:	d1c8      	bne.n	801054a <__sflush_r+0x36>
 80105b8:	682b      	ldr	r3, [r5, #0]
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d0c5      	beq.n	801054a <__sflush_r+0x36>
 80105be:	2b1d      	cmp	r3, #29
 80105c0:	d001      	beq.n	80105c6 <__sflush_r+0xb2>
 80105c2:	2b16      	cmp	r3, #22
 80105c4:	d101      	bne.n	80105ca <__sflush_r+0xb6>
 80105c6:	602f      	str	r7, [r5, #0]
 80105c8:	e7b1      	b.n	801052e <__sflush_r+0x1a>
 80105ca:	89a3      	ldrh	r3, [r4, #12]
 80105cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80105d0:	81a3      	strh	r3, [r4, #12]
 80105d2:	e7ad      	b.n	8010530 <__sflush_r+0x1c>
 80105d4:	690f      	ldr	r7, [r1, #16]
 80105d6:	2f00      	cmp	r7, #0
 80105d8:	d0a9      	beq.n	801052e <__sflush_r+0x1a>
 80105da:	0793      	lsls	r3, r2, #30
 80105dc:	680e      	ldr	r6, [r1, #0]
 80105de:	bf08      	it	eq
 80105e0:	694b      	ldreq	r3, [r1, #20]
 80105e2:	600f      	str	r7, [r1, #0]
 80105e4:	bf18      	it	ne
 80105e6:	2300      	movne	r3, #0
 80105e8:	eba6 0807 	sub.w	r8, r6, r7
 80105ec:	608b      	str	r3, [r1, #8]
 80105ee:	f1b8 0f00 	cmp.w	r8, #0
 80105f2:	dd9c      	ble.n	801052e <__sflush_r+0x1a>
 80105f4:	6a21      	ldr	r1, [r4, #32]
 80105f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80105f8:	4643      	mov	r3, r8
 80105fa:	463a      	mov	r2, r7
 80105fc:	4628      	mov	r0, r5
 80105fe:	47b0      	blx	r6
 8010600:	2800      	cmp	r0, #0
 8010602:	dc06      	bgt.n	8010612 <__sflush_r+0xfe>
 8010604:	89a3      	ldrh	r3, [r4, #12]
 8010606:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801060a:	81a3      	strh	r3, [r4, #12]
 801060c:	f04f 30ff 	mov.w	r0, #4294967295
 8010610:	e78e      	b.n	8010530 <__sflush_r+0x1c>
 8010612:	4407      	add	r7, r0
 8010614:	eba8 0800 	sub.w	r8, r8, r0
 8010618:	e7e9      	b.n	80105ee <__sflush_r+0xda>
 801061a:	bf00      	nop
 801061c:	dfbffffe 	.word	0xdfbffffe

08010620 <_fflush_r>:
 8010620:	b538      	push	{r3, r4, r5, lr}
 8010622:	690b      	ldr	r3, [r1, #16]
 8010624:	4605      	mov	r5, r0
 8010626:	460c      	mov	r4, r1
 8010628:	b913      	cbnz	r3, 8010630 <_fflush_r+0x10>
 801062a:	2500      	movs	r5, #0
 801062c:	4628      	mov	r0, r5
 801062e:	bd38      	pop	{r3, r4, r5, pc}
 8010630:	b118      	cbz	r0, 801063a <_fflush_r+0x1a>
 8010632:	6a03      	ldr	r3, [r0, #32]
 8010634:	b90b      	cbnz	r3, 801063a <_fflush_r+0x1a>
 8010636:	f7fd ffb1 	bl	800e59c <__sinit>
 801063a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801063e:	2b00      	cmp	r3, #0
 8010640:	d0f3      	beq.n	801062a <_fflush_r+0xa>
 8010642:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010644:	07d0      	lsls	r0, r2, #31
 8010646:	d404      	bmi.n	8010652 <_fflush_r+0x32>
 8010648:	0599      	lsls	r1, r3, #22
 801064a:	d402      	bmi.n	8010652 <_fflush_r+0x32>
 801064c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801064e:	f7fe f9be 	bl	800e9ce <__retarget_lock_acquire_recursive>
 8010652:	4628      	mov	r0, r5
 8010654:	4621      	mov	r1, r4
 8010656:	f7ff ff5d 	bl	8010514 <__sflush_r>
 801065a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801065c:	07da      	lsls	r2, r3, #31
 801065e:	4605      	mov	r5, r0
 8010660:	d4e4      	bmi.n	801062c <_fflush_r+0xc>
 8010662:	89a3      	ldrh	r3, [r4, #12]
 8010664:	059b      	lsls	r3, r3, #22
 8010666:	d4e1      	bmi.n	801062c <_fflush_r+0xc>
 8010668:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801066a:	f7fe f9b1 	bl	800e9d0 <__retarget_lock_release_recursive>
 801066e:	e7dd      	b.n	801062c <_fflush_r+0xc>

08010670 <__swhatbuf_r>:
 8010670:	b570      	push	{r4, r5, r6, lr}
 8010672:	460c      	mov	r4, r1
 8010674:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010678:	2900      	cmp	r1, #0
 801067a:	b096      	sub	sp, #88	; 0x58
 801067c:	4615      	mov	r5, r2
 801067e:	461e      	mov	r6, r3
 8010680:	da0d      	bge.n	801069e <__swhatbuf_r+0x2e>
 8010682:	89a3      	ldrh	r3, [r4, #12]
 8010684:	f013 0f80 	tst.w	r3, #128	; 0x80
 8010688:	f04f 0100 	mov.w	r1, #0
 801068c:	bf0c      	ite	eq
 801068e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8010692:	2340      	movne	r3, #64	; 0x40
 8010694:	2000      	movs	r0, #0
 8010696:	6031      	str	r1, [r6, #0]
 8010698:	602b      	str	r3, [r5, #0]
 801069a:	b016      	add	sp, #88	; 0x58
 801069c:	bd70      	pop	{r4, r5, r6, pc}
 801069e:	466a      	mov	r2, sp
 80106a0:	f000 f862 	bl	8010768 <_fstat_r>
 80106a4:	2800      	cmp	r0, #0
 80106a6:	dbec      	blt.n	8010682 <__swhatbuf_r+0x12>
 80106a8:	9901      	ldr	r1, [sp, #4]
 80106aa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80106ae:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80106b2:	4259      	negs	r1, r3
 80106b4:	4159      	adcs	r1, r3
 80106b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80106ba:	e7eb      	b.n	8010694 <__swhatbuf_r+0x24>

080106bc <__smakebuf_r>:
 80106bc:	898b      	ldrh	r3, [r1, #12]
 80106be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80106c0:	079d      	lsls	r5, r3, #30
 80106c2:	4606      	mov	r6, r0
 80106c4:	460c      	mov	r4, r1
 80106c6:	d507      	bpl.n	80106d8 <__smakebuf_r+0x1c>
 80106c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80106cc:	6023      	str	r3, [r4, #0]
 80106ce:	6123      	str	r3, [r4, #16]
 80106d0:	2301      	movs	r3, #1
 80106d2:	6163      	str	r3, [r4, #20]
 80106d4:	b002      	add	sp, #8
 80106d6:	bd70      	pop	{r4, r5, r6, pc}
 80106d8:	ab01      	add	r3, sp, #4
 80106da:	466a      	mov	r2, sp
 80106dc:	f7ff ffc8 	bl	8010670 <__swhatbuf_r>
 80106e0:	9900      	ldr	r1, [sp, #0]
 80106e2:	4605      	mov	r5, r0
 80106e4:	4630      	mov	r0, r6
 80106e6:	f7ff f871 	bl	800f7cc <_malloc_r>
 80106ea:	b948      	cbnz	r0, 8010700 <__smakebuf_r+0x44>
 80106ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80106f0:	059a      	lsls	r2, r3, #22
 80106f2:	d4ef      	bmi.n	80106d4 <__smakebuf_r+0x18>
 80106f4:	f023 0303 	bic.w	r3, r3, #3
 80106f8:	f043 0302 	orr.w	r3, r3, #2
 80106fc:	81a3      	strh	r3, [r4, #12]
 80106fe:	e7e3      	b.n	80106c8 <__smakebuf_r+0xc>
 8010700:	89a3      	ldrh	r3, [r4, #12]
 8010702:	6020      	str	r0, [r4, #0]
 8010704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010708:	81a3      	strh	r3, [r4, #12]
 801070a:	9b00      	ldr	r3, [sp, #0]
 801070c:	6163      	str	r3, [r4, #20]
 801070e:	9b01      	ldr	r3, [sp, #4]
 8010710:	6120      	str	r0, [r4, #16]
 8010712:	b15b      	cbz	r3, 801072c <__smakebuf_r+0x70>
 8010714:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010718:	4630      	mov	r0, r6
 801071a:	f000 f837 	bl	801078c <_isatty_r>
 801071e:	b128      	cbz	r0, 801072c <__smakebuf_r+0x70>
 8010720:	89a3      	ldrh	r3, [r4, #12]
 8010722:	f023 0303 	bic.w	r3, r3, #3
 8010726:	f043 0301 	orr.w	r3, r3, #1
 801072a:	81a3      	strh	r3, [r4, #12]
 801072c:	89a3      	ldrh	r3, [r4, #12]
 801072e:	431d      	orrs	r5, r3
 8010730:	81a5      	strh	r5, [r4, #12]
 8010732:	e7cf      	b.n	80106d4 <__smakebuf_r+0x18>

08010734 <memmove>:
 8010734:	4288      	cmp	r0, r1
 8010736:	b510      	push	{r4, lr}
 8010738:	eb01 0402 	add.w	r4, r1, r2
 801073c:	d902      	bls.n	8010744 <memmove+0x10>
 801073e:	4284      	cmp	r4, r0
 8010740:	4623      	mov	r3, r4
 8010742:	d807      	bhi.n	8010754 <memmove+0x20>
 8010744:	1e43      	subs	r3, r0, #1
 8010746:	42a1      	cmp	r1, r4
 8010748:	d008      	beq.n	801075c <memmove+0x28>
 801074a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801074e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010752:	e7f8      	b.n	8010746 <memmove+0x12>
 8010754:	4402      	add	r2, r0
 8010756:	4601      	mov	r1, r0
 8010758:	428a      	cmp	r2, r1
 801075a:	d100      	bne.n	801075e <memmove+0x2a>
 801075c:	bd10      	pop	{r4, pc}
 801075e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010762:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010766:	e7f7      	b.n	8010758 <memmove+0x24>

08010768 <_fstat_r>:
 8010768:	b538      	push	{r3, r4, r5, lr}
 801076a:	4d07      	ldr	r5, [pc, #28]	; (8010788 <_fstat_r+0x20>)
 801076c:	2300      	movs	r3, #0
 801076e:	4604      	mov	r4, r0
 8010770:	4608      	mov	r0, r1
 8010772:	4611      	mov	r1, r2
 8010774:	602b      	str	r3, [r5, #0]
 8010776:	f7f2 fe99 	bl	80034ac <_fstat>
 801077a:	1c43      	adds	r3, r0, #1
 801077c:	d102      	bne.n	8010784 <_fstat_r+0x1c>
 801077e:	682b      	ldr	r3, [r5, #0]
 8010780:	b103      	cbz	r3, 8010784 <_fstat_r+0x1c>
 8010782:	6023      	str	r3, [r4, #0]
 8010784:	bd38      	pop	{r3, r4, r5, pc}
 8010786:	bf00      	nop
 8010788:	20001b58 	.word	0x20001b58

0801078c <_isatty_r>:
 801078c:	b538      	push	{r3, r4, r5, lr}
 801078e:	4d06      	ldr	r5, [pc, #24]	; (80107a8 <_isatty_r+0x1c>)
 8010790:	2300      	movs	r3, #0
 8010792:	4604      	mov	r4, r0
 8010794:	4608      	mov	r0, r1
 8010796:	602b      	str	r3, [r5, #0]
 8010798:	f7f2 fe98 	bl	80034cc <_isatty>
 801079c:	1c43      	adds	r3, r0, #1
 801079e:	d102      	bne.n	80107a6 <_isatty_r+0x1a>
 80107a0:	682b      	ldr	r3, [r5, #0]
 80107a2:	b103      	cbz	r3, 80107a6 <_isatty_r+0x1a>
 80107a4:	6023      	str	r3, [r4, #0]
 80107a6:	bd38      	pop	{r3, r4, r5, pc}
 80107a8:	20001b58 	.word	0x20001b58

080107ac <_sbrk_r>:
 80107ac:	b538      	push	{r3, r4, r5, lr}
 80107ae:	4d06      	ldr	r5, [pc, #24]	; (80107c8 <_sbrk_r+0x1c>)
 80107b0:	2300      	movs	r3, #0
 80107b2:	4604      	mov	r4, r0
 80107b4:	4608      	mov	r0, r1
 80107b6:	602b      	str	r3, [r5, #0]
 80107b8:	f7f2 fea0 	bl	80034fc <_sbrk>
 80107bc:	1c43      	adds	r3, r0, #1
 80107be:	d102      	bne.n	80107c6 <_sbrk_r+0x1a>
 80107c0:	682b      	ldr	r3, [r5, #0]
 80107c2:	b103      	cbz	r3, 80107c6 <_sbrk_r+0x1a>
 80107c4:	6023      	str	r3, [r4, #0]
 80107c6:	bd38      	pop	{r3, r4, r5, pc}
 80107c8:	20001b58 	.word	0x20001b58

080107cc <__assert_func>:
 80107cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80107ce:	4614      	mov	r4, r2
 80107d0:	461a      	mov	r2, r3
 80107d2:	4b09      	ldr	r3, [pc, #36]	; (80107f8 <__assert_func+0x2c>)
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	4605      	mov	r5, r0
 80107d8:	68d8      	ldr	r0, [r3, #12]
 80107da:	b14c      	cbz	r4, 80107f0 <__assert_func+0x24>
 80107dc:	4b07      	ldr	r3, [pc, #28]	; (80107fc <__assert_func+0x30>)
 80107de:	9100      	str	r1, [sp, #0]
 80107e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80107e4:	4906      	ldr	r1, [pc, #24]	; (8010800 <__assert_func+0x34>)
 80107e6:	462b      	mov	r3, r5
 80107e8:	f000 f872 	bl	80108d0 <fiprintf>
 80107ec:	f000 f882 	bl	80108f4 <abort>
 80107f0:	4b04      	ldr	r3, [pc, #16]	; (8010804 <__assert_func+0x38>)
 80107f2:	461c      	mov	r4, r3
 80107f4:	e7f3      	b.n	80107de <__assert_func+0x12>
 80107f6:	bf00      	nop
 80107f8:	2000009c 	.word	0x2000009c
 80107fc:	0801234f 	.word	0x0801234f
 8010800:	0801235c 	.word	0x0801235c
 8010804:	0801238a 	.word	0x0801238a

08010808 <_calloc_r>:
 8010808:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801080a:	fba1 2402 	umull	r2, r4, r1, r2
 801080e:	b94c      	cbnz	r4, 8010824 <_calloc_r+0x1c>
 8010810:	4611      	mov	r1, r2
 8010812:	9201      	str	r2, [sp, #4]
 8010814:	f7fe ffda 	bl	800f7cc <_malloc_r>
 8010818:	9a01      	ldr	r2, [sp, #4]
 801081a:	4605      	mov	r5, r0
 801081c:	b930      	cbnz	r0, 801082c <_calloc_r+0x24>
 801081e:	4628      	mov	r0, r5
 8010820:	b003      	add	sp, #12
 8010822:	bd30      	pop	{r4, r5, pc}
 8010824:	220c      	movs	r2, #12
 8010826:	6002      	str	r2, [r0, #0]
 8010828:	2500      	movs	r5, #0
 801082a:	e7f8      	b.n	801081e <_calloc_r+0x16>
 801082c:	4621      	mov	r1, r4
 801082e:	f7fe f851 	bl	800e8d4 <memset>
 8010832:	e7f4      	b.n	801081e <_calloc_r+0x16>

08010834 <__ascii_mbtowc>:
 8010834:	b082      	sub	sp, #8
 8010836:	b901      	cbnz	r1, 801083a <__ascii_mbtowc+0x6>
 8010838:	a901      	add	r1, sp, #4
 801083a:	b142      	cbz	r2, 801084e <__ascii_mbtowc+0x1a>
 801083c:	b14b      	cbz	r3, 8010852 <__ascii_mbtowc+0x1e>
 801083e:	7813      	ldrb	r3, [r2, #0]
 8010840:	600b      	str	r3, [r1, #0]
 8010842:	7812      	ldrb	r2, [r2, #0]
 8010844:	1e10      	subs	r0, r2, #0
 8010846:	bf18      	it	ne
 8010848:	2001      	movne	r0, #1
 801084a:	b002      	add	sp, #8
 801084c:	4770      	bx	lr
 801084e:	4610      	mov	r0, r2
 8010850:	e7fb      	b.n	801084a <__ascii_mbtowc+0x16>
 8010852:	f06f 0001 	mvn.w	r0, #1
 8010856:	e7f8      	b.n	801084a <__ascii_mbtowc+0x16>

08010858 <_realloc_r>:
 8010858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801085c:	4680      	mov	r8, r0
 801085e:	4614      	mov	r4, r2
 8010860:	460e      	mov	r6, r1
 8010862:	b921      	cbnz	r1, 801086e <_realloc_r+0x16>
 8010864:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010868:	4611      	mov	r1, r2
 801086a:	f7fe bfaf 	b.w	800f7cc <_malloc_r>
 801086e:	b92a      	cbnz	r2, 801087c <_realloc_r+0x24>
 8010870:	f7fe ff38 	bl	800f6e4 <_free_r>
 8010874:	4625      	mov	r5, r4
 8010876:	4628      	mov	r0, r5
 8010878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801087c:	f000 f841 	bl	8010902 <_malloc_usable_size_r>
 8010880:	4284      	cmp	r4, r0
 8010882:	4607      	mov	r7, r0
 8010884:	d802      	bhi.n	801088c <_realloc_r+0x34>
 8010886:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801088a:	d812      	bhi.n	80108b2 <_realloc_r+0x5a>
 801088c:	4621      	mov	r1, r4
 801088e:	4640      	mov	r0, r8
 8010890:	f7fe ff9c 	bl	800f7cc <_malloc_r>
 8010894:	4605      	mov	r5, r0
 8010896:	2800      	cmp	r0, #0
 8010898:	d0ed      	beq.n	8010876 <_realloc_r+0x1e>
 801089a:	42bc      	cmp	r4, r7
 801089c:	4622      	mov	r2, r4
 801089e:	4631      	mov	r1, r6
 80108a0:	bf28      	it	cs
 80108a2:	463a      	movcs	r2, r7
 80108a4:	f7fe f895 	bl	800e9d2 <memcpy>
 80108a8:	4631      	mov	r1, r6
 80108aa:	4640      	mov	r0, r8
 80108ac:	f7fe ff1a 	bl	800f6e4 <_free_r>
 80108b0:	e7e1      	b.n	8010876 <_realloc_r+0x1e>
 80108b2:	4635      	mov	r5, r6
 80108b4:	e7df      	b.n	8010876 <_realloc_r+0x1e>

080108b6 <__ascii_wctomb>:
 80108b6:	b149      	cbz	r1, 80108cc <__ascii_wctomb+0x16>
 80108b8:	2aff      	cmp	r2, #255	; 0xff
 80108ba:	bf85      	ittet	hi
 80108bc:	238a      	movhi	r3, #138	; 0x8a
 80108be:	6003      	strhi	r3, [r0, #0]
 80108c0:	700a      	strbls	r2, [r1, #0]
 80108c2:	f04f 30ff 	movhi.w	r0, #4294967295
 80108c6:	bf98      	it	ls
 80108c8:	2001      	movls	r0, #1
 80108ca:	4770      	bx	lr
 80108cc:	4608      	mov	r0, r1
 80108ce:	4770      	bx	lr

080108d0 <fiprintf>:
 80108d0:	b40e      	push	{r1, r2, r3}
 80108d2:	b503      	push	{r0, r1, lr}
 80108d4:	4601      	mov	r1, r0
 80108d6:	ab03      	add	r3, sp, #12
 80108d8:	4805      	ldr	r0, [pc, #20]	; (80108f0 <fiprintf+0x20>)
 80108da:	f853 2b04 	ldr.w	r2, [r3], #4
 80108de:	6800      	ldr	r0, [r0, #0]
 80108e0:	9301      	str	r3, [sp, #4]
 80108e2:	f7ff fcfd 	bl	80102e0 <_vfiprintf_r>
 80108e6:	b002      	add	sp, #8
 80108e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80108ec:	b003      	add	sp, #12
 80108ee:	4770      	bx	lr
 80108f0:	2000009c 	.word	0x2000009c

080108f4 <abort>:
 80108f4:	b508      	push	{r3, lr}
 80108f6:	2006      	movs	r0, #6
 80108f8:	f000 f834 	bl	8010964 <raise>
 80108fc:	2001      	movs	r0, #1
 80108fe:	f7f2 fda2 	bl	8003446 <_exit>

08010902 <_malloc_usable_size_r>:
 8010902:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010906:	1f18      	subs	r0, r3, #4
 8010908:	2b00      	cmp	r3, #0
 801090a:	bfbc      	itt	lt
 801090c:	580b      	ldrlt	r3, [r1, r0]
 801090e:	18c0      	addlt	r0, r0, r3
 8010910:	4770      	bx	lr

08010912 <_raise_r>:
 8010912:	291f      	cmp	r1, #31
 8010914:	b538      	push	{r3, r4, r5, lr}
 8010916:	4604      	mov	r4, r0
 8010918:	460d      	mov	r5, r1
 801091a:	d904      	bls.n	8010926 <_raise_r+0x14>
 801091c:	2316      	movs	r3, #22
 801091e:	6003      	str	r3, [r0, #0]
 8010920:	f04f 30ff 	mov.w	r0, #4294967295
 8010924:	bd38      	pop	{r3, r4, r5, pc}
 8010926:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8010928:	b112      	cbz	r2, 8010930 <_raise_r+0x1e>
 801092a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801092e:	b94b      	cbnz	r3, 8010944 <_raise_r+0x32>
 8010930:	4620      	mov	r0, r4
 8010932:	f000 f831 	bl	8010998 <_getpid_r>
 8010936:	462a      	mov	r2, r5
 8010938:	4601      	mov	r1, r0
 801093a:	4620      	mov	r0, r4
 801093c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010940:	f000 b818 	b.w	8010974 <_kill_r>
 8010944:	2b01      	cmp	r3, #1
 8010946:	d00a      	beq.n	801095e <_raise_r+0x4c>
 8010948:	1c59      	adds	r1, r3, #1
 801094a:	d103      	bne.n	8010954 <_raise_r+0x42>
 801094c:	2316      	movs	r3, #22
 801094e:	6003      	str	r3, [r0, #0]
 8010950:	2001      	movs	r0, #1
 8010952:	e7e7      	b.n	8010924 <_raise_r+0x12>
 8010954:	2400      	movs	r4, #0
 8010956:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801095a:	4628      	mov	r0, r5
 801095c:	4798      	blx	r3
 801095e:	2000      	movs	r0, #0
 8010960:	e7e0      	b.n	8010924 <_raise_r+0x12>
	...

08010964 <raise>:
 8010964:	4b02      	ldr	r3, [pc, #8]	; (8010970 <raise+0xc>)
 8010966:	4601      	mov	r1, r0
 8010968:	6818      	ldr	r0, [r3, #0]
 801096a:	f7ff bfd2 	b.w	8010912 <_raise_r>
 801096e:	bf00      	nop
 8010970:	2000009c 	.word	0x2000009c

08010974 <_kill_r>:
 8010974:	b538      	push	{r3, r4, r5, lr}
 8010976:	4d07      	ldr	r5, [pc, #28]	; (8010994 <_kill_r+0x20>)
 8010978:	2300      	movs	r3, #0
 801097a:	4604      	mov	r4, r0
 801097c:	4608      	mov	r0, r1
 801097e:	4611      	mov	r1, r2
 8010980:	602b      	str	r3, [r5, #0]
 8010982:	f7f2 fd50 	bl	8003426 <_kill>
 8010986:	1c43      	adds	r3, r0, #1
 8010988:	d102      	bne.n	8010990 <_kill_r+0x1c>
 801098a:	682b      	ldr	r3, [r5, #0]
 801098c:	b103      	cbz	r3, 8010990 <_kill_r+0x1c>
 801098e:	6023      	str	r3, [r4, #0]
 8010990:	bd38      	pop	{r3, r4, r5, pc}
 8010992:	bf00      	nop
 8010994:	20001b58 	.word	0x20001b58

08010998 <_getpid_r>:
 8010998:	f7f2 bd3d 	b.w	8003416 <_getpid>

0801099c <_init>:
 801099c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801099e:	bf00      	nop
 80109a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80109a2:	bc08      	pop	{r3}
 80109a4:	469e      	mov	lr, r3
 80109a6:	4770      	bx	lr

080109a8 <_fini>:
 80109a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109aa:	bf00      	nop
 80109ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80109ae:	bc08      	pop	{r3}
 80109b0:	469e      	mov	lr, r3
 80109b2:	4770      	bx	lr
